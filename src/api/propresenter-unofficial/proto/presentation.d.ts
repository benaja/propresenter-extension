import * as $protobuf from "protobufjs";
import Long = require("long");
/** Namespace rv. */
export namespace rv {

    /** Namespace data. */
    namespace data {

        /** Properties of a Presentation. */
        interface IPresentation {

            /** Presentation applicationInfo */
            applicationInfo?: (rv.data.IApplicationInfo|null);

            /** Presentation uuid */
            uuid?: (rv.data.IUUID|null);

            /** Presentation name */
            name?: (string|null);

            /** Presentation lastDateUsed */
            lastDateUsed?: (rv.data.ITimestamp|null);

            /** Presentation lastModifiedDate */
            lastModifiedDate?: (rv.data.ITimestamp|null);

            /** Presentation category */
            category?: (string|null);

            /** Presentation notes */
            notes?: (string|null);

            /** Presentation background */
            background?: (rv.data.IBackground|null);

            /** Presentation chordChart */
            chordChart?: (rv.data.IURL|null);

            /** Presentation selectedArrangement */
            selectedArrangement?: (rv.data.IUUID|null);

            /** Presentation arrangements */
            arrangements?: (rv.data.Presentation.IArrangement[]|null);

            /** Presentation cueGroups */
            cueGroups?: (rv.data.Presentation.ICueGroup[]|null);

            /** Presentation cues */
            cues?: (rv.data.ICue[]|null);

            /** Presentation ccli */
            ccli?: (rv.data.Presentation.ICCLI|null);

            /** Presentation bibleReference */
            bibleReference?: (rv.data.Presentation.IBibleReference|null);

            /** Presentation timeline */
            timeline?: (rv.data.Presentation.ITimeline|null);

            /** Presentation transition */
            transition?: (rv.data.ITransition|null);

            /** Presentation contentDestination */
            contentDestination?: (rv.data.Action.ContentDestination|null);

            /** Presentation multiTracksLicensing */
            multiTracksLicensing?: (rv.data.Presentation.IMultiTracksLicensing|null);

            /** Presentation musicKey */
            musicKey?: (string|null);

            /** Presentation music */
            music?: (rv.data.Presentation.IMusic|null);

            /** Presentation slideShowDuration */
            slideShowDuration?: (number|null);
        }

        /** Represents a Presentation. */
        class Presentation implements IPresentation {

            /**
             * Constructs a new Presentation.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IPresentation);

            /** Presentation applicationInfo. */
            public applicationInfo?: (rv.data.IApplicationInfo|null);

            /** Presentation uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Presentation name. */
            public name: string;

            /** Presentation lastDateUsed. */
            public lastDateUsed?: (rv.data.ITimestamp|null);

            /** Presentation lastModifiedDate. */
            public lastModifiedDate?: (rv.data.ITimestamp|null);

            /** Presentation category. */
            public category: string;

            /** Presentation notes. */
            public notes: string;

            /** Presentation background. */
            public background?: (rv.data.IBackground|null);

            /** Presentation chordChart. */
            public chordChart?: (rv.data.IURL|null);

            /** Presentation selectedArrangement. */
            public selectedArrangement?: (rv.data.IUUID|null);

            /** Presentation arrangements. */
            public arrangements: rv.data.Presentation.IArrangement[];

            /** Presentation cueGroups. */
            public cueGroups: rv.data.Presentation.ICueGroup[];

            /** Presentation cues. */
            public cues: rv.data.ICue[];

            /** Presentation ccli. */
            public ccli?: (rv.data.Presentation.ICCLI|null);

            /** Presentation bibleReference. */
            public bibleReference?: (rv.data.Presentation.IBibleReference|null);

            /** Presentation timeline. */
            public timeline?: (rv.data.Presentation.ITimeline|null);

            /** Presentation transition. */
            public transition?: (rv.data.ITransition|null);

            /** Presentation contentDestination. */
            public contentDestination: rv.data.Action.ContentDestination;

            /** Presentation multiTracksLicensing. */
            public multiTracksLicensing?: (rv.data.Presentation.IMultiTracksLicensing|null);

            /** Presentation musicKey. */
            public musicKey: string;

            /** Presentation music. */
            public music?: (rv.data.Presentation.IMusic|null);

            /** Presentation slideShowDuration. */
            public slideShowDuration?: (number|null);

            /** Presentation SlideShow. */
            public SlideShow?: "slideShowDuration";

            /**
             * Creates a new Presentation instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Presentation instance
             */
            public static create(properties?: rv.data.IPresentation): rv.data.Presentation;

            /**
             * Encodes the specified Presentation message. Does not implicitly {@link rv.data.Presentation.verify|verify} messages.
             * @param message Presentation message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IPresentation, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Presentation message, length delimited. Does not implicitly {@link rv.data.Presentation.verify|verify} messages.
             * @param message Presentation message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IPresentation, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Presentation message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Presentation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation;

            /**
             * Decodes a Presentation message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Presentation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation;

            /**
             * Verifies a Presentation message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Presentation message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Presentation
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Presentation;

            /**
             * Creates a plain object from a Presentation message. Also converts values to other types if specified.
             * @param message Presentation
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Presentation, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Presentation to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Presentation
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Presentation {

            /** Properties of a CCLI. */
            interface ICCLI {

                /** CCLI author */
                author?: (string|null);

                /** CCLI artistCredits */
                artistCredits?: (string|null);

                /** CCLI songTitle */
                songTitle?: (string|null);

                /** CCLI publisher */
                publisher?: (string|null);

                /** CCLI copyrightYear */
                copyrightYear?: (number|null);

                /** CCLI songNumber */
                songNumber?: (number|null);

                /** CCLI display */
                display?: (boolean|null);

                /** CCLI album */
                album?: (string|null);

                /** CCLI artwork */
                artwork?: (Uint8Array|null);
            }

            /** Represents a CCLI. */
            class CCLI implements ICCLI {

                /**
                 * Constructs a new CCLI.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.ICCLI);

                /** CCLI author. */
                public author: string;

                /** CCLI artistCredits. */
                public artistCredits: string;

                /** CCLI songTitle. */
                public songTitle: string;

                /** CCLI publisher. */
                public publisher: string;

                /** CCLI copyrightYear. */
                public copyrightYear: number;

                /** CCLI songNumber. */
                public songNumber: number;

                /** CCLI display. */
                public display: boolean;

                /** CCLI album. */
                public album: string;

                /** CCLI artwork. */
                public artwork: Uint8Array;

                /**
                 * Creates a new CCLI instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CCLI instance
                 */
                public static create(properties?: rv.data.Presentation.ICCLI): rv.data.Presentation.CCLI;

                /**
                 * Encodes the specified CCLI message. Does not implicitly {@link rv.data.Presentation.CCLI.verify|verify} messages.
                 * @param message CCLI message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.ICCLI, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CCLI message, length delimited. Does not implicitly {@link rv.data.Presentation.CCLI.verify|verify} messages.
                 * @param message CCLI message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.ICCLI, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CCLI message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CCLI
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.CCLI;

                /**
                 * Decodes a CCLI message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CCLI
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.CCLI;

                /**
                 * Verifies a CCLI message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CCLI message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CCLI
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.CCLI;

                /**
                 * Creates a plain object from a CCLI message. Also converts values to other types if specified.
                 * @param message CCLI
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.CCLI, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CCLI to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for CCLI
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a BibleReference. */
            interface IBibleReference {

                /** BibleReference bookIndex */
                bookIndex?: (number|null);

                /** BibleReference bookName */
                bookName?: (string|null);

                /** BibleReference chapterRange */
                chapterRange?: (rv.data.IIntRange|null);

                /** BibleReference verseRange */
                verseRange?: (rv.data.IIntRange|null);

                /** BibleReference translationName */
                translationName?: (string|null);

                /** BibleReference translationDisplayAbbreviation */
                translationDisplayAbbreviation?: (string|null);

                /** BibleReference translationInternalAbbreviation */
                translationInternalAbbreviation?: (string|null);

                /** BibleReference bookKey */
                bookKey?: (string|null);
            }

            /** Represents a BibleReference. */
            class BibleReference implements IBibleReference {

                /**
                 * Constructs a new BibleReference.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.IBibleReference);

                /** BibleReference bookIndex. */
                public bookIndex: number;

                /** BibleReference bookName. */
                public bookName: string;

                /** BibleReference chapterRange. */
                public chapterRange?: (rv.data.IIntRange|null);

                /** BibleReference verseRange. */
                public verseRange?: (rv.data.IIntRange|null);

                /** BibleReference translationName. */
                public translationName: string;

                /** BibleReference translationDisplayAbbreviation. */
                public translationDisplayAbbreviation: string;

                /** BibleReference translationInternalAbbreviation. */
                public translationInternalAbbreviation: string;

                /** BibleReference bookKey. */
                public bookKey: string;

                /**
                 * Creates a new BibleReference instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BibleReference instance
                 */
                public static create(properties?: rv.data.Presentation.IBibleReference): rv.data.Presentation.BibleReference;

                /**
                 * Encodes the specified BibleReference message. Does not implicitly {@link rv.data.Presentation.BibleReference.verify|verify} messages.
                 * @param message BibleReference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.IBibleReference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BibleReference message, length delimited. Does not implicitly {@link rv.data.Presentation.BibleReference.verify|verify} messages.
                 * @param message BibleReference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.IBibleReference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BibleReference message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BibleReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.BibleReference;

                /**
                 * Decodes a BibleReference message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BibleReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.BibleReference;

                /**
                 * Verifies a BibleReference message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BibleReference message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BibleReference
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.BibleReference;

                /**
                 * Creates a plain object from a BibleReference message. Also converts values to other types if specified.
                 * @param message BibleReference
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.BibleReference, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BibleReference to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for BibleReference
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Timeline. */
            interface ITimeline {

                /** Timeline cues */
                cues?: (rv.data.Presentation.Timeline.ICue[]|null);

                /** Timeline duration */
                duration?: (number|null);

                /** Timeline loop */
                loop?: (boolean|null);

                /** Timeline audioAction */
                audioAction?: (rv.data.IAction|null);

                /** Timeline timecodeEnable */
                timecodeEnable?: (boolean|null);

                /** Timeline timecodeOffset */
                timecodeOffset?: (number|null);

                /** Timeline cuesV2 */
                cuesV2?: (rv.data.Presentation.Timeline.ICue[]|null);
            }

            /** Represents a Timeline. */
            class Timeline implements ITimeline {

                /**
                 * Constructs a new Timeline.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.ITimeline);

                /** Timeline cues. */
                public cues: rv.data.Presentation.Timeline.ICue[];

                /** Timeline duration. */
                public duration: number;

                /** Timeline loop. */
                public loop: boolean;

                /** Timeline audioAction. */
                public audioAction?: (rv.data.IAction|null);

                /** Timeline timecodeEnable. */
                public timecodeEnable: boolean;

                /** Timeline timecodeOffset. */
                public timecodeOffset: number;

                /** Timeline cuesV2. */
                public cuesV2: rv.data.Presentation.Timeline.ICue[];

                /**
                 * Creates a new Timeline instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Timeline instance
                 */
                public static create(properties?: rv.data.Presentation.ITimeline): rv.data.Presentation.Timeline;

                /**
                 * Encodes the specified Timeline message. Does not implicitly {@link rv.data.Presentation.Timeline.verify|verify} messages.
                 * @param message Timeline message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.ITimeline, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Timeline message, length delimited. Does not implicitly {@link rv.data.Presentation.Timeline.verify|verify} messages.
                 * @param message Timeline message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.ITimeline, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Timeline message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Timeline
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.Timeline;

                /**
                 * Decodes a Timeline message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Timeline
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.Timeline;

                /**
                 * Verifies a Timeline message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Timeline message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Timeline
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.Timeline;

                /**
                 * Creates a plain object from a Timeline message. Also converts values to other types if specified.
                 * @param message Timeline
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.Timeline, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Timeline to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Timeline
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Timeline {

                /** Properties of a Cue. */
                interface ICue {

                    /** Cue triggerTime */
                    triggerTime?: (number|null);

                    /** Cue name */
                    name?: (string|null);

                    /** Cue cueId */
                    cueId?: (rv.data.IUUID|null);

                    /** Cue action */
                    action?: (rv.data.IAction|null);
                }

                /** Represents a Cue. */
                class Cue implements ICue {

                    /**
                     * Constructs a new Cue.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Presentation.Timeline.ICue);

                    /** Cue triggerTime. */
                    public triggerTime: number;

                    /** Cue name. */
                    public name: string;

                    /** Cue cueId. */
                    public cueId?: (rv.data.IUUID|null);

                    /** Cue action. */
                    public action?: (rv.data.IAction|null);

                    /** Cue triggerInfo. */
                    public triggerInfo?: ("cueId"|"action");

                    /**
                     * Creates a new Cue instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Cue instance
                     */
                    public static create(properties?: rv.data.Presentation.Timeline.ICue): rv.data.Presentation.Timeline.Cue;

                    /**
                     * Encodes the specified Cue message. Does not implicitly {@link rv.data.Presentation.Timeline.Cue.verify|verify} messages.
                     * @param message Cue message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Presentation.Timeline.ICue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Cue message, length delimited. Does not implicitly {@link rv.data.Presentation.Timeline.Cue.verify|verify} messages.
                     * @param message Cue message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Presentation.Timeline.ICue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Cue message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Cue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.Timeline.Cue;

                    /**
                     * Decodes a Cue message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Cue
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.Timeline.Cue;

                    /**
                     * Verifies a Cue message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Cue message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Cue
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Presentation.Timeline.Cue;

                    /**
                     * Creates a plain object from a Cue message. Also converts values to other types if specified.
                     * @param message Cue
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Presentation.Timeline.Cue, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Cue to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Cue
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** Properties of an Arrangement. */
            interface IArrangement {

                /** Arrangement uuid */
                uuid?: (rv.data.IUUID|null);

                /** Arrangement name */
                name?: (string|null);

                /** Arrangement groupIdentifiers */
                groupIdentifiers?: (rv.data.IUUID[]|null);
            }

            /** Represents an Arrangement. */
            class Arrangement implements IArrangement {

                /**
                 * Constructs a new Arrangement.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.IArrangement);

                /** Arrangement uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Arrangement name. */
                public name: string;

                /** Arrangement groupIdentifiers. */
                public groupIdentifiers: rv.data.IUUID[];

                /**
                 * Creates a new Arrangement instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Arrangement instance
                 */
                public static create(properties?: rv.data.Presentation.IArrangement): rv.data.Presentation.Arrangement;

                /**
                 * Encodes the specified Arrangement message. Does not implicitly {@link rv.data.Presentation.Arrangement.verify|verify} messages.
                 * @param message Arrangement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.IArrangement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Arrangement message, length delimited. Does not implicitly {@link rv.data.Presentation.Arrangement.verify|verify} messages.
                 * @param message Arrangement message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.IArrangement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Arrangement message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Arrangement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.Arrangement;

                /**
                 * Decodes an Arrangement message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Arrangement
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.Arrangement;

                /**
                 * Verifies an Arrangement message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Arrangement message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Arrangement
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.Arrangement;

                /**
                 * Creates a plain object from an Arrangement message. Also converts values to other types if specified.
                 * @param message Arrangement
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.Arrangement, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Arrangement to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Arrangement
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a CueGroup. */
            interface ICueGroup {

                /** CueGroup group */
                group?: (rv.data.IGroup|null);

                /** CueGroup cueIdentifiers */
                cueIdentifiers?: (rv.data.IUUID[]|null);
            }

            /** Represents a CueGroup. */
            class CueGroup implements ICueGroup {

                /**
                 * Constructs a new CueGroup.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.ICueGroup);

                /** CueGroup group. */
                public group?: (rv.data.IGroup|null);

                /** CueGroup cueIdentifiers. */
                public cueIdentifiers: rv.data.IUUID[];

                /**
                 * Creates a new CueGroup instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CueGroup instance
                 */
                public static create(properties?: rv.data.Presentation.ICueGroup): rv.data.Presentation.CueGroup;

                /**
                 * Encodes the specified CueGroup message. Does not implicitly {@link rv.data.Presentation.CueGroup.verify|verify} messages.
                 * @param message CueGroup message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.ICueGroup, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CueGroup message, length delimited. Does not implicitly {@link rv.data.Presentation.CueGroup.verify|verify} messages.
                 * @param message CueGroup message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.ICueGroup, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CueGroup message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CueGroup
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.CueGroup;

                /**
                 * Decodes a CueGroup message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CueGroup
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.CueGroup;

                /**
                 * Verifies a CueGroup message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CueGroup message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CueGroup
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.CueGroup;

                /**
                 * Creates a plain object from a CueGroup message. Also converts values to other types if specified.
                 * @param message CueGroup
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.CueGroup, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CueGroup to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for CueGroup
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a MultiTracksLicensing. */
            interface IMultiTracksLicensing {

                /** MultiTracksLicensing songIdentifier */
                songIdentifier?: (number|Long|null);

                /** MultiTracksLicensing customerIdentifier */
                customerIdentifier?: (string|null);

                /** MultiTracksLicensing expirationDate */
                expirationDate?: (rv.data.ITimestamp|null);

                /** MultiTracksLicensing licenseExpiration */
                licenseExpiration?: (rv.data.ITimestamp|null);

                /** MultiTracksLicensing subscription */
                subscription?: (rv.data.Presentation.MultiTracksLicensing.Subscription|null);
            }

            /** Represents a MultiTracksLicensing. */
            class MultiTracksLicensing implements IMultiTracksLicensing {

                /**
                 * Constructs a new MultiTracksLicensing.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.IMultiTracksLicensing);

                /** MultiTracksLicensing songIdentifier. */
                public songIdentifier: (number|Long);

                /** MultiTracksLicensing customerIdentifier. */
                public customerIdentifier: string;

                /** MultiTracksLicensing expirationDate. */
                public expirationDate?: (rv.data.ITimestamp|null);

                /** MultiTracksLicensing licenseExpiration. */
                public licenseExpiration?: (rv.data.ITimestamp|null);

                /** MultiTracksLicensing subscription. */
                public subscription: rv.data.Presentation.MultiTracksLicensing.Subscription;

                /**
                 * Creates a new MultiTracksLicensing instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MultiTracksLicensing instance
                 */
                public static create(properties?: rv.data.Presentation.IMultiTracksLicensing): rv.data.Presentation.MultiTracksLicensing;

                /**
                 * Encodes the specified MultiTracksLicensing message. Does not implicitly {@link rv.data.Presentation.MultiTracksLicensing.verify|verify} messages.
                 * @param message MultiTracksLicensing message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.IMultiTracksLicensing, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MultiTracksLicensing message, length delimited. Does not implicitly {@link rv.data.Presentation.MultiTracksLicensing.verify|verify} messages.
                 * @param message MultiTracksLicensing message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.IMultiTracksLicensing, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MultiTracksLicensing message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MultiTracksLicensing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.MultiTracksLicensing;

                /**
                 * Decodes a MultiTracksLicensing message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MultiTracksLicensing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.MultiTracksLicensing;

                /**
                 * Verifies a MultiTracksLicensing message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MultiTracksLicensing message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MultiTracksLicensing
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.MultiTracksLicensing;

                /**
                 * Creates a plain object from a MultiTracksLicensing message. Also converts values to other types if specified.
                 * @param message MultiTracksLicensing
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.MultiTracksLicensing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MultiTracksLicensing to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MultiTracksLicensing
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace MultiTracksLicensing {

                /** Subscription enum. */
                enum Subscription {
                    SUBSCRIPTION_CHART_PRO = 0,
                    SUBSCRIPTION_SLIDE_PRO = 1
                }
            }

            /** Properties of a Music. */
            interface IMusic {

                /** Music originalMusicKey */
                originalMusicKey?: (string|null);

                /** Music userMusicKey */
                userMusicKey?: (string|null);

                /** Music original */
                original?: (rv.data.IMusicKeyScale|null);

                /** Music user */
                user?: (rv.data.IMusicKeyScale|null);
            }

            /** Represents a Music. */
            class Music implements IMusic {

                /**
                 * Constructs a new Music.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Presentation.IMusic);

                /** Music originalMusicKey. */
                public originalMusicKey: string;

                /** Music userMusicKey. */
                public userMusicKey: string;

                /** Music original. */
                public original?: (rv.data.IMusicKeyScale|null);

                /** Music user. */
                public user?: (rv.data.IMusicKeyScale|null);

                /**
                 * Creates a new Music instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Music instance
                 */
                public static create(properties?: rv.data.Presentation.IMusic): rv.data.Presentation.Music;

                /**
                 * Encodes the specified Music message. Does not implicitly {@link rv.data.Presentation.Music.verify|verify} messages.
                 * @param message Music message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Presentation.IMusic, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Music message, length delimited. Does not implicitly {@link rv.data.Presentation.Music.verify|verify} messages.
                 * @param message Music message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Presentation.IMusic, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Music message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Music
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Presentation.Music;

                /**
                 * Decodes a Music message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Music
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Presentation.Music;

                /**
                 * Verifies a Music message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Music message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Music
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Presentation.Music;

                /**
                 * Creates a plain object from a Music message. Also converts values to other types if specified.
                 * @param message Music
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Presentation.Music, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Music to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Music
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }
        }

        /** Properties of an Action. */
        interface IAction {

            /** Action uuid */
            uuid?: (rv.data.IUUID|null);

            /** Action name */
            name?: (string|null);

            /** Action label */
            label?: (rv.data.Action.ILabel|null);

            /** Action delayTime */
            delayTime?: (number|null);

            /** Action oldType */
            oldType?: (rv.data.Action.IOldType|null);

            /** Action isEnabled */
            isEnabled?: (boolean|null);

            /** Action layerIdentification */
            layerIdentification?: (rv.data.Action.ILayerIdentification|null);

            /** Action duration */
            duration?: (number|null);

            /** Action type */
            type?: (rv.data.Action.ActionType|null);

            /** Action collectionElement */
            collectionElement?: (rv.data.ICollectionElementType|null);

            /** Action playlistItem */
            playlistItem?: (rv.data.Action.IPlaylistItemType|null);

            /** Action blendMode */
            blendMode?: (rv.data.Action.IBlendModeType|null);

            /** Action transition */
            transition?: (rv.data.Action.ITransitionType|null);

            /** Action media */
            media?: (rv.data.Action.IMediaType|null);

            /** Action doubleItem */
            doubleItem?: (rv.data.Action.IDoubleType|null);

            /** Action effects */
            effects?: (rv.data.Action.IEffectsType|null);

            /** Action slide */
            slide?: (rv.data.Action.ISlideType|null);

            /** Action background */
            background?: (rv.data.Action.IBackgroundType|null);

            /** Action timer */
            timer?: (rv.data.Action.ITimerType|null);

            /** Action clear */
            clear?: (rv.data.Action.IClearType|null);

            /** Action stage */
            stage?: (rv.data.Action.IStageLayoutType|null);

            /** Action prop */
            prop?: (rv.data.Action.IPropType|null);

            /** Action mask */
            mask?: (rv.data.Action.IMaskType|null);

            /** Action message */
            message?: (rv.data.Action.IMessageType|null);

            /** Action communication */
            communication?: (rv.data.Action.ICommunicationType|null);

            /** Action multiScreen */
            multiScreen?: (rv.data.Action.IMultiScreenType|null);

            /** Action presentationDocument */
            presentationDocument?: (rv.data.Action.IDocumentType|null);

            /** Action externalPresentation */
            externalPresentation?: (rv.data.Action.IExternalPresentationType|null);

            /** Action audienceLook */
            audienceLook?: (rv.data.Action.IAudienceLookType|null);

            /** Action audioInput */
            audioInput?: (rv.data.Action.IAudioInputType|null);

            /** Action slideDestination */
            slideDestination?: (rv.data.Action.ISlideDestinationType|null);

            /** Action macro */
            macro?: (rv.data.Action.IMacroType|null);

            /** Action clearGroup */
            clearGroup?: (rv.data.Action.IClearGroupType|null);

            /** Action transportControl */
            transportControl?: (rv.data.Action.ITransportControlType|null);

            /** Action capture */
            capture?: (rv.data.Action.ICaptureType|null);
        }

        /** Represents an Action. */
        class Action implements IAction {

            /**
             * Constructs a new Action.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IAction);

            /** Action uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Action name. */
            public name: string;

            /** Action label. */
            public label?: (rv.data.Action.ILabel|null);

            /** Action delayTime. */
            public delayTime: number;

            /** Action oldType. */
            public oldType?: (rv.data.Action.IOldType|null);

            /** Action isEnabled. */
            public isEnabled: boolean;

            /** Action layerIdentification. */
            public layerIdentification?: (rv.data.Action.ILayerIdentification|null);

            /** Action duration. */
            public duration: number;

            /** Action type. */
            public type: rv.data.Action.ActionType;

            /** Action collectionElement. */
            public collectionElement?: (rv.data.ICollectionElementType|null);

            /** Action playlistItem. */
            public playlistItem?: (rv.data.Action.IPlaylistItemType|null);

            /** Action blendMode. */
            public blendMode?: (rv.data.Action.IBlendModeType|null);

            /** Action transition. */
            public transition?: (rv.data.Action.ITransitionType|null);

            /** Action media. */
            public media?: (rv.data.Action.IMediaType|null);

            /** Action doubleItem. */
            public doubleItem?: (rv.data.Action.IDoubleType|null);

            /** Action effects. */
            public effects?: (rv.data.Action.IEffectsType|null);

            /** Action slide. */
            public slide?: (rv.data.Action.ISlideType|null);

            /** Action background. */
            public background?: (rv.data.Action.IBackgroundType|null);

            /** Action timer. */
            public timer?: (rv.data.Action.ITimerType|null);

            /** Action clear. */
            public clear?: (rv.data.Action.IClearType|null);

            /** Action stage. */
            public stage?: (rv.data.Action.IStageLayoutType|null);

            /** Action prop. */
            public prop?: (rv.data.Action.IPropType|null);

            /** Action mask. */
            public mask?: (rv.data.Action.IMaskType|null);

            /** Action message. */
            public message?: (rv.data.Action.IMessageType|null);

            /** Action communication. */
            public communication?: (rv.data.Action.ICommunicationType|null);

            /** Action multiScreen. */
            public multiScreen?: (rv.data.Action.IMultiScreenType|null);

            /** Action presentationDocument. */
            public presentationDocument?: (rv.data.Action.IDocumentType|null);

            /** Action externalPresentation. */
            public externalPresentation?: (rv.data.Action.IExternalPresentationType|null);

            /** Action audienceLook. */
            public audienceLook?: (rv.data.Action.IAudienceLookType|null);

            /** Action audioInput. */
            public audioInput?: (rv.data.Action.IAudioInputType|null);

            /** Action slideDestination. */
            public slideDestination?: (rv.data.Action.ISlideDestinationType|null);

            /** Action macro. */
            public macro?: (rv.data.Action.IMacroType|null);

            /** Action clearGroup. */
            public clearGroup?: (rv.data.Action.IClearGroupType|null);

            /** Action transportControl. */
            public transportControl?: (rv.data.Action.ITransportControlType|null);

            /** Action capture. */
            public capture?: (rv.data.Action.ICaptureType|null);

            /** Action ActionTypeData. */
            public ActionTypeData?: ("collectionElement"|"playlistItem"|"blendMode"|"transition"|"media"|"doubleItem"|"effects"|"slide"|"background"|"timer"|"clear"|"stage"|"prop"|"mask"|"message"|"communication"|"multiScreen"|"presentationDocument"|"externalPresentation"|"audienceLook"|"audioInput"|"slideDestination"|"macro"|"clearGroup"|"transportControl"|"capture");

            /**
             * Creates a new Action instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Action instance
             */
            public static create(properties?: rv.data.IAction): rv.data.Action;

            /**
             * Encodes the specified Action message. Does not implicitly {@link rv.data.Action.verify|verify} messages.
             * @param message Action message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IAction, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Action message, length delimited. Does not implicitly {@link rv.data.Action.verify|verify} messages.
             * @param message Action message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IAction, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Action message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Action
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action;

            /**
             * Decodes an Action message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Action
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action;

            /**
             * Verifies an Action message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Action message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Action
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Action;

            /**
             * Creates a plain object from an Action message. Also converts values to other types if specified.
             * @param message Action
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Action, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Action to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Action
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Action {

            /** Properties of an OldType. */
            interface IOldType {

                /** OldType category */
                category?: (rv.data.Action.OldType.Category|null);

                /** OldType applicationType */
                applicationType?: (number|null);
            }

            /** Represents an OldType. */
            class OldType implements IOldType {

                /**
                 * Constructs a new OldType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IOldType);

                /** OldType category. */
                public category: rv.data.Action.OldType.Category;

                /** OldType applicationType. */
                public applicationType: number;

                /**
                 * Creates a new OldType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OldType instance
                 */
                public static create(properties?: rv.data.Action.IOldType): rv.data.Action.OldType;

                /**
                 * Encodes the specified OldType message. Does not implicitly {@link rv.data.Action.OldType.verify|verify} messages.
                 * @param message OldType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IOldType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OldType message, length delimited. Does not implicitly {@link rv.data.Action.OldType.verify|verify} messages.
                 * @param message OldType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IOldType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an OldType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OldType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.OldType;

                /**
                 * Decodes an OldType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OldType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.OldType;

                /**
                 * Verifies an OldType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an OldType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OldType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.OldType;

                /**
                 * Creates a plain object from an OldType message. Also converts values to other types if specified.
                 * @param message OldType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.OldType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OldType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for OldType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace OldType {

                /** Category enum. */
                enum Category {
                    CATEGORY_UNKNOWN = 0,
                    CATEGORY_MEDIA = 1,
                    CATEGORY_APPLICATION = 2
                }
            }

            /** Properties of a Label. */
            interface ILabel {

                /** Label text */
                text?: (string|null);

                /** Label color */
                color?: (rv.data.IColor|null);
            }

            /** Represents a Label. */
            class Label implements ILabel {

                /**
                 * Constructs a new Label.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ILabel);

                /** Label text. */
                public text: string;

                /** Label color. */
                public color?: (rv.data.IColor|null);

                /**
                 * Creates a new Label instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Label instance
                 */
                public static create(properties?: rv.data.Action.ILabel): rv.data.Action.Label;

                /**
                 * Encodes the specified Label message. Does not implicitly {@link rv.data.Action.Label.verify|verify} messages.
                 * @param message Label message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ILabel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Label message, length delimited. Does not implicitly {@link rv.data.Action.Label.verify|verify} messages.
                 * @param message Label message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ILabel, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Label message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Label
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.Label;

                /**
                 * Decodes a Label message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Label
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.Label;

                /**
                 * Verifies a Label message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Label message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Label
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.Label;

                /**
                 * Creates a plain object from a Label message. Also converts values to other types if specified.
                 * @param message Label
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.Label, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Label to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Label
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a LayerIdentification. */
            interface ILayerIdentification {

                /** LayerIdentification uuid */
                uuid?: (rv.data.IUUID|null);

                /** LayerIdentification name */
                name?: (string|null);
            }

            /** Represents a LayerIdentification. */
            class LayerIdentification implements ILayerIdentification {

                /**
                 * Constructs a new LayerIdentification.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ILayerIdentification);

                /** LayerIdentification uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** LayerIdentification name. */
                public name: string;

                /**
                 * Creates a new LayerIdentification instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LayerIdentification instance
                 */
                public static create(properties?: rv.data.Action.ILayerIdentification): rv.data.Action.LayerIdentification;

                /**
                 * Encodes the specified LayerIdentification message. Does not implicitly {@link rv.data.Action.LayerIdentification.verify|verify} messages.
                 * @param message LayerIdentification message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ILayerIdentification, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LayerIdentification message, length delimited. Does not implicitly {@link rv.data.Action.LayerIdentification.verify|verify} messages.
                 * @param message LayerIdentification message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ILayerIdentification, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LayerIdentification message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LayerIdentification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.LayerIdentification;

                /**
                 * Decodes a LayerIdentification message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LayerIdentification
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.LayerIdentification;

                /**
                 * Verifies a LayerIdentification message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LayerIdentification message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LayerIdentification
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.LayerIdentification;

                /**
                 * Creates a plain object from a LayerIdentification message. Also converts values to other types if specified.
                 * @param message LayerIdentification
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.LayerIdentification, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LayerIdentification to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for LayerIdentification
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a PlaylistItemType. */
            interface IPlaylistItemType {

                /** PlaylistItemType playlistUuid */
                playlistUuid?: (rv.data.IUUID|null);

                /** PlaylistItemType playlistName */
                playlistName?: (string|null);

                /** PlaylistItemType itemUuid */
                itemUuid?: (rv.data.IUUID|null);

                /** PlaylistItemType itemName */
                itemName?: (string|null);

                /** PlaylistItemType selectPlaylist */
                selectPlaylist?: (boolean|null);

                /** PlaylistItemType alwaysRetrigger */
                alwaysRetrigger?: (boolean|null);
            }

            /** Represents a PlaylistItemType. */
            class PlaylistItemType implements IPlaylistItemType {

                /**
                 * Constructs a new PlaylistItemType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IPlaylistItemType);

                /** PlaylistItemType playlistUuid. */
                public playlistUuid?: (rv.data.IUUID|null);

                /** PlaylistItemType playlistName. */
                public playlistName: string;

                /** PlaylistItemType itemUuid. */
                public itemUuid?: (rv.data.IUUID|null);

                /** PlaylistItemType itemName. */
                public itemName: string;

                /** PlaylistItemType selectPlaylist. */
                public selectPlaylist: boolean;

                /** PlaylistItemType alwaysRetrigger. */
                public alwaysRetrigger: boolean;

                /**
                 * Creates a new PlaylistItemType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PlaylistItemType instance
                 */
                public static create(properties?: rv.data.Action.IPlaylistItemType): rv.data.Action.PlaylistItemType;

                /**
                 * Encodes the specified PlaylistItemType message. Does not implicitly {@link rv.data.Action.PlaylistItemType.verify|verify} messages.
                 * @param message PlaylistItemType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IPlaylistItemType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PlaylistItemType message, length delimited. Does not implicitly {@link rv.data.Action.PlaylistItemType.verify|verify} messages.
                 * @param message PlaylistItemType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IPlaylistItemType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PlaylistItemType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PlaylistItemType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.PlaylistItemType;

                /**
                 * Decodes a PlaylistItemType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PlaylistItemType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.PlaylistItemType;

                /**
                 * Verifies a PlaylistItemType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PlaylistItemType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PlaylistItemType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.PlaylistItemType;

                /**
                 * Creates a plain object from a PlaylistItemType message. Also converts values to other types if specified.
                 * @param message PlaylistItemType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.PlaylistItemType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PlaylistItemType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for PlaylistItemType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a BlendModeType. */
            interface IBlendModeType {

                /** BlendModeType blendMode */
                blendMode?: (rv.data.Layer.BlendMode|null);

                /** BlendModeType blend */
                blend?: (rv.data.Layer.IBlending|null);
            }

            /** Represents a BlendModeType. */
            class BlendModeType implements IBlendModeType {

                /**
                 * Constructs a new BlendModeType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IBlendModeType);

                /** BlendModeType blendMode. */
                public blendMode: rv.data.Layer.BlendMode;

                /** BlendModeType blend. */
                public blend?: (rv.data.Layer.IBlending|null);

                /**
                 * Creates a new BlendModeType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BlendModeType instance
                 */
                public static create(properties?: rv.data.Action.IBlendModeType): rv.data.Action.BlendModeType;

                /**
                 * Encodes the specified BlendModeType message. Does not implicitly {@link rv.data.Action.BlendModeType.verify|verify} messages.
                 * @param message BlendModeType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IBlendModeType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BlendModeType message, length delimited. Does not implicitly {@link rv.data.Action.BlendModeType.verify|verify} messages.
                 * @param message BlendModeType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IBlendModeType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BlendModeType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BlendModeType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.BlendModeType;

                /**
                 * Decodes a BlendModeType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BlendModeType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.BlendModeType;

                /**
                 * Verifies a BlendModeType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BlendModeType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BlendModeType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.BlendModeType;

                /**
                 * Creates a plain object from a BlendModeType message. Also converts values to other types if specified.
                 * @param message BlendModeType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.BlendModeType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BlendModeType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for BlendModeType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a TransitionType. */
            interface ITransitionType {

                /** TransitionType transitionName */
                transitionName?: (string|null);

                /** TransitionType transition */
                transition?: (rv.data.ITransition|null);
            }

            /** Represents a TransitionType. */
            class TransitionType implements ITransitionType {

                /**
                 * Constructs a new TransitionType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ITransitionType);

                /** TransitionType transitionName. */
                public transitionName: string;

                /** TransitionType transition. */
                public transition?: (rv.data.ITransition|null);

                /**
                 * Creates a new TransitionType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TransitionType instance
                 */
                public static create(properties?: rv.data.Action.ITransitionType): rv.data.Action.TransitionType;

                /**
                 * Encodes the specified TransitionType message. Does not implicitly {@link rv.data.Action.TransitionType.verify|verify} messages.
                 * @param message TransitionType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ITransitionType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TransitionType message, length delimited. Does not implicitly {@link rv.data.Action.TransitionType.verify|verify} messages.
                 * @param message TransitionType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ITransitionType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TransitionType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TransitionType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TransitionType;

                /**
                 * Decodes a TransitionType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TransitionType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TransitionType;

                /**
                 * Verifies a TransitionType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TransitionType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TransitionType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.TransitionType;

                /**
                 * Creates a plain object from a TransitionType message. Also converts values to other types if specified.
                 * @param message TransitionType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.TransitionType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TransitionType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TransitionType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a DoubleType. */
            interface IDoubleType {

                /** DoubleType value */
                value?: (number|null);
            }

            /** Represents a DoubleType. */
            class DoubleType implements IDoubleType {

                /**
                 * Constructs a new DoubleType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IDoubleType);

                /** DoubleType value. */
                public value: number;

                /**
                 * Creates a new DoubleType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DoubleType instance
                 */
                public static create(properties?: rv.data.Action.IDoubleType): rv.data.Action.DoubleType;

                /**
                 * Encodes the specified DoubleType message. Does not implicitly {@link rv.data.Action.DoubleType.verify|verify} messages.
                 * @param message DoubleType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IDoubleType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DoubleType message, length delimited. Does not implicitly {@link rv.data.Action.DoubleType.verify|verify} messages.
                 * @param message DoubleType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IDoubleType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DoubleType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DoubleType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.DoubleType;

                /**
                 * Decodes a DoubleType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DoubleType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.DoubleType;

                /**
                 * Verifies a DoubleType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DoubleType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DoubleType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.DoubleType;

                /**
                 * Creates a plain object from a DoubleType message. Also converts values to other types if specified.
                 * @param message DoubleType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.DoubleType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DoubleType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for DoubleType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an EffectsType. */
            interface IEffectsType {

                /** EffectsType effects */
                effects?: (rv.data.IEffect[]|null);
            }

            /** Represents an EffectsType. */
            class EffectsType implements IEffectsType {

                /**
                 * Constructs a new EffectsType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IEffectsType);

                /** EffectsType effects. */
                public effects: rv.data.IEffect[];

                /**
                 * Creates a new EffectsType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EffectsType instance
                 */
                public static create(properties?: rv.data.Action.IEffectsType): rv.data.Action.EffectsType;

                /**
                 * Encodes the specified EffectsType message. Does not implicitly {@link rv.data.Action.EffectsType.verify|verify} messages.
                 * @param message EffectsType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IEffectsType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EffectsType message, length delimited. Does not implicitly {@link rv.data.Action.EffectsType.verify|verify} messages.
                 * @param message EffectsType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IEffectsType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EffectsType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EffectsType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.EffectsType;

                /**
                 * Decodes an EffectsType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EffectsType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.EffectsType;

                /**
                 * Verifies an EffectsType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EffectsType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EffectsType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.EffectsType;

                /**
                 * Creates a plain object from an EffectsType message. Also converts values to other types if specified.
                 * @param message EffectsType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.EffectsType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EffectsType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for EffectsType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a MediaType. */
            interface IMediaType {

                /** MediaType transitionDuration */
                transitionDuration?: (number|null);

                /** MediaType selectedEffectPresetUuid */
                selectedEffectPresetUuid?: (rv.data.IUUID|null);

                /** MediaType transition */
                transition?: (rv.data.ITransition|null);

                /** MediaType effects */
                effects?: (rv.data.IEffect[]|null);

                /** MediaType element */
                element?: (rv.data.IMedia|null);

                /** MediaType layerType */
                layerType?: (rv.data.Action.LayerType|null);

                /** MediaType alwaysRetrigger */
                alwaysRetrigger?: (boolean|null);

                /** MediaType markers */
                markers?: (rv.data.Action.MediaType.IPlaybackMarker[]|null);

                /** MediaType image */
                image?: (rv.data.Action.MediaType.IImage|null);

                /** MediaType video */
                video?: (rv.data.Action.MediaType.IVideo|null);

                /** MediaType audio */
                audio?: (rv.data.Action.MediaType.IAudio|null);

                /** MediaType liveVideo */
                liveVideo?: (rv.data.Action.MediaType.ILiveVideo|null);
            }

            /** Represents a MediaType. */
            class MediaType implements IMediaType {

                /**
                 * Constructs a new MediaType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IMediaType);

                /** MediaType transitionDuration. */
                public transitionDuration: number;

                /** MediaType selectedEffectPresetUuid. */
                public selectedEffectPresetUuid?: (rv.data.IUUID|null);

                /** MediaType transition. */
                public transition?: (rv.data.ITransition|null);

                /** MediaType effects. */
                public effects: rv.data.IEffect[];

                /** MediaType element. */
                public element?: (rv.data.IMedia|null);

                /** MediaType layerType. */
                public layerType: rv.data.Action.LayerType;

                /** MediaType alwaysRetrigger. */
                public alwaysRetrigger: boolean;

                /** MediaType markers. */
                public markers: rv.data.Action.MediaType.IPlaybackMarker[];

                /** MediaType image. */
                public image?: (rv.data.Action.MediaType.IImage|null);

                /** MediaType video. */
                public video?: (rv.data.Action.MediaType.IVideo|null);

                /** MediaType audio. */
                public audio?: (rv.data.Action.MediaType.IAudio|null);

                /** MediaType liveVideo. */
                public liveVideo?: (rv.data.Action.MediaType.ILiveVideo|null);

                /** MediaType MediaType. */
                public MediaType?: ("image"|"video"|"audio"|"liveVideo");

                /**
                 * Creates a new MediaType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MediaType instance
                 */
                public static create(properties?: rv.data.Action.IMediaType): rv.data.Action.MediaType;

                /**
                 * Encodes the specified MediaType message. Does not implicitly {@link rv.data.Action.MediaType.verify|verify} messages.
                 * @param message MediaType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IMediaType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MediaType message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.verify|verify} messages.
                 * @param message MediaType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IMediaType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MediaType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MediaType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType;

                /**
                 * Decodes a MediaType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MediaType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType;

                /**
                 * Verifies a MediaType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MediaType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MediaType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType;

                /**
                 * Creates a plain object from a MediaType message. Also converts values to other types if specified.
                 * @param message MediaType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.MediaType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MediaType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MediaType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace MediaType {

                /** Properties of an Image. */
                interface IImage {
                }

                /** Represents an Image. */
                class Image implements IImage {

                    /**
                     * Constructs a new Image.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.MediaType.IImage);

                    /**
                     * Creates a new Image instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Image instance
                     */
                    public static create(properties?: rv.data.Action.MediaType.IImage): rv.data.Action.MediaType.Image;

                    /**
                     * Encodes the specified Image message. Does not implicitly {@link rv.data.Action.MediaType.Image.verify|verify} messages.
                     * @param message Image message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.MediaType.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Image message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.Image.verify|verify} messages.
                     * @param message Image message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.MediaType.IImage, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Image message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Image
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType.Image;

                    /**
                     * Decodes an Image message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Image
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType.Image;

                    /**
                     * Verifies an Image message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Image message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Image
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType.Image;

                    /**
                     * Creates a plain object from an Image message. Also converts values to other types if specified.
                     * @param message Image
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.MediaType.Image, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Image to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Image
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Video. */
                interface IVideo {

                    /** Video playbackBehavior */
                    playbackBehavior?: (rv.data.Action.MediaType.PlaybackBehavior|null);

                    /** Video endBehavior */
                    endBehavior?: (rv.data.Action.MediaType.EndBehavior|null);

                    /** Video loopTime */
                    loopTime?: (number|null);

                    /** Video timesToLoop */
                    timesToLoop?: (number|null);

                    /** Video softLoop */
                    softLoop?: (boolean|null);

                    /** Video softLoopDuration */
                    softLoopDuration?: (number|null);
                }

                /** Represents a Video. */
                class Video implements IVideo {

                    /**
                     * Constructs a new Video.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.MediaType.IVideo);

                    /** Video playbackBehavior. */
                    public playbackBehavior: rv.data.Action.MediaType.PlaybackBehavior;

                    /** Video endBehavior. */
                    public endBehavior: rv.data.Action.MediaType.EndBehavior;

                    /** Video loopTime. */
                    public loopTime: number;

                    /** Video timesToLoop. */
                    public timesToLoop: number;

                    /** Video softLoop. */
                    public softLoop: boolean;

                    /** Video softLoopDuration. */
                    public softLoopDuration: number;

                    /**
                     * Creates a new Video instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Video instance
                     */
                    public static create(properties?: rv.data.Action.MediaType.IVideo): rv.data.Action.MediaType.Video;

                    /**
                     * Encodes the specified Video message. Does not implicitly {@link rv.data.Action.MediaType.Video.verify|verify} messages.
                     * @param message Video message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.MediaType.IVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Video message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.Video.verify|verify} messages.
                     * @param message Video message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.MediaType.IVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Video message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Video
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType.Video;

                    /**
                     * Decodes a Video message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Video
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType.Video;

                    /**
                     * Verifies a Video message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Video message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Video
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType.Video;

                    /**
                     * Creates a plain object from a Video message. Also converts values to other types if specified.
                     * @param message Video
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.MediaType.Video, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Video to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Video
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an Audio. */
                interface IAudio {

                    /** Audio playbackBehavior */
                    playbackBehavior?: (rv.data.Action.MediaType.PlaybackBehavior|null);

                    /** Audio loopTime */
                    loopTime?: (number|null);

                    /** Audio timesToLoop */
                    timesToLoop?: (number|null);

                    /** Audio audioType */
                    audioType?: (rv.data.Action.MediaType.Audio.MediaActionAudioType|null);
                }

                /** Represents an Audio. */
                class Audio implements IAudio {

                    /**
                     * Constructs a new Audio.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.MediaType.IAudio);

                    /** Audio playbackBehavior. */
                    public playbackBehavior: rv.data.Action.MediaType.PlaybackBehavior;

                    /** Audio loopTime. */
                    public loopTime: number;

                    /** Audio timesToLoop. */
                    public timesToLoop: number;

                    /** Audio audioType. */
                    public audioType: rv.data.Action.MediaType.Audio.MediaActionAudioType;

                    /**
                     * Creates a new Audio instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Audio instance
                     */
                    public static create(properties?: rv.data.Action.MediaType.IAudio): rv.data.Action.MediaType.Audio;

                    /**
                     * Encodes the specified Audio message. Does not implicitly {@link rv.data.Action.MediaType.Audio.verify|verify} messages.
                     * @param message Audio message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.MediaType.IAudio, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Audio message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.Audio.verify|verify} messages.
                     * @param message Audio message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.MediaType.IAudio, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Audio message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Audio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType.Audio;

                    /**
                     * Decodes an Audio message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Audio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType.Audio;

                    /**
                     * Verifies an Audio message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Audio message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Audio
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType.Audio;

                    /**
                     * Creates a plain object from an Audio message. Also converts values to other types if specified.
                     * @param message Audio
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.MediaType.Audio, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Audio to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Audio
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Audio {

                    /** MediaActionAudioType enum. */
                    enum MediaActionAudioType {
                        MEDIA_ACTION_AUDIO_TYPE_TUNE = 0,
                        MEDIA_ACTION_AUDIO_TYPE_SOUND = 1
                    }
                }

                /** Properties of a LiveVideo. */
                interface ILiveVideo {
                }

                /** Represents a LiveVideo. */
                class LiveVideo implements ILiveVideo {

                    /**
                     * Constructs a new LiveVideo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.MediaType.ILiveVideo);

                    /**
                     * Creates a new LiveVideo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns LiveVideo instance
                     */
                    public static create(properties?: rv.data.Action.MediaType.ILiveVideo): rv.data.Action.MediaType.LiveVideo;

                    /**
                     * Encodes the specified LiveVideo message. Does not implicitly {@link rv.data.Action.MediaType.LiveVideo.verify|verify} messages.
                     * @param message LiveVideo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.MediaType.ILiveVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified LiveVideo message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.LiveVideo.verify|verify} messages.
                     * @param message LiveVideo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.MediaType.ILiveVideo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a LiveVideo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns LiveVideo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType.LiveVideo;

                    /**
                     * Decodes a LiveVideo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns LiveVideo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType.LiveVideo;

                    /**
                     * Verifies a LiveVideo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a LiveVideo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns LiveVideo
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType.LiveVideo;

                    /**
                     * Creates a plain object from a LiveVideo message. Also converts values to other types if specified.
                     * @param message LiveVideo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.MediaType.LiveVideo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this LiveVideo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for LiveVideo
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a PlaybackMarker. */
                interface IPlaybackMarker {

                    /** PlaybackMarker uuid */
                    uuid?: (rv.data.IUUID|null);

                    /** PlaybackMarker time */
                    time?: (number|null);

                    /** PlaybackMarker color */
                    color?: (rv.data.IColor|null);

                    /** PlaybackMarker name */
                    name?: (string|null);

                    /** PlaybackMarker actions */
                    actions?: (rv.data.IAction[]|null);
                }

                /** Represents a PlaybackMarker. */
                class PlaybackMarker implements IPlaybackMarker {

                    /**
                     * Constructs a new PlaybackMarker.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.MediaType.IPlaybackMarker);

                    /** PlaybackMarker uuid. */
                    public uuid?: (rv.data.IUUID|null);

                    /** PlaybackMarker time. */
                    public time: number;

                    /** PlaybackMarker color. */
                    public color?: (rv.data.IColor|null);

                    /** PlaybackMarker name. */
                    public name: string;

                    /** PlaybackMarker actions. */
                    public actions: rv.data.IAction[];

                    /**
                     * Creates a new PlaybackMarker instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns PlaybackMarker instance
                     */
                    public static create(properties?: rv.data.Action.MediaType.IPlaybackMarker): rv.data.Action.MediaType.PlaybackMarker;

                    /**
                     * Encodes the specified PlaybackMarker message. Does not implicitly {@link rv.data.Action.MediaType.PlaybackMarker.verify|verify} messages.
                     * @param message PlaybackMarker message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.MediaType.IPlaybackMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified PlaybackMarker message, length delimited. Does not implicitly {@link rv.data.Action.MediaType.PlaybackMarker.verify|verify} messages.
                     * @param message PlaybackMarker message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.MediaType.IPlaybackMarker, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a PlaybackMarker message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns PlaybackMarker
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MediaType.PlaybackMarker;

                    /**
                     * Decodes a PlaybackMarker message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns PlaybackMarker
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MediaType.PlaybackMarker;

                    /**
                     * Verifies a PlaybackMarker message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PlaybackMarker message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PlaybackMarker
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.MediaType.PlaybackMarker;

                    /**
                     * Creates a plain object from a PlaybackMarker message. Also converts values to other types if specified.
                     * @param message PlaybackMarker
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.MediaType.PlaybackMarker, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PlaybackMarker to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for PlaybackMarker
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** PlaybackBehavior enum. */
                enum PlaybackBehavior {
                    PLAYBACK_BEHAVIOR_STOP = 0,
                    PLAYBACK_BEHAVIOR_LOOP = 1,
                    PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT = 2,
                    PLAYBACK_BEHAVIOR_LOOP_FOR_TIME = 3
                }

                /** EndBehavior enum. */
                enum EndBehavior {
                    END_BEHAVIOR_STOP = 0,
                    END_BEHAVIOR_STOP_ON_BLACK = 1,
                    END_BEHAVIOR_STOP_ON_CLEAR = 2,
                    END_BEHAVIOR_FADE_TO_BLACK = 3,
                    END_BEHAVIOR_FADE_TO_CLEAR = 4
                }
            }

            /** Properties of a SlideType. */
            interface ISlideType {

                /** SlideType presentation */
                presentation?: (rv.data.IPresentationSlide|null);

                /** SlideType prop */
                prop?: (rv.data.IPropSlide|null);
            }

            /** Represents a SlideType. */
            class SlideType implements ISlideType {

                /**
                 * Constructs a new SlideType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ISlideType);

                /** SlideType presentation. */
                public presentation?: (rv.data.IPresentationSlide|null);

                /** SlideType prop. */
                public prop?: (rv.data.IPropSlide|null);

                /** SlideType Slide. */
                public Slide?: ("presentation"|"prop");

                /**
                 * Creates a new SlideType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SlideType instance
                 */
                public static create(properties?: rv.data.Action.ISlideType): rv.data.Action.SlideType;

                /**
                 * Encodes the specified SlideType message. Does not implicitly {@link rv.data.Action.SlideType.verify|verify} messages.
                 * @param message SlideType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ISlideType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SlideType message, length delimited. Does not implicitly {@link rv.data.Action.SlideType.verify|verify} messages.
                 * @param message SlideType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ISlideType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SlideType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SlideType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.SlideType;

                /**
                 * Decodes a SlideType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SlideType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.SlideType;

                /**
                 * Verifies a SlideType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SlideType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SlideType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.SlideType;

                /**
                 * Creates a plain object from a SlideType message. Also converts values to other types if specified.
                 * @param message SlideType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.SlideType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SlideType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for SlideType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a BackgroundType. */
            interface IBackgroundType {

                /** BackgroundType element */
                element?: (rv.data.IBackground|null);
            }

            /** Represents a BackgroundType. */
            class BackgroundType implements IBackgroundType {

                /**
                 * Constructs a new BackgroundType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IBackgroundType);

                /** BackgroundType element. */
                public element?: (rv.data.IBackground|null);

                /**
                 * Creates a new BackgroundType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BackgroundType instance
                 */
                public static create(properties?: rv.data.Action.IBackgroundType): rv.data.Action.BackgroundType;

                /**
                 * Encodes the specified BackgroundType message. Does not implicitly {@link rv.data.Action.BackgroundType.verify|verify} messages.
                 * @param message BackgroundType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IBackgroundType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BackgroundType message, length delimited. Does not implicitly {@link rv.data.Action.BackgroundType.verify|verify} messages.
                 * @param message BackgroundType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IBackgroundType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BackgroundType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BackgroundType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.BackgroundType;

                /**
                 * Decodes a BackgroundType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BackgroundType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.BackgroundType;

                /**
                 * Verifies a BackgroundType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BackgroundType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BackgroundType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.BackgroundType;

                /**
                 * Creates a plain object from a BackgroundType message. Also converts values to other types if specified.
                 * @param message BackgroundType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.BackgroundType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BackgroundType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for BackgroundType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a TimerType. */
            interface ITimerType {

                /** TimerType actionType */
                actionType?: (rv.data.Action.TimerType.TimerAction|null);

                /** TimerType timerIdentification */
                timerIdentification?: (rv.data.ICollectionElementType|null);

                /** TimerType timerConfiguration */
                timerConfiguration?: (rv.data.Timer.IConfiguration|null);

                /** TimerType incrementAmount */
                incrementAmount?: (number|null);
            }

            /** Represents a TimerType. */
            class TimerType implements ITimerType {

                /**
                 * Constructs a new TimerType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ITimerType);

                /** TimerType actionType. */
                public actionType: rv.data.Action.TimerType.TimerAction;

                /** TimerType timerIdentification. */
                public timerIdentification?: (rv.data.ICollectionElementType|null);

                /** TimerType timerConfiguration. */
                public timerConfiguration?: (rv.data.Timer.IConfiguration|null);

                /** TimerType incrementAmount. */
                public incrementAmount: number;

                /**
                 * Creates a new TimerType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimerType instance
                 */
                public static create(properties?: rv.data.Action.ITimerType): rv.data.Action.TimerType;

                /**
                 * Encodes the specified TimerType message. Does not implicitly {@link rv.data.Action.TimerType.verify|verify} messages.
                 * @param message TimerType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ITimerType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimerType message, length delimited. Does not implicitly {@link rv.data.Action.TimerType.verify|verify} messages.
                 * @param message TimerType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ITimerType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimerType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimerType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TimerType;

                /**
                 * Decodes a TimerType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimerType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TimerType;

                /**
                 * Verifies a TimerType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimerType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimerType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.TimerType;

                /**
                 * Creates a plain object from a TimerType message. Also converts values to other types if specified.
                 * @param message TimerType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.TimerType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimerType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TimerType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace TimerType {

                /** TimerAction enum. */
                enum TimerAction {
                    ACTION_START = 0,
                    ACTION_STOP = 1,
                    ACTION_RESET = 2,
                    ACTION_RESET_AND_START = 3,
                    ACTION_STOP_AND_RESET = 4,
                    ACTION_INCREMENT = 5
                }
            }

            /** Properties of a ClearType. */
            interface IClearType {

                /** ClearType targetLayer */
                targetLayer?: (rv.data.Action.ClearType.ClearTargetLayer|null);

                /** ClearType contentDestination */
                contentDestination?: (rv.data.Action.ContentDestination|null);
            }

            /** Represents a ClearType. */
            class ClearType implements IClearType {

                /**
                 * Constructs a new ClearType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IClearType);

                /** ClearType targetLayer. */
                public targetLayer: rv.data.Action.ClearType.ClearTargetLayer;

                /** ClearType contentDestination. */
                public contentDestination: rv.data.Action.ContentDestination;

                /**
                 * Creates a new ClearType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ClearType instance
                 */
                public static create(properties?: rv.data.Action.IClearType): rv.data.Action.ClearType;

                /**
                 * Encodes the specified ClearType message. Does not implicitly {@link rv.data.Action.ClearType.verify|verify} messages.
                 * @param message ClearType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IClearType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClearType message, length delimited. Does not implicitly {@link rv.data.Action.ClearType.verify|verify} messages.
                 * @param message ClearType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IClearType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClearType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ClearType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.ClearType;

                /**
                 * Decodes a ClearType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ClearType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.ClearType;

                /**
                 * Verifies a ClearType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ClearType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ClearType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.ClearType;

                /**
                 * Creates a plain object from a ClearType message. Also converts values to other types if specified.
                 * @param message ClearType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.ClearType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClearType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ClearType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace ClearType {

                /** ClearTargetLayer enum. */
                enum ClearTargetLayer {
                    CLEAR_TARGET_LAYER_ALL = 0,
                    CLEAR_TARGET_LAYER_AUDIO = 1,
                    CLEAR_TARGET_LAYER_BACKGROUND = 2,
                    CLEAR_TARGET_LAYER_LIVE_VIDEO = 3,
                    CLEAR_TARGET_LAYER_PROP = 4,
                    CLEAR_TARGET_LAYER_SLIDE = 5,
                    CLEAR_TARGET_LAYER_LOGO = 6,
                    CLEAR_TARGET_LAYER_MESSAGES = 7,
                    CLEAR_TARGET_LAYER_AUDIO_EFFECTS = 8
                }
            }

            /** Properties of a ClearGroupType. */
            interface IClearGroupType {

                /** ClearGroupType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a ClearGroupType. */
            class ClearGroupType implements IClearGroupType {

                /**
                 * Constructs a new ClearGroupType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IClearGroupType);

                /** ClearGroupType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new ClearGroupType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ClearGroupType instance
                 */
                public static create(properties?: rv.data.Action.IClearGroupType): rv.data.Action.ClearGroupType;

                /**
                 * Encodes the specified ClearGroupType message. Does not implicitly {@link rv.data.Action.ClearGroupType.verify|verify} messages.
                 * @param message ClearGroupType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IClearGroupType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClearGroupType message, length delimited. Does not implicitly {@link rv.data.Action.ClearGroupType.verify|verify} messages.
                 * @param message ClearGroupType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IClearGroupType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClearGroupType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ClearGroupType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.ClearGroupType;

                /**
                 * Decodes a ClearGroupType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ClearGroupType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.ClearGroupType;

                /**
                 * Verifies a ClearGroupType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ClearGroupType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ClearGroupType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.ClearGroupType;

                /**
                 * Creates a plain object from a ClearGroupType message. Also converts values to other types if specified.
                 * @param message ClearGroupType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.ClearGroupType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClearGroupType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ClearGroupType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a TransportControlType. */
            interface ITransportControlType {

                /** TransportControlType play */
                play?: (rv.data.Action.TransportControlType.IPlay|null);

                /** TransportControlType pause */
                pause?: (rv.data.Action.TransportControlType.IPause|null);

                /** TransportControlType jumpToTime */
                jumpToTime?: (rv.data.Action.TransportControlType.IJumpToTime|null);
            }

            /** Represents a TransportControlType. */
            class TransportControlType implements ITransportControlType {

                /**
                 * Constructs a new TransportControlType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ITransportControlType);

                /** TransportControlType play. */
                public play?: (rv.data.Action.TransportControlType.IPlay|null);

                /** TransportControlType pause. */
                public pause?: (rv.data.Action.TransportControlType.IPause|null);

                /** TransportControlType jumpToTime. */
                public jumpToTime?: (rv.data.Action.TransportControlType.IJumpToTime|null);

                /** TransportControlType Command. */
                public Command?: ("play"|"pause"|"jumpToTime");

                /**
                 * Creates a new TransportControlType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TransportControlType instance
                 */
                public static create(properties?: rv.data.Action.ITransportControlType): rv.data.Action.TransportControlType;

                /**
                 * Encodes the specified TransportControlType message. Does not implicitly {@link rv.data.Action.TransportControlType.verify|verify} messages.
                 * @param message TransportControlType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ITransportControlType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TransportControlType message, length delimited. Does not implicitly {@link rv.data.Action.TransportControlType.verify|verify} messages.
                 * @param message TransportControlType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ITransportControlType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TransportControlType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TransportControlType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TransportControlType;

                /**
                 * Decodes a TransportControlType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TransportControlType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TransportControlType;

                /**
                 * Verifies a TransportControlType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TransportControlType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TransportControlType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.TransportControlType;

                /**
                 * Creates a plain object from a TransportControlType message. Also converts values to other types if specified.
                 * @param message TransportControlType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.TransportControlType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TransportControlType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TransportControlType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace TransportControlType {

                /** Properties of a Play. */
                interface IPlay {
                }

                /** Represents a Play. */
                class Play implements IPlay {

                    /**
                     * Constructs a new Play.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.TransportControlType.IPlay);

                    /**
                     * Creates a new Play instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Play instance
                     */
                    public static create(properties?: rv.data.Action.TransportControlType.IPlay): rv.data.Action.TransportControlType.Play;

                    /**
                     * Encodes the specified Play message. Does not implicitly {@link rv.data.Action.TransportControlType.Play.verify|verify} messages.
                     * @param message Play message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.TransportControlType.IPlay, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Play message, length delimited. Does not implicitly {@link rv.data.Action.TransportControlType.Play.verify|verify} messages.
                     * @param message Play message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.TransportControlType.IPlay, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Play message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Play
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TransportControlType.Play;

                    /**
                     * Decodes a Play message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Play
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TransportControlType.Play;

                    /**
                     * Verifies a Play message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Play message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Play
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.TransportControlType.Play;

                    /**
                     * Creates a plain object from a Play message. Also converts values to other types if specified.
                     * @param message Play
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.TransportControlType.Play, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Play to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Play
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Pause. */
                interface IPause {
                }

                /** Represents a Pause. */
                class Pause implements IPause {

                    /**
                     * Constructs a new Pause.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.TransportControlType.IPause);

                    /**
                     * Creates a new Pause instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Pause instance
                     */
                    public static create(properties?: rv.data.Action.TransportControlType.IPause): rv.data.Action.TransportControlType.Pause;

                    /**
                     * Encodes the specified Pause message. Does not implicitly {@link rv.data.Action.TransportControlType.Pause.verify|verify} messages.
                     * @param message Pause message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.TransportControlType.IPause, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Pause message, length delimited. Does not implicitly {@link rv.data.Action.TransportControlType.Pause.verify|verify} messages.
                     * @param message Pause message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.TransportControlType.IPause, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Pause message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Pause
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TransportControlType.Pause;

                    /**
                     * Decodes a Pause message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Pause
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TransportControlType.Pause;

                    /**
                     * Verifies a Pause message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Pause message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Pause
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.TransportControlType.Pause;

                    /**
                     * Creates a plain object from a Pause message. Also converts values to other types if specified.
                     * @param message Pause
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.TransportControlType.Pause, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Pause to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Pause
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a JumpToTime. */
                interface IJumpToTime {

                    /** JumpToTime time */
                    time?: (number|null);
                }

                /** Represents a JumpToTime. */
                class JumpToTime implements IJumpToTime {

                    /**
                     * Constructs a new JumpToTime.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.TransportControlType.IJumpToTime);

                    /** JumpToTime time. */
                    public time: number;

                    /**
                     * Creates a new JumpToTime instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns JumpToTime instance
                     */
                    public static create(properties?: rv.data.Action.TransportControlType.IJumpToTime): rv.data.Action.TransportControlType.JumpToTime;

                    /**
                     * Encodes the specified JumpToTime message. Does not implicitly {@link rv.data.Action.TransportControlType.JumpToTime.verify|verify} messages.
                     * @param message JumpToTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.TransportControlType.IJumpToTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified JumpToTime message, length delimited. Does not implicitly {@link rv.data.Action.TransportControlType.JumpToTime.verify|verify} messages.
                     * @param message JumpToTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.TransportControlType.IJumpToTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a JumpToTime message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns JumpToTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.TransportControlType.JumpToTime;

                    /**
                     * Decodes a JumpToTime message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns JumpToTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.TransportControlType.JumpToTime;

                    /**
                     * Verifies a JumpToTime message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a JumpToTime message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns JumpToTime
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.TransportControlType.JumpToTime;

                    /**
                     * Creates a plain object from a JumpToTime message. Also converts values to other types if specified.
                     * @param message JumpToTime
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.TransportControlType.JumpToTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this JumpToTime to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for JumpToTime
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** Properties of a StageLayoutType. */
            interface IStageLayoutType {

                /** StageLayoutType stageScreenAssignments */
                stageScreenAssignments?: (rv.data.Stage.IScreenAssignment[]|null);

                /** StageLayoutType slideTarget */
                slideTarget?: (rv.data.Action.StageLayoutType.SlideTarget|null);
            }

            /** Represents a StageLayoutType. */
            class StageLayoutType implements IStageLayoutType {

                /**
                 * Constructs a new StageLayoutType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IStageLayoutType);

                /** StageLayoutType stageScreenAssignments. */
                public stageScreenAssignments: rv.data.Stage.IScreenAssignment[];

                /** StageLayoutType slideTarget. */
                public slideTarget: rv.data.Action.StageLayoutType.SlideTarget;

                /**
                 * Creates a new StageLayoutType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StageLayoutType instance
                 */
                public static create(properties?: rv.data.Action.IStageLayoutType): rv.data.Action.StageLayoutType;

                /**
                 * Encodes the specified StageLayoutType message. Does not implicitly {@link rv.data.Action.StageLayoutType.verify|verify} messages.
                 * @param message StageLayoutType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IStageLayoutType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StageLayoutType message, length delimited. Does not implicitly {@link rv.data.Action.StageLayoutType.verify|verify} messages.
                 * @param message StageLayoutType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IStageLayoutType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StageLayoutType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StageLayoutType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.StageLayoutType;

                /**
                 * Decodes a StageLayoutType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StageLayoutType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.StageLayoutType;

                /**
                 * Verifies a StageLayoutType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StageLayoutType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StageLayoutType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.StageLayoutType;

                /**
                 * Creates a plain object from a StageLayoutType message. Also converts values to other types if specified.
                 * @param message StageLayoutType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.StageLayoutType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StageLayoutType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for StageLayoutType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace StageLayoutType {

                /** SlideTarget enum. */
                enum SlideTarget {
                    SLIDE_TARGET_NO_CHANGE = 0,
                    SLIDE_TARGET_STAGE_ONLY = 1,
                    SLIDE_TARGET_ALL = 2
                }
            }

            /** Properties of a SlideDestinationType. */
            interface ISlideDestinationType {

                /** SlideDestinationType slideTarget */
                slideTarget?: (rv.data.Action.StageLayoutType.SlideTarget|null);
            }

            /** Represents a SlideDestinationType. */
            class SlideDestinationType implements ISlideDestinationType {

                /**
                 * Constructs a new SlideDestinationType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ISlideDestinationType);

                /** SlideDestinationType slideTarget. */
                public slideTarget: rv.data.Action.StageLayoutType.SlideTarget;

                /**
                 * Creates a new SlideDestinationType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SlideDestinationType instance
                 */
                public static create(properties?: rv.data.Action.ISlideDestinationType): rv.data.Action.SlideDestinationType;

                /**
                 * Encodes the specified SlideDestinationType message. Does not implicitly {@link rv.data.Action.SlideDestinationType.verify|verify} messages.
                 * @param message SlideDestinationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ISlideDestinationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SlideDestinationType message, length delimited. Does not implicitly {@link rv.data.Action.SlideDestinationType.verify|verify} messages.
                 * @param message SlideDestinationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ISlideDestinationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SlideDestinationType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SlideDestinationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.SlideDestinationType;

                /**
                 * Decodes a SlideDestinationType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SlideDestinationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.SlideDestinationType;

                /**
                 * Verifies a SlideDestinationType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SlideDestinationType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SlideDestinationType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.SlideDestinationType;

                /**
                 * Creates a plain object from a SlideDestinationType message. Also converts values to other types if specified.
                 * @param message SlideDestinationType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.SlideDestinationType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SlideDestinationType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for SlideDestinationType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a PropType. */
            interface IPropType {

                /** PropType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a PropType. */
            class PropType implements IPropType {

                /**
                 * Constructs a new PropType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IPropType);

                /** PropType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new PropType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PropType instance
                 */
                public static create(properties?: rv.data.Action.IPropType): rv.data.Action.PropType;

                /**
                 * Encodes the specified PropType message. Does not implicitly {@link rv.data.Action.PropType.verify|verify} messages.
                 * @param message PropType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IPropType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PropType message, length delimited. Does not implicitly {@link rv.data.Action.PropType.verify|verify} messages.
                 * @param message PropType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IPropType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PropType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PropType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.PropType;

                /**
                 * Decodes a PropType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PropType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.PropType;

                /**
                 * Verifies a PropType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PropType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PropType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.PropType;

                /**
                 * Creates a plain object from a PropType message. Also converts values to other types if specified.
                 * @param message PropType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.PropType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PropType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for PropType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a MaskType. */
            interface IMaskType {

                /** MaskType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a MaskType. */
            class MaskType implements IMaskType {

                /**
                 * Constructs a new MaskType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IMaskType);

                /** MaskType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new MaskType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MaskType instance
                 */
                public static create(properties?: rv.data.Action.IMaskType): rv.data.Action.MaskType;

                /**
                 * Encodes the specified MaskType message. Does not implicitly {@link rv.data.Action.MaskType.verify|verify} messages.
                 * @param message MaskType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IMaskType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MaskType message, length delimited. Does not implicitly {@link rv.data.Action.MaskType.verify|verify} messages.
                 * @param message MaskType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IMaskType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MaskType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MaskType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MaskType;

                /**
                 * Decodes a MaskType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MaskType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MaskType;

                /**
                 * Verifies a MaskType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MaskType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MaskType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.MaskType;

                /**
                 * Creates a plain object from a MaskType message. Also converts values to other types if specified.
                 * @param message MaskType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.MaskType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MaskType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MaskType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a MessageType. */
            interface IMessageType {

                /** MessageType messageIdentificaton */
                messageIdentificaton?: (rv.data.ICollectionElementType|null);

                /** MessageType content */
                content?: (rv.data.Message.ITokenValue[]|null);
            }

            /** Represents a MessageType. */
            class MessageType implements IMessageType {

                /**
                 * Constructs a new MessageType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IMessageType);

                /** MessageType messageIdentificaton. */
                public messageIdentificaton?: (rv.data.ICollectionElementType|null);

                /** MessageType content. */
                public content: rv.data.Message.ITokenValue[];

                /**
                 * Creates a new MessageType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MessageType instance
                 */
                public static create(properties?: rv.data.Action.IMessageType): rv.data.Action.MessageType;

                /**
                 * Encodes the specified MessageType message. Does not implicitly {@link rv.data.Action.MessageType.verify|verify} messages.
                 * @param message MessageType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IMessageType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MessageType message, length delimited. Does not implicitly {@link rv.data.Action.MessageType.verify|verify} messages.
                 * @param message MessageType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IMessageType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MessageType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MessageType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MessageType;

                /**
                 * Decodes a MessageType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MessageType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MessageType;

                /**
                 * Verifies a MessageType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MessageType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MessageType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.MessageType;

                /**
                 * Creates a plain object from a MessageType message. Also converts values to other types if specified.
                 * @param message MessageType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.MessageType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MessageType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MessageType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a CommunicationType. */
            interface ICommunicationType {

                /** CommunicationType deviceIdentification */
                deviceIdentification?: (rv.data.ICollectionElementType|null);

                /** CommunicationType format */
                format?: (string|null);

                /** CommunicationType description */
                description?: (string|null);

                /** CommunicationType commands */
                commands?: (rv.data.Action.CommunicationType.ICommand[]|null);

                /** CommunicationType midiCommand */
                midiCommand?: (rv.data.Action.CommunicationType.IMIDICommand|null);

                /** CommunicationType globalCacheCommand */
                globalCacheCommand?: (rv.data.Action.CommunicationType.IGlobalCacheCommand|null);

                /** CommunicationType gvg100Command */
                gvg100Command?: (rv.data.Action.CommunicationType.IGVG100Command|null);

                /** CommunicationType sony_BVSCommand */
                sony_BVSCommand?: (rv.data.Action.CommunicationType.ISonyBVSCommand|null);
            }

            /** Represents a CommunicationType. */
            class CommunicationType implements ICommunicationType {

                /**
                 * Constructs a new CommunicationType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ICommunicationType);

                /** CommunicationType deviceIdentification. */
                public deviceIdentification?: (rv.data.ICollectionElementType|null);

                /** CommunicationType format. */
                public format: string;

                /** CommunicationType description. */
                public description: string;

                /** CommunicationType commands. */
                public commands: rv.data.Action.CommunicationType.ICommand[];

                /** CommunicationType midiCommand. */
                public midiCommand?: (rv.data.Action.CommunicationType.IMIDICommand|null);

                /** CommunicationType globalCacheCommand. */
                public globalCacheCommand?: (rv.data.Action.CommunicationType.IGlobalCacheCommand|null);

                /** CommunicationType gvg100Command. */
                public gvg100Command?: (rv.data.Action.CommunicationType.IGVG100Command|null);

                /** CommunicationType sony_BVSCommand. */
                public sony_BVSCommand?: (rv.data.Action.CommunicationType.ISonyBVSCommand|null);

                /** CommunicationType CommandTypeData. */
                public CommandTypeData?: ("midiCommand"|"globalCacheCommand"|"gvg100Command"|"sony_BVSCommand");

                /**
                 * Creates a new CommunicationType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CommunicationType instance
                 */
                public static create(properties?: rv.data.Action.ICommunicationType): rv.data.Action.CommunicationType;

                /**
                 * Encodes the specified CommunicationType message. Does not implicitly {@link rv.data.Action.CommunicationType.verify|verify} messages.
                 * @param message CommunicationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ICommunicationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CommunicationType message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.verify|verify} messages.
                 * @param message CommunicationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ICommunicationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CommunicationType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CommunicationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType;

                /**
                 * Decodes a CommunicationType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CommunicationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType;

                /**
                 * Verifies a CommunicationType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CommunicationType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CommunicationType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType;

                /**
                 * Creates a plain object from a CommunicationType message. Also converts values to other types if specified.
                 * @param message CommunicationType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.CommunicationType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CommunicationType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for CommunicationType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace CommunicationType {

                /** Properties of a Command. */
                interface ICommand {

                    /** Command name */
                    name?: (string|null);

                    /** Command value */
                    value?: (string|null);

                    /** Command replacementRange */
                    replacementRange?: (rv.data.IIntRange|null);

                    /** Command possibleValues */
                    possibleValues?: (string[]|null);
                }

                /** Represents a Command. */
                class Command implements ICommand {

                    /**
                     * Constructs a new Command.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CommunicationType.ICommand);

                    /** Command name. */
                    public name: string;

                    /** Command value. */
                    public value: string;

                    /** Command replacementRange. */
                    public replacementRange?: (rv.data.IIntRange|null);

                    /** Command possibleValues. */
                    public possibleValues: string[];

                    /**
                     * Creates a new Command instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Command instance
                     */
                    public static create(properties?: rv.data.Action.CommunicationType.ICommand): rv.data.Action.CommunicationType.Command;

                    /**
                     * Encodes the specified Command message. Does not implicitly {@link rv.data.Action.CommunicationType.Command.verify|verify} messages.
                     * @param message Command message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CommunicationType.ICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Command message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.Command.verify|verify} messages.
                     * @param message Command message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CommunicationType.ICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Command message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType.Command;

                    /**
                     * Decodes a Command message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType.Command;

                    /**
                     * Verifies a Command message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Command message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Command
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType.Command;

                    /**
                     * Creates a plain object from a Command message. Also converts values to other types if specified.
                     * @param message Command
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CommunicationType.Command, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Command to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Command
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a MIDICommand. */
                interface IMIDICommand {

                    /** MIDICommand state */
                    state?: (rv.data.Action.CommunicationType.MIDICommand.State|null);

                    /** MIDICommand channel */
                    channel?: (number|null);

                    /** MIDICommand note */
                    note?: (number|null);

                    /** MIDICommand intensity */
                    intensity?: (number|null);
                }

                /** Represents a MIDICommand. */
                class MIDICommand implements IMIDICommand {

                    /**
                     * Constructs a new MIDICommand.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CommunicationType.IMIDICommand);

                    /** MIDICommand state. */
                    public state: rv.data.Action.CommunicationType.MIDICommand.State;

                    /** MIDICommand channel. */
                    public channel: number;

                    /** MIDICommand note. */
                    public note: number;

                    /** MIDICommand intensity. */
                    public intensity: number;

                    /**
                     * Creates a new MIDICommand instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MIDICommand instance
                     */
                    public static create(properties?: rv.data.Action.CommunicationType.IMIDICommand): rv.data.Action.CommunicationType.MIDICommand;

                    /**
                     * Encodes the specified MIDICommand message. Does not implicitly {@link rv.data.Action.CommunicationType.MIDICommand.verify|verify} messages.
                     * @param message MIDICommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CommunicationType.IMIDICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MIDICommand message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.MIDICommand.verify|verify} messages.
                     * @param message MIDICommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CommunicationType.IMIDICommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MIDICommand message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MIDICommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType.MIDICommand;

                    /**
                     * Decodes a MIDICommand message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MIDICommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType.MIDICommand;

                    /**
                     * Verifies a MIDICommand message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MIDICommand message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MIDICommand
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType.MIDICommand;

                    /**
                     * Creates a plain object from a MIDICommand message. Also converts values to other types if specified.
                     * @param message MIDICommand
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CommunicationType.MIDICommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MIDICommand to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for MIDICommand
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace MIDICommand {

                    /** State enum. */
                    enum State {
                        STATE_ON = 0,
                        STATE_OFF = 1
                    }
                }

                /** Properties of a GlobalCacheCommand. */
                interface IGlobalCacheCommand {

                    /** GlobalCacheCommand commandAction */
                    commandAction?: (rv.data.Action.CommunicationType.GlobalCacheCommand.CommandAction|null);

                    /** GlobalCacheCommand output */
                    output?: (number|null);

                    /** GlobalCacheCommand interval */
                    interval?: (number|null);
                }

                /** Represents a GlobalCacheCommand. */
                class GlobalCacheCommand implements IGlobalCacheCommand {

                    /**
                     * Constructs a new GlobalCacheCommand.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CommunicationType.IGlobalCacheCommand);

                    /** GlobalCacheCommand commandAction. */
                    public commandAction: rv.data.Action.CommunicationType.GlobalCacheCommand.CommandAction;

                    /** GlobalCacheCommand output. */
                    public output: number;

                    /** GlobalCacheCommand interval. */
                    public interval: number;

                    /**
                     * Creates a new GlobalCacheCommand instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns GlobalCacheCommand instance
                     */
                    public static create(properties?: rv.data.Action.CommunicationType.IGlobalCacheCommand): rv.data.Action.CommunicationType.GlobalCacheCommand;

                    /**
                     * Encodes the specified GlobalCacheCommand message. Does not implicitly {@link rv.data.Action.CommunicationType.GlobalCacheCommand.verify|verify} messages.
                     * @param message GlobalCacheCommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CommunicationType.IGlobalCacheCommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified GlobalCacheCommand message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.GlobalCacheCommand.verify|verify} messages.
                     * @param message GlobalCacheCommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CommunicationType.IGlobalCacheCommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a GlobalCacheCommand message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns GlobalCacheCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType.GlobalCacheCommand;

                    /**
                     * Decodes a GlobalCacheCommand message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns GlobalCacheCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType.GlobalCacheCommand;

                    /**
                     * Verifies a GlobalCacheCommand message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GlobalCacheCommand message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GlobalCacheCommand
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType.GlobalCacheCommand;

                    /**
                     * Creates a plain object from a GlobalCacheCommand message. Also converts values to other types if specified.
                     * @param message GlobalCacheCommand
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CommunicationType.GlobalCacheCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GlobalCacheCommand to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for GlobalCacheCommand
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace GlobalCacheCommand {

                    /** CommandAction enum. */
                    enum CommandAction {
                        COMMAND_ACTION_ON = 0,
                        COMMAND_ACTION_OFF = 1,
                        COMMAND_ACTION_ON_OFF_WITH_INTERVAL = 2,
                        COMMAND_ACTION_OFF_ON_WITH_INTERVAL = 3
                    }
                }

                /** Properties of a GVG100Command. */
                interface IGVG100Command {

                    /** GVG100Command commandAction */
                    commandAction?: (rv.data.Action.CommunicationType.GVG100Command.CommandAction|null);
                }

                /** Represents a GVG100Command. */
                class GVG100Command implements IGVG100Command {

                    /**
                     * Constructs a new GVG100Command.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CommunicationType.IGVG100Command);

                    /** GVG100Command commandAction. */
                    public commandAction: rv.data.Action.CommunicationType.GVG100Command.CommandAction;

                    /**
                     * Creates a new GVG100Command instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns GVG100Command instance
                     */
                    public static create(properties?: rv.data.Action.CommunicationType.IGVG100Command): rv.data.Action.CommunicationType.GVG100Command;

                    /**
                     * Encodes the specified GVG100Command message. Does not implicitly {@link rv.data.Action.CommunicationType.GVG100Command.verify|verify} messages.
                     * @param message GVG100Command message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CommunicationType.IGVG100Command, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified GVG100Command message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.GVG100Command.verify|verify} messages.
                     * @param message GVG100Command message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CommunicationType.IGVG100Command, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a GVG100Command message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns GVG100Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType.GVG100Command;

                    /**
                     * Decodes a GVG100Command message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns GVG100Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType.GVG100Command;

                    /**
                     * Verifies a GVG100Command message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GVG100Command message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GVG100Command
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType.GVG100Command;

                    /**
                     * Creates a plain object from a GVG100Command message. Also converts values to other types if specified.
                     * @param message GVG100Command
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CommunicationType.GVG100Command, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GVG100Command to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for GVG100Command
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace GVG100Command {

                    /** CommandAction enum. */
                    enum CommandAction {
                        COMMAND_ACTION_FADE_TO_BLACK = 0,
                        COMMAND_ACTION_DSK_TOGGLE = 1
                    }
                }

                /** Properties of a SonyBVSCommand. */
                interface ISonyBVSCommand {

                    /** SonyBVSCommand commandAction */
                    commandAction?: (rv.data.Action.CommunicationType.SonyBVSCommand.CommandAction|null);
                }

                /** Represents a SonyBVSCommand. */
                class SonyBVSCommand implements ISonyBVSCommand {

                    /**
                     * Constructs a new SonyBVSCommand.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CommunicationType.ISonyBVSCommand);

                    /** SonyBVSCommand commandAction. */
                    public commandAction: rv.data.Action.CommunicationType.SonyBVSCommand.CommandAction;

                    /**
                     * Creates a new SonyBVSCommand instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SonyBVSCommand instance
                     */
                    public static create(properties?: rv.data.Action.CommunicationType.ISonyBVSCommand): rv.data.Action.CommunicationType.SonyBVSCommand;

                    /**
                     * Encodes the specified SonyBVSCommand message. Does not implicitly {@link rv.data.Action.CommunicationType.SonyBVSCommand.verify|verify} messages.
                     * @param message SonyBVSCommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CommunicationType.ISonyBVSCommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SonyBVSCommand message, length delimited. Does not implicitly {@link rv.data.Action.CommunicationType.SonyBVSCommand.verify|verify} messages.
                     * @param message SonyBVSCommand message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CommunicationType.ISonyBVSCommand, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SonyBVSCommand message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SonyBVSCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CommunicationType.SonyBVSCommand;

                    /**
                     * Decodes a SonyBVSCommand message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SonyBVSCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CommunicationType.SonyBVSCommand;

                    /**
                     * Verifies a SonyBVSCommand message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SonyBVSCommand message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SonyBVSCommand
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CommunicationType.SonyBVSCommand;

                    /**
                     * Creates a plain object from a SonyBVSCommand message. Also converts values to other types if specified.
                     * @param message SonyBVSCommand
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CommunicationType.SonyBVSCommand, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SonyBVSCommand to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for SonyBVSCommand
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace SonyBVSCommand {

                    /** CommandAction enum. */
                    enum CommandAction {
                        COMMAND_ACTION_FADE_TO_BLACK = 0,
                        COMMAND_ACTION_KEY_ON = 1,
                        COMMAND_ACTION_KEY_OFF = 2,
                        COMMAND_ACTION_DSK_ON = 3,
                        COMMAND_ACTION_DSK_OFF = 4
                    }
                }
            }

            /** Properties of a MultiScreenType. */
            interface IMultiScreenType {

                /** MultiScreenType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a MultiScreenType. */
            class MultiScreenType implements IMultiScreenType {

                /**
                 * Constructs a new MultiScreenType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IMultiScreenType);

                /** MultiScreenType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new MultiScreenType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MultiScreenType instance
                 */
                public static create(properties?: rv.data.Action.IMultiScreenType): rv.data.Action.MultiScreenType;

                /**
                 * Encodes the specified MultiScreenType message. Does not implicitly {@link rv.data.Action.MultiScreenType.verify|verify} messages.
                 * @param message MultiScreenType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IMultiScreenType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MultiScreenType message, length delimited. Does not implicitly {@link rv.data.Action.MultiScreenType.verify|verify} messages.
                 * @param message MultiScreenType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IMultiScreenType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MultiScreenType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MultiScreenType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MultiScreenType;

                /**
                 * Decodes a MultiScreenType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MultiScreenType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MultiScreenType;

                /**
                 * Verifies a MultiScreenType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MultiScreenType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MultiScreenType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.MultiScreenType;

                /**
                 * Creates a plain object from a MultiScreenType message. Also converts values to other types if specified.
                 * @param message MultiScreenType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.MultiScreenType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MultiScreenType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MultiScreenType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a DocumentType. */
            interface IDocumentType {

                /** DocumentType identification */
                identification?: (rv.data.ICollectionElementType|null);

                /** DocumentType selectedArrangement */
                selectedArrangement?: (rv.data.IUUID|null);

                /** DocumentType contentDestination */
                contentDestination?: (rv.data.Action.ContentDestination|null);
            }

            /** Represents a DocumentType. */
            class DocumentType implements IDocumentType {

                /**
                 * Constructs a new DocumentType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IDocumentType);

                /** DocumentType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /** DocumentType selectedArrangement. */
                public selectedArrangement?: (rv.data.IUUID|null);

                /** DocumentType contentDestination. */
                public contentDestination: rv.data.Action.ContentDestination;

                /**
                 * Creates a new DocumentType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DocumentType instance
                 */
                public static create(properties?: rv.data.Action.IDocumentType): rv.data.Action.DocumentType;

                /**
                 * Encodes the specified DocumentType message. Does not implicitly {@link rv.data.Action.DocumentType.verify|verify} messages.
                 * @param message DocumentType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IDocumentType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DocumentType message, length delimited. Does not implicitly {@link rv.data.Action.DocumentType.verify|verify} messages.
                 * @param message DocumentType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IDocumentType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DocumentType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DocumentType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.DocumentType;

                /**
                 * Decodes a DocumentType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DocumentType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.DocumentType;

                /**
                 * Verifies a DocumentType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DocumentType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DocumentType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.DocumentType;

                /**
                 * Creates a plain object from a DocumentType message. Also converts values to other types if specified.
                 * @param message DocumentType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.DocumentType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DocumentType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for DocumentType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an ExternalPresentationType. */
            interface IExternalPresentationType {

                /** ExternalPresentationType url */
                url?: (rv.data.IURL|null);
            }

            /** Represents an ExternalPresentationType. */
            class ExternalPresentationType implements IExternalPresentationType {

                /**
                 * Constructs a new ExternalPresentationType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IExternalPresentationType);

                /** ExternalPresentationType url. */
                public url?: (rv.data.IURL|null);

                /**
                 * Creates a new ExternalPresentationType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ExternalPresentationType instance
                 */
                public static create(properties?: rv.data.Action.IExternalPresentationType): rv.data.Action.ExternalPresentationType;

                /**
                 * Encodes the specified ExternalPresentationType message. Does not implicitly {@link rv.data.Action.ExternalPresentationType.verify|verify} messages.
                 * @param message ExternalPresentationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IExternalPresentationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ExternalPresentationType message, length delimited. Does not implicitly {@link rv.data.Action.ExternalPresentationType.verify|verify} messages.
                 * @param message ExternalPresentationType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IExternalPresentationType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ExternalPresentationType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ExternalPresentationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.ExternalPresentationType;

                /**
                 * Decodes an ExternalPresentationType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ExternalPresentationType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.ExternalPresentationType;

                /**
                 * Verifies an ExternalPresentationType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExternalPresentationType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExternalPresentationType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.ExternalPresentationType;

                /**
                 * Creates a plain object from an ExternalPresentationType message. Also converts values to other types if specified.
                 * @param message ExternalPresentationType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.ExternalPresentationType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExternalPresentationType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ExternalPresentationType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an AudienceLookType. */
            interface IAudienceLookType {

                /** AudienceLookType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents an AudienceLookType. */
            class AudienceLookType implements IAudienceLookType {

                /**
                 * Constructs a new AudienceLookType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IAudienceLookType);

                /** AudienceLookType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new AudienceLookType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AudienceLookType instance
                 */
                public static create(properties?: rv.data.Action.IAudienceLookType): rv.data.Action.AudienceLookType;

                /**
                 * Encodes the specified AudienceLookType message. Does not implicitly {@link rv.data.Action.AudienceLookType.verify|verify} messages.
                 * @param message AudienceLookType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IAudienceLookType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AudienceLookType message, length delimited. Does not implicitly {@link rv.data.Action.AudienceLookType.verify|verify} messages.
                 * @param message AudienceLookType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IAudienceLookType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AudienceLookType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AudienceLookType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.AudienceLookType;

                /**
                 * Decodes an AudienceLookType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AudienceLookType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.AudienceLookType;

                /**
                 * Verifies an AudienceLookType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AudienceLookType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AudienceLookType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.AudienceLookType;

                /**
                 * Creates a plain object from an AudienceLookType message. Also converts values to other types if specified.
                 * @param message AudienceLookType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.AudienceLookType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AudienceLookType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for AudienceLookType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an AudioInputType. */
            interface IAudioInputType {

                /** AudioInputType index */
                index?: (number|null);

                /** AudioInputType overrideMode */
                overrideMode?: (boolean|null);

                /** AudioInputType behaviorMode */
                behaviorMode?: (rv.data.AudioInput.IBehaviorMode|null);

                /** AudioInputType overrideVolume */
                overrideVolume?: (boolean|null);

                /** AudioInputType volume */
                volume?: (number|null);
            }

            /** Represents an AudioInputType. */
            class AudioInputType implements IAudioInputType {

                /**
                 * Constructs a new AudioInputType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IAudioInputType);

                /** AudioInputType index. */
                public index: number;

                /** AudioInputType overrideMode. */
                public overrideMode: boolean;

                /** AudioInputType behaviorMode. */
                public behaviorMode?: (rv.data.AudioInput.IBehaviorMode|null);

                /** AudioInputType overrideVolume. */
                public overrideVolume: boolean;

                /** AudioInputType volume. */
                public volume: number;

                /**
                 * Creates a new AudioInputType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AudioInputType instance
                 */
                public static create(properties?: rv.data.Action.IAudioInputType): rv.data.Action.AudioInputType;

                /**
                 * Encodes the specified AudioInputType message. Does not implicitly {@link rv.data.Action.AudioInputType.verify|verify} messages.
                 * @param message AudioInputType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IAudioInputType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AudioInputType message, length delimited. Does not implicitly {@link rv.data.Action.AudioInputType.verify|verify} messages.
                 * @param message AudioInputType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IAudioInputType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AudioInputType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AudioInputType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.AudioInputType;

                /**
                 * Decodes an AudioInputType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AudioInputType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.AudioInputType;

                /**
                 * Verifies an AudioInputType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AudioInputType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AudioInputType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.AudioInputType;

                /**
                 * Creates a plain object from an AudioInputType message. Also converts values to other types if specified.
                 * @param message AudioInputType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.AudioInputType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AudioInputType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for AudioInputType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a MacroType. */
            interface IMacroType {

                /** MacroType identification */
                identification?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a MacroType. */
            class MacroType implements IMacroType {

                /**
                 * Constructs a new MacroType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.IMacroType);

                /** MacroType identification. */
                public identification?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new MacroType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MacroType instance
                 */
                public static create(properties?: rv.data.Action.IMacroType): rv.data.Action.MacroType;

                /**
                 * Encodes the specified MacroType message. Does not implicitly {@link rv.data.Action.MacroType.verify|verify} messages.
                 * @param message MacroType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.IMacroType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MacroType message, length delimited. Does not implicitly {@link rv.data.Action.MacroType.verify|verify} messages.
                 * @param message MacroType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.IMacroType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MacroType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MacroType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.MacroType;

                /**
                 * Decodes a MacroType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MacroType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.MacroType;

                /**
                 * Verifies a MacroType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MacroType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MacroType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.MacroType;

                /**
                 * Creates a plain object from a MacroType message. Also converts values to other types if specified.
                 * @param message MacroType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.MacroType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MacroType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for MacroType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a CaptureType. */
            interface ICaptureType {

                /** CaptureType start */
                start?: (rv.data.Action.CaptureType.ICaptureStart|null);

                /** CaptureType stop */
                stop?: (rv.data.Action.CaptureType.ICaptureStop|null);
            }

            /** Represents a CaptureType. */
            class CaptureType implements ICaptureType {

                /**
                 * Constructs a new CaptureType.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Action.ICaptureType);

                /** CaptureType start. */
                public start?: (rv.data.Action.CaptureType.ICaptureStart|null);

                /** CaptureType stop. */
                public stop?: (rv.data.Action.CaptureType.ICaptureStop|null);

                /** CaptureType CaptureAction. */
                public CaptureAction?: ("start"|"stop");

                /**
                 * Creates a new CaptureType instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CaptureType instance
                 */
                public static create(properties?: rv.data.Action.ICaptureType): rv.data.Action.CaptureType;

                /**
                 * Encodes the specified CaptureType message. Does not implicitly {@link rv.data.Action.CaptureType.verify|verify} messages.
                 * @param message CaptureType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Action.ICaptureType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CaptureType message, length delimited. Does not implicitly {@link rv.data.Action.CaptureType.verify|verify} messages.
                 * @param message CaptureType message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Action.ICaptureType, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CaptureType message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CaptureType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CaptureType;

                /**
                 * Decodes a CaptureType message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CaptureType
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CaptureType;

                /**
                 * Verifies a CaptureType message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CaptureType message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CaptureType
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Action.CaptureType;

                /**
                 * Creates a plain object from a CaptureType message. Also converts values to other types if specified.
                 * @param message CaptureType
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Action.CaptureType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CaptureType to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for CaptureType
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace CaptureType {

                /** Properties of a CaptureStart. */
                interface ICaptureStart {

                    /** CaptureStart presetIdentification */
                    presetIdentification?: (rv.data.ICollectionElementType|null);
                }

                /** Represents a CaptureStart. */
                class CaptureStart implements ICaptureStart {

                    /**
                     * Constructs a new CaptureStart.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CaptureType.ICaptureStart);

                    /** CaptureStart presetIdentification. */
                    public presetIdentification?: (rv.data.ICollectionElementType|null);

                    /**
                     * Creates a new CaptureStart instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CaptureStart instance
                     */
                    public static create(properties?: rv.data.Action.CaptureType.ICaptureStart): rv.data.Action.CaptureType.CaptureStart;

                    /**
                     * Encodes the specified CaptureStart message. Does not implicitly {@link rv.data.Action.CaptureType.CaptureStart.verify|verify} messages.
                     * @param message CaptureStart message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CaptureType.ICaptureStart, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CaptureStart message, length delimited. Does not implicitly {@link rv.data.Action.CaptureType.CaptureStart.verify|verify} messages.
                     * @param message CaptureStart message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CaptureType.ICaptureStart, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CaptureStart message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CaptureStart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CaptureType.CaptureStart;

                    /**
                     * Decodes a CaptureStart message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CaptureStart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CaptureType.CaptureStart;

                    /**
                     * Verifies a CaptureStart message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CaptureStart message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CaptureStart
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CaptureType.CaptureStart;

                    /**
                     * Creates a plain object from a CaptureStart message. Also converts values to other types if specified.
                     * @param message CaptureStart
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CaptureType.CaptureStart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CaptureStart to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for CaptureStart
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a CaptureStop. */
                interface ICaptureStop {

                    /** CaptureStop showsAlertBeforeStopping */
                    showsAlertBeforeStopping?: (boolean|null);
                }

                /** Represents a CaptureStop. */
                class CaptureStop implements ICaptureStop {

                    /**
                     * Constructs a new CaptureStop.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Action.CaptureType.ICaptureStop);

                    /** CaptureStop showsAlertBeforeStopping. */
                    public showsAlertBeforeStopping: boolean;

                    /**
                     * Creates a new CaptureStop instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CaptureStop instance
                     */
                    public static create(properties?: rv.data.Action.CaptureType.ICaptureStop): rv.data.Action.CaptureType.CaptureStop;

                    /**
                     * Encodes the specified CaptureStop message. Does not implicitly {@link rv.data.Action.CaptureType.CaptureStop.verify|verify} messages.
                     * @param message CaptureStop message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Action.CaptureType.ICaptureStop, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CaptureStop message, length delimited. Does not implicitly {@link rv.data.Action.CaptureType.CaptureStop.verify|verify} messages.
                     * @param message CaptureStop message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Action.CaptureType.ICaptureStop, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CaptureStop message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CaptureStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Action.CaptureType.CaptureStop;

                    /**
                     * Decodes a CaptureStop message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CaptureStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Action.CaptureType.CaptureStop;

                    /**
                     * Verifies a CaptureStop message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CaptureStop message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CaptureStop
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Action.CaptureType.CaptureStop;

                    /**
                     * Creates a plain object from a CaptureStop message. Also converts values to other types if specified.
                     * @param message CaptureStop
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Action.CaptureType.CaptureStop, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CaptureStop to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for CaptureStop
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** ContentDestination enum. */
            enum ContentDestination {
                CONTENT_DESTINATION_GLOBAL = 0,
                CONTENT_DESTINATION_ANNOUNCEMENTS = 1
            }

            /** LayerType enum. */
            enum LayerType {
                LAYER_TYPE_BACKGROUND = 0,
                LAYER_TYPE_FOREGROUND = 1,
                LAYER_TYPE_FILL = 2,
                LAYER_TYPE_INPUT = 3
            }

            /** ActionType enum. */
            enum ActionType {
                ACTION_TYPE_UNKNOWN = 0,
                ACTION_TYPE_STAGE_LAYOUT = 1,
                ACTION_TYPE_MEDIA = 2,
                ACTION_TYPE_TIMER = 3,
                ACTION_TYPE_COMMUNICATION = 4,
                ACTION_TYPE_CLEAR = 5,
                ACTION_TYPE_PROP = 6,
                ACTION_TYPE_MASK = 7,
                ACTION_TYPE_MESSAGE = 8,
                ACTION_TYPE_SOCIAL_MEDIA = 9,
                ACTION_TYPE_MULTISCREEN = 10,
                ACTION_TYPE_PRESENTATION_SLIDE = 11,
                ACTION_TYPE_FOREGROUND_MEDIA = 12,
                ACTION_TYPE_BACKGROUND_MEDIA = 13,
                ACTION_TYPE_PRESENTATION_DOCUMENT = 14,
                ACTION_TYPE_PROP_SLIDE = 15,
                ACTION_TYPE_EXTERNAL_PRESENTATION = 17,
                ACTION_TYPE_AUDIENCE_LOOK = 18,
                ACTION_TYPE_AUDIO_INPUT = 19,
                ACTION_TYPE_AUDIO_BIN_PLAYLIST = 20,
                ACTION_TYPE_MEDIA_BIN_PLAYLIST = 21,
                ACTION_TYPE_SLIDE_DESTINATION = 22,
                ACTION_TYPE_MACRO = 23,
                ACTION_TYPE_CLEAR_GROUP = 24,
                ACTION_TYPE_CAPTURE = 25,
                ACTION_TYPE_LIBRARY_PLAYLIST = 26
            }
        }

        /** Properties of a Background. */
        interface IBackground {

            /** Background isEnabled */
            isEnabled?: (boolean|null);

            /** Background color */
            color?: (rv.data.IColor|null);

            /** Background gradient */
            gradient?: (rv.data.Graphics.IGradient|null);
        }

        /** Represents a Background. */
        class Background implements IBackground {

            /**
             * Constructs a new Background.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IBackground);

            /** Background isEnabled. */
            public isEnabled: boolean;

            /** Background color. */
            public color?: (rv.data.IColor|null);

            /** Background gradient. */
            public gradient?: (rv.data.Graphics.IGradient|null);

            /** Background Fill. */
            public Fill?: ("color"|"gradient");

            /**
             * Creates a new Background instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Background instance
             */
            public static create(properties?: rv.data.IBackground): rv.data.Background;

            /**
             * Encodes the specified Background message. Does not implicitly {@link rv.data.Background.verify|verify} messages.
             * @param message Background message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IBackground, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Background message, length delimited. Does not implicitly {@link rv.data.Background.verify|verify} messages.
             * @param message Background message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IBackground, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Background message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Background
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Background;

            /**
             * Decodes a Background message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Background
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Background;

            /**
             * Verifies a Background message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Background message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Background
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Background;

            /**
             * Creates a plain object from a Background message. Also converts values to other types if specified.
             * @param message Background
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Background, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Background to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Background
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a Color. */
        interface IColor {

            /** Color red */
            red?: (number|null);

            /** Color green */
            green?: (number|null);

            /** Color blue */
            blue?: (number|null);

            /** Color alpha */
            alpha?: (number|null);
        }

        /** Represents a Color. */
        class Color implements IColor {

            /**
             * Constructs a new Color.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IColor);

            /** Color red. */
            public red: number;

            /** Color green. */
            public green: number;

            /** Color blue. */
            public blue: number;

            /** Color alpha. */
            public alpha: number;

            /**
             * Creates a new Color instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Color instance
             */
            public static create(properties?: rv.data.IColor): rv.data.Color;

            /**
             * Encodes the specified Color message. Does not implicitly {@link rv.data.Color.verify|verify} messages.
             * @param message Color message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Color message, length delimited. Does not implicitly {@link rv.data.Color.verify|verify} messages.
             * @param message Color message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IColor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Color message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Color
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Color;

            /**
             * Decodes a Color message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Color
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Color;

            /**
             * Verifies a Color message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Color message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Color
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Color;

            /**
             * Creates a plain object from a Color message. Also converts values to other types if specified.
             * @param message Color
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Color, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Color to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Color
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a Graphics. */
        interface IGraphics {
        }

        /** Represents a Graphics. */
        class Graphics implements IGraphics {

            /**
             * Constructs a new Graphics.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IGraphics);

            /**
             * Creates a new Graphics instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Graphics instance
             */
            public static create(properties?: rv.data.IGraphics): rv.data.Graphics;

            /**
             * Encodes the specified Graphics message. Does not implicitly {@link rv.data.Graphics.verify|verify} messages.
             * @param message Graphics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IGraphics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Graphics message, length delimited. Does not implicitly {@link rv.data.Graphics.verify|verify} messages.
             * @param message Graphics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IGraphics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Graphics message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Graphics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics;

            /**
             * Decodes a Graphics message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Graphics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics;

            /**
             * Verifies a Graphics message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Graphics message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Graphics
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Graphics;

            /**
             * Creates a plain object from a Graphics message. Also converts values to other types if specified.
             * @param message Graphics
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Graphics, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Graphics to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Graphics
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Graphics {

            /** Properties of an Element. */
            interface IElement {

                /** Element uuid */
                uuid?: (rv.data.IUUID|null);

                /** Element name */
                name?: (string|null);

                /** Element bounds */
                bounds?: (rv.data.Graphics.IRect|null);

                /** Element rotation */
                rotation?: (number|null);

                /** Element opacity */
                opacity?: (number|null);

                /** Element locked */
                locked?: (boolean|null);

                /** Element aspectRatioLocked */
                aspectRatioLocked?: (boolean|null);

                /** Element path */
                path?: (rv.data.Graphics.IPath|null);

                /** Element fill */
                fill?: (rv.data.Graphics.IFill|null);

                /** Element stroke */
                stroke?: (rv.data.Graphics.IStroke|null);

                /** Element shadow */
                shadow?: (rv.data.Graphics.IShadow|null);

                /** Element feather */
                feather?: (rv.data.Graphics.IFeather|null);

                /** Element text */
                text?: (rv.data.Graphics.IText|null);

                /** Element flipMode */
                flipMode?: (rv.data.Graphics.Element.FlipMode|null);

                /** Element hidden */
                hidden?: (boolean|null);

                /** Element textLineMask */
                textLineMask?: (rv.data.Graphics.Text.ILineFillMask|null);
            }

            /** Represents an Element. */
            class Element implements IElement {

                /**
                 * Constructs a new Element.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IElement);

                /** Element uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Element name. */
                public name: string;

                /** Element bounds. */
                public bounds?: (rv.data.Graphics.IRect|null);

                /** Element rotation. */
                public rotation: number;

                /** Element opacity. */
                public opacity: number;

                /** Element locked. */
                public locked: boolean;

                /** Element aspectRatioLocked. */
                public aspectRatioLocked: boolean;

                /** Element path. */
                public path?: (rv.data.Graphics.IPath|null);

                /** Element fill. */
                public fill?: (rv.data.Graphics.IFill|null);

                /** Element stroke. */
                public stroke?: (rv.data.Graphics.IStroke|null);

                /** Element shadow. */
                public shadow?: (rv.data.Graphics.IShadow|null);

                /** Element feather. */
                public feather?: (rv.data.Graphics.IFeather|null);

                /** Element text. */
                public text?: (rv.data.Graphics.IText|null);

                /** Element flipMode. */
                public flipMode: rv.data.Graphics.Element.FlipMode;

                /** Element hidden. */
                public hidden: boolean;

                /** Element textLineMask. */
                public textLineMask?: (rv.data.Graphics.Text.ILineFillMask|null);

                /** Element Mask. */
                public Mask?: "textLineMask";

                /**
                 * Creates a new Element instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Element instance
                 */
                public static create(properties?: rv.data.Graphics.IElement): rv.data.Graphics.Element;

                /**
                 * Encodes the specified Element message. Does not implicitly {@link rv.data.Graphics.Element.verify|verify} messages.
                 * @param message Element message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IElement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Element message, length delimited. Does not implicitly {@link rv.data.Graphics.Element.verify|verify} messages.
                 * @param message Element message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IElement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Element message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Element
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Element;

                /**
                 * Decodes an Element message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Element
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Element;

                /**
                 * Verifies an Element message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Element message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Element
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Element;

                /**
                 * Creates a plain object from an Element message. Also converts values to other types if specified.
                 * @param message Element
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Element, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Element to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Element
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Element {

                /** FlipMode enum. */
                enum FlipMode {
                    FLIP_MODE_NONE = 0,
                    FLIP_MODE_VERTICAL = 1,
                    FLIP_MODE_HORIZONTAL = 2,
                    FLIP_MODE_BOTH = 3
                }
            }

            /** Properties of a Rect. */
            interface IRect {

                /** Rect origin */
                origin?: (rv.data.Graphics.IPoint|null);

                /** Rect size */
                size?: (rv.data.Graphics.ISize|null);
            }

            /** Represents a Rect. */
            class Rect implements IRect {

                /**
                 * Constructs a new Rect.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IRect);

                /** Rect origin. */
                public origin?: (rv.data.Graphics.IPoint|null);

                /** Rect size. */
                public size?: (rv.data.Graphics.ISize|null);

                /**
                 * Creates a new Rect instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Rect instance
                 */
                public static create(properties?: rv.data.Graphics.IRect): rv.data.Graphics.Rect;

                /**
                 * Encodes the specified Rect message. Does not implicitly {@link rv.data.Graphics.Rect.verify|verify} messages.
                 * @param message Rect message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IRect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Rect message, length delimited. Does not implicitly {@link rv.data.Graphics.Rect.verify|verify} messages.
                 * @param message Rect message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IRect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Rect message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Rect
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Rect;

                /**
                 * Decodes a Rect message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Rect
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Rect;

                /**
                 * Verifies a Rect message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Rect message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Rect
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Rect;

                /**
                 * Creates a plain object from a Rect message. Also converts values to other types if specified.
                 * @param message Rect
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Rect, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Rect to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Rect
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Point. */
            interface IPoint {

                /** Point x */
                x?: (number|null);

                /** Point y */
                y?: (number|null);
            }

            /** Represents a Point. */
            class Point implements IPoint {

                /**
                 * Constructs a new Point.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IPoint);

                /** Point x. */
                public x: number;

                /** Point y. */
                public y: number;

                /**
                 * Creates a new Point instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Point instance
                 */
                public static create(properties?: rv.data.Graphics.IPoint): rv.data.Graphics.Point;

                /**
                 * Encodes the specified Point message. Does not implicitly {@link rv.data.Graphics.Point.verify|verify} messages.
                 * @param message Point message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Point message, length delimited. Does not implicitly {@link rv.data.Graphics.Point.verify|verify} messages.
                 * @param message Point message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Point message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Point
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Point;

                /**
                 * Decodes a Point message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Point
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Point;

                /**
                 * Verifies a Point message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Point message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Point
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Point;

                /**
                 * Creates a plain object from a Point message. Also converts values to other types if specified.
                 * @param message Point
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Point, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Point to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Point
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Size. */
            interface ISize {

                /** Size width */
                width?: (number|null);

                /** Size height */
                height?: (number|null);
            }

            /** Represents a Size. */
            class Size implements ISize {

                /**
                 * Constructs a new Size.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.ISize);

                /** Size width. */
                public width: number;

                /** Size height. */
                public height: number;

                /**
                 * Creates a new Size instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Size instance
                 */
                public static create(properties?: rv.data.Graphics.ISize): rv.data.Graphics.Size;

                /**
                 * Encodes the specified Size message. Does not implicitly {@link rv.data.Graphics.Size.verify|verify} messages.
                 * @param message Size message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.ISize, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Size message, length delimited. Does not implicitly {@link rv.data.Graphics.Size.verify|verify} messages.
                 * @param message Size message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.ISize, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Size message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Size;

                /**
                 * Decodes a Size message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Size
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Size;

                /**
                 * Verifies a Size message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Size message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Size
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Size;

                /**
                 * Creates a plain object from a Size message. Also converts values to other types if specified.
                 * @param message Size
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Size, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Size to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Size
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an EdgeInsets. */
            interface IEdgeInsets {

                /** EdgeInsets left */
                left?: (number|null);

                /** EdgeInsets right */
                right?: (number|null);

                /** EdgeInsets top */
                top?: (number|null);

                /** EdgeInsets bottom */
                bottom?: (number|null);
            }

            /** Represents an EdgeInsets. */
            class EdgeInsets implements IEdgeInsets {

                /**
                 * Constructs a new EdgeInsets.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IEdgeInsets);

                /** EdgeInsets left. */
                public left: number;

                /** EdgeInsets right. */
                public right: number;

                /** EdgeInsets top. */
                public top: number;

                /** EdgeInsets bottom. */
                public bottom: number;

                /**
                 * Creates a new EdgeInsets instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EdgeInsets instance
                 */
                public static create(properties?: rv.data.Graphics.IEdgeInsets): rv.data.Graphics.EdgeInsets;

                /**
                 * Encodes the specified EdgeInsets message. Does not implicitly {@link rv.data.Graphics.EdgeInsets.verify|verify} messages.
                 * @param message EdgeInsets message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IEdgeInsets, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EdgeInsets message, length delimited. Does not implicitly {@link rv.data.Graphics.EdgeInsets.verify|verify} messages.
                 * @param message EdgeInsets message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IEdgeInsets, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EdgeInsets message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EdgeInsets
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.EdgeInsets;

                /**
                 * Decodes an EdgeInsets message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EdgeInsets
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.EdgeInsets;

                /**
                 * Verifies an EdgeInsets message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EdgeInsets message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EdgeInsets
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.EdgeInsets;

                /**
                 * Creates a plain object from an EdgeInsets message. Also converts values to other types if specified.
                 * @param message EdgeInsets
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.EdgeInsets, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EdgeInsets to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for EdgeInsets
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Path. */
            interface IPath {

                /** Path closed */
                closed?: (boolean|null);

                /** Path points */
                points?: (rv.data.Graphics.Path.IBezierPoint[]|null);

                /** Path shape */
                shape?: (rv.data.Graphics.Path.IShape|null);
            }

            /** Represents a Path. */
            class Path implements IPath {

                /**
                 * Constructs a new Path.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IPath);

                /** Path closed. */
                public closed: boolean;

                /** Path points. */
                public points: rv.data.Graphics.Path.IBezierPoint[];

                /** Path shape. */
                public shape?: (rv.data.Graphics.Path.IShape|null);

                /**
                 * Creates a new Path instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Path instance
                 */
                public static create(properties?: rv.data.Graphics.IPath): rv.data.Graphics.Path;

                /**
                 * Encodes the specified Path message. Does not implicitly {@link rv.data.Graphics.Path.verify|verify} messages.
                 * @param message Path message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IPath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Path message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.verify|verify} messages.
                 * @param message Path message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IPath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Path message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Path
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path;

                /**
                 * Decodes a Path message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Path
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path;

                /**
                 * Verifies a Path message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Path message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Path
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path;

                /**
                 * Creates a plain object from a Path message. Also converts values to other types if specified.
                 * @param message Path
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Path, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Path to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Path
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Path {

                /** Properties of a BezierPoint. */
                interface IBezierPoint {

                    /** BezierPoint point */
                    point?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint q0 */
                    q0?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint q1 */
                    q1?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint curved */
                    curved?: (boolean|null);
                }

                /** Represents a BezierPoint. */
                class BezierPoint implements IBezierPoint {

                    /**
                     * Constructs a new BezierPoint.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Path.IBezierPoint);

                    /** BezierPoint point. */
                    public point?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint q0. */
                    public q0?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint q1. */
                    public q1?: (rv.data.Graphics.IPoint|null);

                    /** BezierPoint curved. */
                    public curved: boolean;

                    /**
                     * Creates a new BezierPoint instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns BezierPoint instance
                     */
                    public static create(properties?: rv.data.Graphics.Path.IBezierPoint): rv.data.Graphics.Path.BezierPoint;

                    /**
                     * Encodes the specified BezierPoint message. Does not implicitly {@link rv.data.Graphics.Path.BezierPoint.verify|verify} messages.
                     * @param message BezierPoint message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Path.IBezierPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified BezierPoint message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.BezierPoint.verify|verify} messages.
                     * @param message BezierPoint message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Path.IBezierPoint, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a BezierPoint message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns BezierPoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.BezierPoint;

                    /**
                     * Decodes a BezierPoint message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns BezierPoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.BezierPoint;

                    /**
                     * Verifies a BezierPoint message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a BezierPoint message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns BezierPoint
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.BezierPoint;

                    /**
                     * Creates a plain object from a BezierPoint message. Also converts values to other types if specified.
                     * @param message BezierPoint
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Path.BezierPoint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this BezierPoint to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for BezierPoint
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Shape. */
                interface IShape {

                    /** Shape type */
                    type?: (rv.data.Graphics.Path.Shape.Type|null);

                    /** Shape roundedRectangle */
                    roundedRectangle?: (rv.data.Graphics.Path.Shape.IRoundedRectangle|null);

                    /** Shape polygon */
                    polygon?: (rv.data.Graphics.Path.Shape.IPolygon|null);

                    /** Shape star */
                    star?: (rv.data.Graphics.Path.Shape.IStar|null);

                    /** Shape arrow */
                    arrow?: (rv.data.Graphics.Path.Shape.IArrow|null);
                }

                /** Represents a Shape. */
                class Shape implements IShape {

                    /**
                     * Constructs a new Shape.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Path.IShape);

                    /** Shape type. */
                    public type: rv.data.Graphics.Path.Shape.Type;

                    /** Shape roundedRectangle. */
                    public roundedRectangle?: (rv.data.Graphics.Path.Shape.IRoundedRectangle|null);

                    /** Shape polygon. */
                    public polygon?: (rv.data.Graphics.Path.Shape.IPolygon|null);

                    /** Shape star. */
                    public star?: (rv.data.Graphics.Path.Shape.IStar|null);

                    /** Shape arrow. */
                    public arrow?: (rv.data.Graphics.Path.Shape.IArrow|null);

                    /** Shape AdditionalData. */
                    public AdditionalData?: ("roundedRectangle"|"polygon"|"star"|"arrow");

                    /**
                     * Creates a new Shape instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Shape instance
                     */
                    public static create(properties?: rv.data.Graphics.Path.IShape): rv.data.Graphics.Path.Shape;

                    /**
                     * Encodes the specified Shape message. Does not implicitly {@link rv.data.Graphics.Path.Shape.verify|verify} messages.
                     * @param message Shape message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Path.IShape, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Shape message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.Shape.verify|verify} messages.
                     * @param message Shape message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Path.IShape, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Shape message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Shape
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.Shape;

                    /**
                     * Decodes a Shape message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Shape
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.Shape;

                    /**
                     * Verifies a Shape message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Shape message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Shape
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.Shape;

                    /**
                     * Creates a plain object from a Shape message. Also converts values to other types if specified.
                     * @param message Shape
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Path.Shape, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Shape to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Shape
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Shape {

                    /** Properties of a RoundedRectangle. */
                    interface IRoundedRectangle {

                        /** RoundedRectangle roundness */
                        roundness?: (number|null);
                    }

                    /** Represents a RoundedRectangle. */
                    class RoundedRectangle implements IRoundedRectangle {

                        /**
                         * Constructs a new RoundedRectangle.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Path.Shape.IRoundedRectangle);

                        /** RoundedRectangle roundness. */
                        public roundness: number;

                        /**
                         * Creates a new RoundedRectangle instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns RoundedRectangle instance
                         */
                        public static create(properties?: rv.data.Graphics.Path.Shape.IRoundedRectangle): rv.data.Graphics.Path.Shape.RoundedRectangle;

                        /**
                         * Encodes the specified RoundedRectangle message. Does not implicitly {@link rv.data.Graphics.Path.Shape.RoundedRectangle.verify|verify} messages.
                         * @param message RoundedRectangle message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Path.Shape.IRoundedRectangle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified RoundedRectangle message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.Shape.RoundedRectangle.verify|verify} messages.
                         * @param message RoundedRectangle message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Path.Shape.IRoundedRectangle, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a RoundedRectangle message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns RoundedRectangle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.Shape.RoundedRectangle;

                        /**
                         * Decodes a RoundedRectangle message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns RoundedRectangle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.Shape.RoundedRectangle;

                        /**
                         * Verifies a RoundedRectangle message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a RoundedRectangle message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns RoundedRectangle
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.Shape.RoundedRectangle;

                        /**
                         * Creates a plain object from a RoundedRectangle message. Also converts values to other types if specified.
                         * @param message RoundedRectangle
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Path.Shape.RoundedRectangle, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this RoundedRectangle to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for RoundedRectangle
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of an Arrow. */
                    interface IArrow {

                        /** Arrow corner */
                        corner?: (rv.data.Graphics.IPoint|null);
                    }

                    /** Represents an Arrow. */
                    class Arrow implements IArrow {

                        /**
                         * Constructs a new Arrow.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Path.Shape.IArrow);

                        /** Arrow corner. */
                        public corner?: (rv.data.Graphics.IPoint|null);

                        /**
                         * Creates a new Arrow instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Arrow instance
                         */
                        public static create(properties?: rv.data.Graphics.Path.Shape.IArrow): rv.data.Graphics.Path.Shape.Arrow;

                        /**
                         * Encodes the specified Arrow message. Does not implicitly {@link rv.data.Graphics.Path.Shape.Arrow.verify|verify} messages.
                         * @param message Arrow message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Path.Shape.IArrow, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Arrow message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.Shape.Arrow.verify|verify} messages.
                         * @param message Arrow message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Path.Shape.IArrow, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Arrow message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Arrow
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.Shape.Arrow;

                        /**
                         * Decodes an Arrow message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Arrow
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.Shape.Arrow;

                        /**
                         * Verifies an Arrow message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Arrow message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Arrow
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.Shape.Arrow;

                        /**
                         * Creates a plain object from an Arrow message. Also converts values to other types if specified.
                         * @param message Arrow
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Path.Shape.Arrow, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Arrow to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Arrow
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a Polygon. */
                    interface IPolygon {

                        /** Polygon numberSides */
                        numberSides?: (number|null);
                    }

                    /** Represents a Polygon. */
                    class Polygon implements IPolygon {

                        /**
                         * Constructs a new Polygon.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Path.Shape.IPolygon);

                        /** Polygon numberSides. */
                        public numberSides: number;

                        /**
                         * Creates a new Polygon instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Polygon instance
                         */
                        public static create(properties?: rv.data.Graphics.Path.Shape.IPolygon): rv.data.Graphics.Path.Shape.Polygon;

                        /**
                         * Encodes the specified Polygon message. Does not implicitly {@link rv.data.Graphics.Path.Shape.Polygon.verify|verify} messages.
                         * @param message Polygon message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Path.Shape.IPolygon, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Polygon message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.Shape.Polygon.verify|verify} messages.
                         * @param message Polygon message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Path.Shape.IPolygon, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Polygon message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Polygon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.Shape.Polygon;

                        /**
                         * Decodes a Polygon message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Polygon
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.Shape.Polygon;

                        /**
                         * Verifies a Polygon message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Polygon message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Polygon
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.Shape.Polygon;

                        /**
                         * Creates a plain object from a Polygon message. Also converts values to other types if specified.
                         * @param message Polygon
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Path.Shape.Polygon, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Polygon to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Polygon
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a Star. */
                    interface IStar {

                        /** Star innerRadius */
                        innerRadius?: (number|null);

                        /** Star numberPoints */
                        numberPoints?: (number|null);
                    }

                    /** Represents a Star. */
                    class Star implements IStar {

                        /**
                         * Constructs a new Star.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Path.Shape.IStar);

                        /** Star innerRadius. */
                        public innerRadius: number;

                        /** Star numberPoints. */
                        public numberPoints: number;

                        /**
                         * Creates a new Star instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Star instance
                         */
                        public static create(properties?: rv.data.Graphics.Path.Shape.IStar): rv.data.Graphics.Path.Shape.Star;

                        /**
                         * Encodes the specified Star message. Does not implicitly {@link rv.data.Graphics.Path.Shape.Star.verify|verify} messages.
                         * @param message Star message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Path.Shape.IStar, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Star message, length delimited. Does not implicitly {@link rv.data.Graphics.Path.Shape.Star.verify|verify} messages.
                         * @param message Star message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Path.Shape.IStar, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Star message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Star
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Path.Shape.Star;

                        /**
                         * Decodes a Star message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Star
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Path.Shape.Star;

                        /**
                         * Verifies a Star message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Star message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Star
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Path.Shape.Star;

                        /**
                         * Creates a plain object from a Star message. Also converts values to other types if specified.
                         * @param message Star
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Path.Shape.Star, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Star to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Star
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Type enum. */
                    enum Type {
                        TYPE_UNKNOWN = 0,
                        TYPE_RECTANGLE = 1,
                        TYPE_ELLIPSE = 2,
                        TYPE_ISOSCELES_TRIANGLE = 3,
                        TYPE_RIGHT_TRIANGLE = 4,
                        TYPE_RHOMBUS = 5,
                        TYPE_STAR = 6,
                        TYPE_POLYGON = 7,
                        TYPE_CUSTOM = 8,
                        TYPE_RIGHT_ARROW = 9,
                        TYPE_DOUBLE_ARROW = 10,
                        TYPE_ROUNDED_RECTANGLE = 11
                    }
                }
            }

            /** Properties of a Fill. */
            interface IFill {

                /** Fill enable */
                enable?: (boolean|null);

                /** Fill color */
                color?: (rv.data.IColor|null);

                /** Fill gradient */
                gradient?: (rv.data.Graphics.IGradient|null);

                /** Fill media */
                media?: (rv.data.IMedia|null);

                /** Fill backgroundEffect */
                backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);
            }

            /** Represents a Fill. */
            class Fill implements IFill {

                /**
                 * Constructs a new Fill.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IFill);

                /** Fill enable. */
                public enable: boolean;

                /** Fill color. */
                public color?: (rv.data.IColor|null);

                /** Fill gradient. */
                public gradient?: (rv.data.Graphics.IGradient|null);

                /** Fill media. */
                public media?: (rv.data.IMedia|null);

                /** Fill backgroundEffect. */
                public backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);

                /** Fill FillType. */
                public FillType?: ("color"|"gradient"|"media"|"backgroundEffect");

                /**
                 * Creates a new Fill instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Fill instance
                 */
                public static create(properties?: rv.data.Graphics.IFill): rv.data.Graphics.Fill;

                /**
                 * Encodes the specified Fill message. Does not implicitly {@link rv.data.Graphics.Fill.verify|verify} messages.
                 * @param message Fill message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IFill, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Fill message, length delimited. Does not implicitly {@link rv.data.Graphics.Fill.verify|verify} messages.
                 * @param message Fill message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IFill, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Fill message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Fill
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Fill;

                /**
                 * Decodes a Fill message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Fill
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Fill;

                /**
                 * Verifies a Fill message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Fill message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Fill
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Fill;

                /**
                 * Creates a plain object from a Fill message. Also converts values to other types if specified.
                 * @param message Fill
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Fill, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Fill to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Fill
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a BackgroundEffect. */
            interface IBackgroundEffect {

                /** BackgroundEffect backgroundBlur */
                backgroundBlur?: (rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur|null);

                /** BackgroundEffect backgroundInvert */
                backgroundInvert?: (rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert|null);
            }

            /** Represents a BackgroundEffect. */
            class BackgroundEffect implements IBackgroundEffect {

                /**
                 * Constructs a new BackgroundEffect.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IBackgroundEffect);

                /** BackgroundEffect backgroundBlur. */
                public backgroundBlur?: (rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur|null);

                /** BackgroundEffect backgroundInvert. */
                public backgroundInvert?: (rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert|null);

                /** BackgroundEffect EffectType. */
                public EffectType?: ("backgroundBlur"|"backgroundInvert");

                /**
                 * Creates a new BackgroundEffect instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BackgroundEffect instance
                 */
                public static create(properties?: rv.data.Graphics.IBackgroundEffect): rv.data.Graphics.BackgroundEffect;

                /**
                 * Encodes the specified BackgroundEffect message. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.verify|verify} messages.
                 * @param message BackgroundEffect message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IBackgroundEffect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BackgroundEffect message, length delimited. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.verify|verify} messages.
                 * @param message BackgroundEffect message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IBackgroundEffect, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BackgroundEffect message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BackgroundEffect
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.BackgroundEffect;

                /**
                 * Decodes a BackgroundEffect message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BackgroundEffect
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.BackgroundEffect;

                /**
                 * Verifies a BackgroundEffect message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BackgroundEffect message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BackgroundEffect
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.BackgroundEffect;

                /**
                 * Creates a plain object from a BackgroundEffect message. Also converts values to other types if specified.
                 * @param message BackgroundEffect
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.BackgroundEffect, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BackgroundEffect to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for BackgroundEffect
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace BackgroundEffect {

                /** Properties of a BackgroundEffectBlur. */
                interface IBackgroundEffectBlur {

                    /** BackgroundEffectBlur saturation */
                    saturation?: (number|null);

                    /** BackgroundEffectBlur blurAmount */
                    blurAmount?: (number|null);
                }

                /** Represents a BackgroundEffectBlur. */
                class BackgroundEffectBlur implements IBackgroundEffectBlur {

                    /**
                     * Constructs a new BackgroundEffectBlur.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur);

                    /** BackgroundEffectBlur saturation. */
                    public saturation: number;

                    /** BackgroundEffectBlur blurAmount. */
                    public blurAmount: number;

                    /**
                     * Creates a new BackgroundEffectBlur instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns BackgroundEffectBlur instance
                     */
                    public static create(properties?: rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur): rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur;

                    /**
                     * Encodes the specified BackgroundEffectBlur message. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur.verify|verify} messages.
                     * @param message BackgroundEffectBlur message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified BackgroundEffectBlur message, length delimited. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur.verify|verify} messages.
                     * @param message BackgroundEffectBlur message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.BackgroundEffect.IBackgroundEffectBlur, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a BackgroundEffectBlur message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns BackgroundEffectBlur
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur;

                    /**
                     * Decodes a BackgroundEffectBlur message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns BackgroundEffectBlur
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur;

                    /**
                     * Verifies a BackgroundEffectBlur message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a BackgroundEffectBlur message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns BackgroundEffectBlur
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur;

                    /**
                     * Creates a plain object from a BackgroundEffectBlur message. Also converts values to other types if specified.
                     * @param message BackgroundEffectBlur
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.BackgroundEffect.BackgroundEffectBlur, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this BackgroundEffectBlur to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for BackgroundEffectBlur
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a BackgroundEffectInvert. */
                interface IBackgroundEffectInvert {
                }

                /** Represents a BackgroundEffectInvert. */
                class BackgroundEffectInvert implements IBackgroundEffectInvert {

                    /**
                     * Constructs a new BackgroundEffectInvert.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert);

                    /**
                     * Creates a new BackgroundEffectInvert instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns BackgroundEffectInvert instance
                     */
                    public static create(properties?: rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert): rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert;

                    /**
                     * Encodes the specified BackgroundEffectInvert message. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert.verify|verify} messages.
                     * @param message BackgroundEffectInvert message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified BackgroundEffectInvert message, length delimited. Does not implicitly {@link rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert.verify|verify} messages.
                     * @param message BackgroundEffectInvert message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.BackgroundEffect.IBackgroundEffectInvert, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a BackgroundEffectInvert message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns BackgroundEffectInvert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert;

                    /**
                     * Decodes a BackgroundEffectInvert message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns BackgroundEffectInvert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert;

                    /**
                     * Verifies a BackgroundEffectInvert message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a BackgroundEffectInvert message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns BackgroundEffectInvert
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert;

                    /**
                     * Creates a plain object from a BackgroundEffectInvert message. Also converts values to other types if specified.
                     * @param message BackgroundEffectInvert
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.BackgroundEffect.BackgroundEffectInvert, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this BackgroundEffectInvert to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for BackgroundEffectInvert
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** Properties of a Gradient. */
            interface IGradient {

                /** Gradient type */
                type?: (rv.data.Graphics.Gradient.Type|null);

                /** Gradient angle */
                angle?: (number|null);

                /** Gradient length */
                length?: (number|null);

                /** Gradient stops */
                stops?: (rv.data.Graphics.Gradient.IColorStop[]|null);
            }

            /** Represents a Gradient. */
            class Gradient implements IGradient {

                /**
                 * Constructs a new Gradient.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IGradient);

                /** Gradient type. */
                public type: rv.data.Graphics.Gradient.Type;

                /** Gradient angle. */
                public angle: number;

                /** Gradient length. */
                public length: number;

                /** Gradient stops. */
                public stops: rv.data.Graphics.Gradient.IColorStop[];

                /**
                 * Creates a new Gradient instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Gradient instance
                 */
                public static create(properties?: rv.data.Graphics.IGradient): rv.data.Graphics.Gradient;

                /**
                 * Encodes the specified Gradient message. Does not implicitly {@link rv.data.Graphics.Gradient.verify|verify} messages.
                 * @param message Gradient message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IGradient, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Gradient message, length delimited. Does not implicitly {@link rv.data.Graphics.Gradient.verify|verify} messages.
                 * @param message Gradient message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IGradient, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Gradient message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Gradient
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Gradient;

                /**
                 * Decodes a Gradient message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Gradient
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Gradient;

                /**
                 * Verifies a Gradient message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Gradient message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Gradient
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Gradient;

                /**
                 * Creates a plain object from a Gradient message. Also converts values to other types if specified.
                 * @param message Gradient
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Gradient, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Gradient to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Gradient
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Gradient {

                /** Properties of a ColorStop. */
                interface IColorStop {

                    /** ColorStop color */
                    color?: (rv.data.IColor|null);

                    /** ColorStop position */
                    position?: (number|null);

                    /** ColorStop blendPoint */
                    blendPoint?: (number|null);
                }

                /** Represents a ColorStop. */
                class ColorStop implements IColorStop {

                    /**
                     * Constructs a new ColorStop.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Gradient.IColorStop);

                    /** ColorStop color. */
                    public color?: (rv.data.IColor|null);

                    /** ColorStop position. */
                    public position: number;

                    /** ColorStop blendPoint. */
                    public blendPoint: number;

                    /**
                     * Creates a new ColorStop instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ColorStop instance
                     */
                    public static create(properties?: rv.data.Graphics.Gradient.IColorStop): rv.data.Graphics.Gradient.ColorStop;

                    /**
                     * Encodes the specified ColorStop message. Does not implicitly {@link rv.data.Graphics.Gradient.ColorStop.verify|verify} messages.
                     * @param message ColorStop message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Gradient.IColorStop, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ColorStop message, length delimited. Does not implicitly {@link rv.data.Graphics.Gradient.ColorStop.verify|verify} messages.
                     * @param message ColorStop message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Gradient.IColorStop, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ColorStop message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ColorStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Gradient.ColorStop;

                    /**
                     * Decodes a ColorStop message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ColorStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Gradient.ColorStop;

                    /**
                     * Verifies a ColorStop message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ColorStop message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ColorStop
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Gradient.ColorStop;

                    /**
                     * Creates a plain object from a ColorStop message. Also converts values to other types if specified.
                     * @param message ColorStop
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Gradient.ColorStop, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ColorStop to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for ColorStop
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Type enum. */
                enum Type {
                    TYPE_LINEAR = 0,
                    TYPE_RADIAL = 1,
                    TYPE_ANGLE = 2
                }
            }

            /** Properties of a Shadow. */
            interface IShadow {

                /** Shadow style */
                style?: (rv.data.Graphics.Shadow.Style|null);

                /** Shadow angle */
                angle?: (number|null);

                /** Shadow offset */
                offset?: (number|null);

                /** Shadow radius */
                radius?: (number|null);

                /** Shadow color */
                color?: (rv.data.IColor|null);

                /** Shadow opacity */
                opacity?: (number|null);

                /** Shadow enable */
                enable?: (boolean|null);
            }

            /** Represents a Shadow. */
            class Shadow implements IShadow {

                /**
                 * Constructs a new Shadow.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IShadow);

                /** Shadow style. */
                public style: rv.data.Graphics.Shadow.Style;

                /** Shadow angle. */
                public angle: number;

                /** Shadow offset. */
                public offset: number;

                /** Shadow radius. */
                public radius: number;

                /** Shadow color. */
                public color?: (rv.data.IColor|null);

                /** Shadow opacity. */
                public opacity: number;

                /** Shadow enable. */
                public enable: boolean;

                /**
                 * Creates a new Shadow instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Shadow instance
                 */
                public static create(properties?: rv.data.Graphics.IShadow): rv.data.Graphics.Shadow;

                /**
                 * Encodes the specified Shadow message. Does not implicitly {@link rv.data.Graphics.Shadow.verify|verify} messages.
                 * @param message Shadow message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IShadow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Shadow message, length delimited. Does not implicitly {@link rv.data.Graphics.Shadow.verify|verify} messages.
                 * @param message Shadow message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IShadow, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Shadow message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Shadow
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Shadow;

                /**
                 * Decodes a Shadow message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Shadow
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Shadow;

                /**
                 * Verifies a Shadow message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Shadow message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Shadow
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Shadow;

                /**
                 * Creates a plain object from a Shadow message. Also converts values to other types if specified.
                 * @param message Shadow
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Shadow, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Shadow to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Shadow
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Shadow {

                /** Style enum. */
                enum Style {
                    STYLE_DROP = 0
                }
            }

            /** Properties of a Stroke. */
            interface IStroke {

                /** Stroke style */
                style?: (rv.data.Graphics.Stroke.Style|null);

                /** Stroke width */
                width?: (number|null);

                /** Stroke color */
                color?: (rv.data.IColor|null);

                /** Stroke pattern */
                pattern?: (number[]|null);

                /** Stroke enable */
                enable?: (boolean|null);
            }

            /** Represents a Stroke. */
            class Stroke implements IStroke {

                /**
                 * Constructs a new Stroke.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IStroke);

                /** Stroke style. */
                public style: rv.data.Graphics.Stroke.Style;

                /** Stroke width. */
                public width: number;

                /** Stroke color. */
                public color?: (rv.data.IColor|null);

                /** Stroke pattern. */
                public pattern: number[];

                /** Stroke enable. */
                public enable: boolean;

                /**
                 * Creates a new Stroke instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Stroke instance
                 */
                public static create(properties?: rv.data.Graphics.IStroke): rv.data.Graphics.Stroke;

                /**
                 * Encodes the specified Stroke message. Does not implicitly {@link rv.data.Graphics.Stroke.verify|verify} messages.
                 * @param message Stroke message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IStroke, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Stroke message, length delimited. Does not implicitly {@link rv.data.Graphics.Stroke.verify|verify} messages.
                 * @param message Stroke message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IStroke, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Stroke message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Stroke
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Stroke;

                /**
                 * Decodes a Stroke message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Stroke
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Stroke;

                /**
                 * Verifies a Stroke message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Stroke message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Stroke
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Stroke;

                /**
                 * Creates a plain object from a Stroke message. Also converts values to other types if specified.
                 * @param message Stroke
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Stroke, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Stroke to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Stroke
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Stroke {

                /** Style enum. */
                enum Style {
                    STYLE_SOLID_LINE = 0,
                    STYLE_SQUARE_DASH = 1,
                    STYLE_SHORT_DASH = 2,
                    STYLE_LONG_DASH = 3
                }
            }

            /** Properties of a Feather. */
            interface IFeather {

                /** Feather style */
                style?: (rv.data.Graphics.Feather.Style|null);

                /** Feather radius */
                radius?: (number|null);

                /** Feather enable */
                enable?: (boolean|null);
            }

            /** Represents a Feather. */
            class Feather implements IFeather {

                /**
                 * Constructs a new Feather.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IFeather);

                /** Feather style. */
                public style: rv.data.Graphics.Feather.Style;

                /** Feather radius. */
                public radius: number;

                /** Feather enable. */
                public enable: boolean;

                /**
                 * Creates a new Feather instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Feather instance
                 */
                public static create(properties?: rv.data.Graphics.IFeather): rv.data.Graphics.Feather;

                /**
                 * Encodes the specified Feather message. Does not implicitly {@link rv.data.Graphics.Feather.verify|verify} messages.
                 * @param message Feather message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IFeather, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Feather message, length delimited. Does not implicitly {@link rv.data.Graphics.Feather.verify|verify} messages.
                 * @param message Feather message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IFeather, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Feather message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Feather
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Feather;

                /**
                 * Decodes a Feather message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Feather
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Feather;

                /**
                 * Verifies a Feather message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Feather message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Feather
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Feather;

                /**
                 * Creates a plain object from a Feather message. Also converts values to other types if specified.
                 * @param message Feather
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Feather, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Feather to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Feather
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Feather {

                /** Style enum. */
                enum Style {
                    STYLE_INSIDE = 0,
                    STYLE_CENTER = 1,
                    STYLE_OUTSIDE = 2
                }
            }

            /** Properties of a Text. */
            interface IText {

                /** Text attributes */
                attributes?: (rv.data.Graphics.Text.IAttributes|null);

                /** Text shadow */
                shadow?: (rv.data.Graphics.IShadow|null);

                /** Text rtfData */
                rtfData?: (Uint8Array|null);

                /** Text verticalAlignment */
                verticalAlignment?: (rv.data.Graphics.Text.VerticalAlignment|null);

                /** Text scaleBehavior */
                scaleBehavior?: (rv.data.Graphics.Text.ScaleBehavior|null);

                /** Text margins */
                margins?: (rv.data.Graphics.IEdgeInsets|null);

                /** Text isSuperscriptStandardized */
                isSuperscriptStandardized?: (boolean|null);

                /** Text transform */
                transform?: (rv.data.Graphics.Text.Transform|null);

                /** Text transformDelimiter */
                transformDelimiter?: (string|null);

                /** Text chordPro */
                chordPro?: (rv.data.Graphics.Text.IChordPro|null);
            }

            /** Represents a Text. */
            class Text implements IText {

                /**
                 * Constructs a new Text.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Graphics.IText);

                /** Text attributes. */
                public attributes?: (rv.data.Graphics.Text.IAttributes|null);

                /** Text shadow. */
                public shadow?: (rv.data.Graphics.IShadow|null);

                /** Text rtfData. */
                public rtfData: Uint8Array;

                /** Text verticalAlignment. */
                public verticalAlignment: rv.data.Graphics.Text.VerticalAlignment;

                /** Text scaleBehavior. */
                public scaleBehavior: rv.data.Graphics.Text.ScaleBehavior;

                /** Text margins. */
                public margins?: (rv.data.Graphics.IEdgeInsets|null);

                /** Text isSuperscriptStandardized. */
                public isSuperscriptStandardized: boolean;

                /** Text transform. */
                public transform: rv.data.Graphics.Text.Transform;

                /** Text transformDelimiter. */
                public transformDelimiter: string;

                /** Text chordPro. */
                public chordPro?: (rv.data.Graphics.Text.IChordPro|null);

                /**
                 * Creates a new Text instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Text instance
                 */
                public static create(properties?: rv.data.Graphics.IText): rv.data.Graphics.Text;

                /**
                 * Encodes the specified Text message. Does not implicitly {@link rv.data.Graphics.Text.verify|verify} messages.
                 * @param message Text message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Graphics.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Text message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.verify|verify} messages.
                 * @param message Text message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Graphics.IText, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Text message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Text
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text;

                /**
                 * Decodes a Text message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Text
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text;

                /**
                 * Verifies a Text message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Text message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Text
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text;

                /**
                 * Creates a plain object from a Text message. Also converts values to other types if specified.
                 * @param message Text
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Graphics.Text, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Text to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Text
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Text {

                /** Properties of a LineFillMask. */
                interface ILineFillMask {

                    /** LineFillMask enabled */
                    enabled?: (boolean|null);

                    /** LineFillMask heightOffset */
                    heightOffset?: (number|null);

                    /** LineFillMask verticalOffset */
                    verticalOffset?: (number|null);

                    /** LineFillMask maskStyle */
                    maskStyle?: (rv.data.Graphics.Text.LineFillMask.LineMaskStyle|null);

                    /** LineFillMask widthOffset */
                    widthOffset?: (number|null);

                    /** LineFillMask horizontalOffset */
                    horizontalOffset?: (number|null);
                }

                /** Represents a LineFillMask. */
                class LineFillMask implements ILineFillMask {

                    /**
                     * Constructs a new LineFillMask.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.ILineFillMask);

                    /** LineFillMask enabled. */
                    public enabled: boolean;

                    /** LineFillMask heightOffset. */
                    public heightOffset: number;

                    /** LineFillMask verticalOffset. */
                    public verticalOffset: number;

                    /** LineFillMask maskStyle. */
                    public maskStyle: rv.data.Graphics.Text.LineFillMask.LineMaskStyle;

                    /** LineFillMask widthOffset. */
                    public widthOffset: number;

                    /** LineFillMask horizontalOffset. */
                    public horizontalOffset: number;

                    /**
                     * Creates a new LineFillMask instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns LineFillMask instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.ILineFillMask): rv.data.Graphics.Text.LineFillMask;

                    /**
                     * Encodes the specified LineFillMask message. Does not implicitly {@link rv.data.Graphics.Text.LineFillMask.verify|verify} messages.
                     * @param message LineFillMask message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.ILineFillMask, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified LineFillMask message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.LineFillMask.verify|verify} messages.
                     * @param message LineFillMask message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.ILineFillMask, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a LineFillMask message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns LineFillMask
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.LineFillMask;

                    /**
                     * Decodes a LineFillMask message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns LineFillMask
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.LineFillMask;

                    /**
                     * Verifies a LineFillMask message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a LineFillMask message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns LineFillMask
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.LineFillMask;

                    /**
                     * Creates a plain object from a LineFillMask message. Also converts values to other types if specified.
                     * @param message LineFillMask
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.LineFillMask, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this LineFillMask to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for LineFillMask
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace LineFillMask {

                    /** LineMaskStyle enum. */
                    enum LineMaskStyle {
                        LINE_MASK_STYLE_FULL_WIDTH = 0,
                        LINE_MASK_STYLE_LINE_WIDTH = 1,
                        LINE_MASK_STYLE_MAX_LINE_WIDTH = 2
                    }
                }

                /** Properties of a GradientFill. */
                interface IGradientFill {

                    /** GradientFill gradient */
                    gradient?: (rv.data.Graphics.IGradient|null);

                    /** GradientFill stretchToDocumentBounds */
                    stretchToDocumentBounds?: (boolean|null);
                }

                /** Represents a GradientFill. */
                class GradientFill implements IGradientFill {

                    /**
                     * Constructs a new GradientFill.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.IGradientFill);

                    /** GradientFill gradient. */
                    public gradient?: (rv.data.Graphics.IGradient|null);

                    /** GradientFill stretchToDocumentBounds. */
                    public stretchToDocumentBounds: boolean;

                    /**
                     * Creates a new GradientFill instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns GradientFill instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.IGradientFill): rv.data.Graphics.Text.GradientFill;

                    /**
                     * Encodes the specified GradientFill message. Does not implicitly {@link rv.data.Graphics.Text.GradientFill.verify|verify} messages.
                     * @param message GradientFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.IGradientFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified GradientFill message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.GradientFill.verify|verify} messages.
                     * @param message GradientFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.IGradientFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a GradientFill message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns GradientFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.GradientFill;

                    /**
                     * Decodes a GradientFill message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns GradientFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.GradientFill;

                    /**
                     * Verifies a GradientFill message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GradientFill message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GradientFill
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.GradientFill;

                    /**
                     * Creates a plain object from a GradientFill message. Also converts values to other types if specified.
                     * @param message GradientFill
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.GradientFill, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GradientFill to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for GradientFill
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a CutOutFill. */
                interface ICutOutFill {
                }

                /** Represents a CutOutFill. */
                class CutOutFill implements ICutOutFill {

                    /**
                     * Constructs a new CutOutFill.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.ICutOutFill);

                    /**
                     * Creates a new CutOutFill instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CutOutFill instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.ICutOutFill): rv.data.Graphics.Text.CutOutFill;

                    /**
                     * Encodes the specified CutOutFill message. Does not implicitly {@link rv.data.Graphics.Text.CutOutFill.verify|verify} messages.
                     * @param message CutOutFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.ICutOutFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CutOutFill message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.CutOutFill.verify|verify} messages.
                     * @param message CutOutFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.ICutOutFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CutOutFill message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CutOutFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.CutOutFill;

                    /**
                     * Decodes a CutOutFill message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CutOutFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.CutOutFill;

                    /**
                     * Verifies a CutOutFill message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CutOutFill message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CutOutFill
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.CutOutFill;

                    /**
                     * Creates a plain object from a CutOutFill message. Also converts values to other types if specified.
                     * @param message CutOutFill
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.CutOutFill, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CutOutFill to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for CutOutFill
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a MediaFill. */
                interface IMediaFill {

                    /** MediaFill media */
                    media?: (rv.data.IMedia|null);
                }

                /** Represents a MediaFill. */
                class MediaFill implements IMediaFill {

                    /**
                     * Constructs a new MediaFill.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.IMediaFill);

                    /** MediaFill media. */
                    public media?: (rv.data.IMedia|null);

                    /**
                     * Creates a new MediaFill instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MediaFill instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.IMediaFill): rv.data.Graphics.Text.MediaFill;

                    /**
                     * Encodes the specified MediaFill message. Does not implicitly {@link rv.data.Graphics.Text.MediaFill.verify|verify} messages.
                     * @param message MediaFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.IMediaFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MediaFill message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.MediaFill.verify|verify} messages.
                     * @param message MediaFill message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.IMediaFill, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MediaFill message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MediaFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.MediaFill;

                    /**
                     * Decodes a MediaFill message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MediaFill
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.MediaFill;

                    /**
                     * Verifies a MediaFill message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MediaFill message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MediaFill
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.MediaFill;

                    /**
                     * Creates a plain object from a MediaFill message. Also converts values to other types if specified.
                     * @param message MediaFill
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.MediaFill, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MediaFill to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for MediaFill
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a ChordPro. */
                interface IChordPro {

                    /** ChordPro enabled */
                    enabled?: (boolean|null);

                    /** ChordPro notation */
                    notation?: (rv.data.Graphics.Text.ChordPro.Notation|null);

                    /** ChordPro color */
                    color?: (rv.data.IColor|null);
                }

                /** Represents a ChordPro. */
                class ChordPro implements IChordPro {

                    /**
                     * Constructs a new ChordPro.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.IChordPro);

                    /** ChordPro enabled. */
                    public enabled: boolean;

                    /** ChordPro notation. */
                    public notation: rv.data.Graphics.Text.ChordPro.Notation;

                    /** ChordPro color. */
                    public color?: (rv.data.IColor|null);

                    /**
                     * Creates a new ChordPro instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChordPro instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.IChordPro): rv.data.Graphics.Text.ChordPro;

                    /**
                     * Encodes the specified ChordPro message. Does not implicitly {@link rv.data.Graphics.Text.ChordPro.verify|verify} messages.
                     * @param message ChordPro message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.IChordPro, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChordPro message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.ChordPro.verify|verify} messages.
                     * @param message ChordPro message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.IChordPro, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChordPro message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChordPro
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.ChordPro;

                    /**
                     * Decodes a ChordPro message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChordPro
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.ChordPro;

                    /**
                     * Verifies a ChordPro message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChordPro message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChordPro
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.ChordPro;

                    /**
                     * Creates a plain object from a ChordPro message. Also converts values to other types if specified.
                     * @param message ChordPro
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.ChordPro, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChordPro to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for ChordPro
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace ChordPro {

                    /** Notation enum. */
                    enum Notation {
                        NOTATION_CHORDS = 0,
                        NOTATION_NUMBERS = 1,
                        NOTATION_NUMERALS = 2,
                        NOTATION_DO_RE_MI = 3
                    }
                }

                /** Properties of an Attributes. */
                interface IAttributes {

                    /** Attributes font */
                    font?: (rv.data.IFont|null);

                    /** Attributes capitalization */
                    capitalization?: (rv.data.Graphics.Text.Attributes.Capitalization|null);

                    /** Attributes underlineStyle */
                    underlineStyle?: (rv.data.Graphics.Text.Attributes.IUnderline|null);

                    /** Attributes underlineColor */
                    underlineColor?: (rv.data.IColor|null);

                    /** Attributes paragraphStyle */
                    paragraphStyle?: (rv.data.Graphics.Text.Attributes.IParagraph|null);

                    /** Attributes kerning */
                    kerning?: (number|null);

                    /** Attributes superscript */
                    superscript?: (number|null);

                    /** Attributes strikethroughStyle */
                    strikethroughStyle?: (rv.data.Graphics.Text.Attributes.IUnderline|null);

                    /** Attributes strikethroughColor */
                    strikethroughColor?: (rv.data.IColor|null);

                    /** Attributes strokeWidth */
                    strokeWidth?: (number|null);

                    /** Attributes strokeColor */
                    strokeColor?: (rv.data.IColor|null);

                    /** Attributes customAttributes */
                    customAttributes?: (rv.data.Graphics.Text.Attributes.ICustomAttribute[]|null);

                    /** Attributes backgroundColor */
                    backgroundColor?: (rv.data.IColor|null);

                    /** Attributes textSolidFill */
                    textSolidFill?: (rv.data.IColor|null);

                    /** Attributes textGradientFill */
                    textGradientFill?: (rv.data.Graphics.Text.IGradientFill|null);

                    /** Attributes cutOutFill */
                    cutOutFill?: (rv.data.Graphics.Text.ICutOutFill|null);

                    /** Attributes mediaFill */
                    mediaFill?: (rv.data.Graphics.Text.IMediaFill|null);

                    /** Attributes backgroundEffect */
                    backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);
                }

                /** Represents an Attributes. */
                class Attributes implements IAttributes {

                    /**
                     * Constructs a new Attributes.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Graphics.Text.IAttributes);

                    /** Attributes font. */
                    public font?: (rv.data.IFont|null);

                    /** Attributes capitalization. */
                    public capitalization: rv.data.Graphics.Text.Attributes.Capitalization;

                    /** Attributes underlineStyle. */
                    public underlineStyle?: (rv.data.Graphics.Text.Attributes.IUnderline|null);

                    /** Attributes underlineColor. */
                    public underlineColor?: (rv.data.IColor|null);

                    /** Attributes paragraphStyle. */
                    public paragraphStyle?: (rv.data.Graphics.Text.Attributes.IParagraph|null);

                    /** Attributes kerning. */
                    public kerning: number;

                    /** Attributes superscript. */
                    public superscript: number;

                    /** Attributes strikethroughStyle. */
                    public strikethroughStyle?: (rv.data.Graphics.Text.Attributes.IUnderline|null);

                    /** Attributes strikethroughColor. */
                    public strikethroughColor?: (rv.data.IColor|null);

                    /** Attributes strokeWidth. */
                    public strokeWidth: number;

                    /** Attributes strokeColor. */
                    public strokeColor?: (rv.data.IColor|null);

                    /** Attributes customAttributes. */
                    public customAttributes: rv.data.Graphics.Text.Attributes.ICustomAttribute[];

                    /** Attributes backgroundColor. */
                    public backgroundColor?: (rv.data.IColor|null);

                    /** Attributes textSolidFill. */
                    public textSolidFill?: (rv.data.IColor|null);

                    /** Attributes textGradientFill. */
                    public textGradientFill?: (rv.data.Graphics.Text.IGradientFill|null);

                    /** Attributes cutOutFill. */
                    public cutOutFill?: (rv.data.Graphics.Text.ICutOutFill|null);

                    /** Attributes mediaFill. */
                    public mediaFill?: (rv.data.Graphics.Text.IMediaFill|null);

                    /** Attributes backgroundEffect. */
                    public backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);

                    /** Attributes fill. */
                    public fill?: ("textSolidFill"|"textGradientFill"|"cutOutFill"|"mediaFill"|"backgroundEffect");

                    /**
                     * Creates a new Attributes instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Attributes instance
                     */
                    public static create(properties?: rv.data.Graphics.Text.IAttributes): rv.data.Graphics.Text.Attributes;

                    /**
                     * Encodes the specified Attributes message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.verify|verify} messages.
                     * @param message Attributes message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Graphics.Text.IAttributes, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Attributes message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.verify|verify} messages.
                     * @param message Attributes message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Graphics.Text.IAttributes, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Attributes message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Attributes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes;

                    /**
                     * Decodes an Attributes message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Attributes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes;

                    /**
                     * Verifies an Attributes message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Attributes message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Attributes
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes;

                    /**
                     * Creates a plain object from an Attributes message. Also converts values to other types if specified.
                     * @param message Attributes
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Graphics.Text.Attributes, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Attributes to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Attributes
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Attributes {

                    /** Properties of an Underline. */
                    interface IUnderline {

                        /** Underline style */
                        style?: (rv.data.Graphics.Text.Attributes.Underline.Style|null);

                        /** Underline pattern */
                        pattern?: (rv.data.Graphics.Text.Attributes.Underline.Pattern|null);

                        /** Underline byWord */
                        byWord?: (boolean|null);
                    }

                    /** Represents an Underline. */
                    class Underline implements IUnderline {

                        /**
                         * Constructs a new Underline.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Text.Attributes.IUnderline);

                        /** Underline style. */
                        public style: rv.data.Graphics.Text.Attributes.Underline.Style;

                        /** Underline pattern. */
                        public pattern: rv.data.Graphics.Text.Attributes.Underline.Pattern;

                        /** Underline byWord. */
                        public byWord: boolean;

                        /**
                         * Creates a new Underline instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Underline instance
                         */
                        public static create(properties?: rv.data.Graphics.Text.Attributes.IUnderline): rv.data.Graphics.Text.Attributes.Underline;

                        /**
                         * Encodes the specified Underline message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Underline.verify|verify} messages.
                         * @param message Underline message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Text.Attributes.IUnderline, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Underline message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Underline.verify|verify} messages.
                         * @param message Underline message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Text.Attributes.IUnderline, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Underline message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Underline
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes.Underline;

                        /**
                         * Decodes an Underline message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Underline
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes.Underline;

                        /**
                         * Verifies an Underline message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Underline message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Underline
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes.Underline;

                        /**
                         * Creates a plain object from an Underline message. Also converts values to other types if specified.
                         * @param message Underline
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Text.Attributes.Underline, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Underline to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Underline
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace Underline {

                        /** Style enum. */
                        enum Style {
                            STYLE_NONE = 0,
                            STYLE_SINGLE = 1,
                            STYLE_THICK = 2,
                            STYLE_DOUBLE = 3
                        }

                        /** Pattern enum. */
                        enum Pattern {
                            PATTERN_SOLID = 0,
                            PATTERN_DOT = 1,
                            PATTERN_DASH = 2,
                            PATTERN_DASH_DOT = 3,
                            PATTERN_DASH_DOT_DOT = 4
                        }
                    }

                    /** Properties of a Paragraph. */
                    interface IParagraph {

                        /** Paragraph alignment */
                        alignment?: (rv.data.Graphics.Text.Attributes.Alignment|null);

                        /** Paragraph firstLineHeadIndent */
                        firstLineHeadIndent?: (number|null);

                        /** Paragraph headIndent */
                        headIndent?: (number|null);

                        /** Paragraph tailIndent */
                        tailIndent?: (number|null);

                        /** Paragraph lineHeightMultiple */
                        lineHeightMultiple?: (number|null);

                        /** Paragraph maximumLineHeight */
                        maximumLineHeight?: (number|null);

                        /** Paragraph minimumLineHeight */
                        minimumLineHeight?: (number|null);

                        /** Paragraph lineSpacing */
                        lineSpacing?: (number|null);

                        /** Paragraph paragraphSpacing */
                        paragraphSpacing?: (number|null);

                        /** Paragraph paragraphSpacingBefore */
                        paragraphSpacingBefore?: (number|null);

                        /** Paragraph tabStops */
                        tabStops?: (rv.data.Graphics.Text.Attributes.Paragraph.ITabStop[]|null);

                        /** Paragraph defaultTabInterval */
                        defaultTabInterval?: (number|null);

                        /** Paragraph textList */
                        textList?: (rv.data.Graphics.Text.Attributes.Paragraph.ITextList|null);

                        /** Paragraph textLists */
                        textLists?: (rv.data.Graphics.Text.Attributes.Paragraph.ITextList[]|null);
                    }

                    /** Represents a Paragraph. */
                    class Paragraph implements IParagraph {

                        /**
                         * Constructs a new Paragraph.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Text.Attributes.IParagraph);

                        /** Paragraph alignment. */
                        public alignment: rv.data.Graphics.Text.Attributes.Alignment;

                        /** Paragraph firstLineHeadIndent. */
                        public firstLineHeadIndent: number;

                        /** Paragraph headIndent. */
                        public headIndent: number;

                        /** Paragraph tailIndent. */
                        public tailIndent: number;

                        /** Paragraph lineHeightMultiple. */
                        public lineHeightMultiple: number;

                        /** Paragraph maximumLineHeight. */
                        public maximumLineHeight: number;

                        /** Paragraph minimumLineHeight. */
                        public minimumLineHeight: number;

                        /** Paragraph lineSpacing. */
                        public lineSpacing: number;

                        /** Paragraph paragraphSpacing. */
                        public paragraphSpacing: number;

                        /** Paragraph paragraphSpacingBefore. */
                        public paragraphSpacingBefore: number;

                        /** Paragraph tabStops. */
                        public tabStops: rv.data.Graphics.Text.Attributes.Paragraph.ITabStop[];

                        /** Paragraph defaultTabInterval. */
                        public defaultTabInterval: number;

                        /** Paragraph textList. */
                        public textList?: (rv.data.Graphics.Text.Attributes.Paragraph.ITextList|null);

                        /** Paragraph textLists. */
                        public textLists: rv.data.Graphics.Text.Attributes.Paragraph.ITextList[];

                        /**
                         * Creates a new Paragraph instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Paragraph instance
                         */
                        public static create(properties?: rv.data.Graphics.Text.Attributes.IParagraph): rv.data.Graphics.Text.Attributes.Paragraph;

                        /**
                         * Encodes the specified Paragraph message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.verify|verify} messages.
                         * @param message Paragraph message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Text.Attributes.IParagraph, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Paragraph message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.verify|verify} messages.
                         * @param message Paragraph message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Text.Attributes.IParagraph, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Paragraph message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Paragraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes.Paragraph;

                        /**
                         * Decodes a Paragraph message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Paragraph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes.Paragraph;

                        /**
                         * Verifies a Paragraph message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Paragraph message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Paragraph
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes.Paragraph;

                        /**
                         * Creates a plain object from a Paragraph message. Also converts values to other types if specified.
                         * @param message Paragraph
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Text.Attributes.Paragraph, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Paragraph to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Paragraph
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace Paragraph {

                        /** Properties of a TabStop. */
                        interface ITabStop {

                            /** TabStop location */
                            location?: (number|null);

                            /** TabStop alignment */
                            alignment?: (rv.data.Graphics.Text.Attributes.Alignment|null);
                        }

                        /** Represents a TabStop. */
                        class TabStop implements ITabStop {

                            /**
                             * Constructs a new TabStop.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Graphics.Text.Attributes.Paragraph.ITabStop);

                            /** TabStop location. */
                            public location: number;

                            /** TabStop alignment. */
                            public alignment: rv.data.Graphics.Text.Attributes.Alignment;

                            /**
                             * Creates a new TabStop instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns TabStop instance
                             */
                            public static create(properties?: rv.data.Graphics.Text.Attributes.Paragraph.ITabStop): rv.data.Graphics.Text.Attributes.Paragraph.TabStop;

                            /**
                             * Encodes the specified TabStop message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.TabStop.verify|verify} messages.
                             * @param message TabStop message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Graphics.Text.Attributes.Paragraph.ITabStop, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified TabStop message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.TabStop.verify|verify} messages.
                             * @param message TabStop message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Graphics.Text.Attributes.Paragraph.ITabStop, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a TabStop message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns TabStop
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes.Paragraph.TabStop;

                            /**
                             * Decodes a TabStop message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns TabStop
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes.Paragraph.TabStop;

                            /**
                             * Verifies a TabStop message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a TabStop message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns TabStop
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes.Paragraph.TabStop;

                            /**
                             * Creates a plain object from a TabStop message. Also converts values to other types if specified.
                             * @param message TabStop
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Graphics.Text.Attributes.Paragraph.TabStop, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this TabStop to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for TabStop
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        /** Properties of a TextList. */
                        interface ITextList {

                            /** TextList isEnabled */
                            isEnabled?: (boolean|null);

                            /** TextList numberType */
                            numberType?: (rv.data.Graphics.Text.Attributes.Paragraph.TextList.NumberType|null);

                            /** TextList prefix */
                            prefix?: (string|null);

                            /** TextList postfix */
                            postfix?: (string|null);

                            /** TextList startingNumber */
                            startingNumber?: (number|null);
                        }

                        /** Represents a TextList. */
                        class TextList implements ITextList {

                            /**
                             * Constructs a new TextList.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Graphics.Text.Attributes.Paragraph.ITextList);

                            /** TextList isEnabled. */
                            public isEnabled: boolean;

                            /** TextList numberType. */
                            public numberType: rv.data.Graphics.Text.Attributes.Paragraph.TextList.NumberType;

                            /** TextList prefix. */
                            public prefix: string;

                            /** TextList postfix. */
                            public postfix: string;

                            /** TextList startingNumber. */
                            public startingNumber: number;

                            /**
                             * Creates a new TextList instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns TextList instance
                             */
                            public static create(properties?: rv.data.Graphics.Text.Attributes.Paragraph.ITextList): rv.data.Graphics.Text.Attributes.Paragraph.TextList;

                            /**
                             * Encodes the specified TextList message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.TextList.verify|verify} messages.
                             * @param message TextList message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Graphics.Text.Attributes.Paragraph.ITextList, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified TextList message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.Paragraph.TextList.verify|verify} messages.
                             * @param message TextList message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Graphics.Text.Attributes.Paragraph.ITextList, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a TextList message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns TextList
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes.Paragraph.TextList;

                            /**
                             * Decodes a TextList message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns TextList
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes.Paragraph.TextList;

                            /**
                             * Verifies a TextList message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a TextList message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns TextList
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes.Paragraph.TextList;

                            /**
                             * Creates a plain object from a TextList message. Also converts values to other types if specified.
                             * @param message TextList
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Graphics.Text.Attributes.Paragraph.TextList, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this TextList to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for TextList
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        namespace TextList {

                            /** NumberType enum. */
                            enum NumberType {
                                NUMBER_TYPE_BOX = 0,
                                NUMBER_TYPE_CHECK = 1,
                                NUMBER_TYPE_CIRCLE = 2,
                                NUMBER_TYPE_DIAMOND = 3,
                                NUMBER_TYPE_DISC = 4,
                                NUMBER_TYPE_HYPHEN = 5,
                                NUMBER_TYPE_SQUARE = 6,
                                NUMBER_TYPE_DECIMAL = 7,
                                NUMBER_TYPE_LOWERCASE_ALPHA = 8,
                                NUMBER_TYPE_UPPERCASE_ALPHA = 9,
                                NUMBER_TYPE_LOWERCASE_ROMAN = 10,
                                NUMBER_TYPE_UPPERCASE_ROMAN = 11
                            }
                        }
                    }

                    /** Properties of a CustomAttribute. */
                    interface ICustomAttribute {

                        /** CustomAttribute range */
                        range?: (rv.data.IIntRange|null);

                        /** CustomAttribute capitalization */
                        capitalization?: (rv.data.Graphics.Text.Attributes.Capitalization|null);

                        /** CustomAttribute originalFontSize */
                        originalFontSize?: (number|null);

                        /** CustomAttribute fontScaleFactor */
                        fontScaleFactor?: (number|null);

                        /** CustomAttribute textGradientFill */
                        textGradientFill?: (rv.data.Graphics.Text.IGradientFill|null);

                        /** CustomAttribute shouldPreserveForegroundColor */
                        shouldPreserveForegroundColor?: (boolean|null);

                        /** CustomAttribute chord */
                        chord?: (string|null);

                        /** CustomAttribute cutOutFill */
                        cutOutFill?: (rv.data.Graphics.Text.ICutOutFill|null);

                        /** CustomAttribute mediaFill */
                        mediaFill?: (rv.data.Graphics.Text.IMediaFill|null);

                        /** CustomAttribute backgroundEffect */
                        backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);
                    }

                    /** Represents a CustomAttribute. */
                    class CustomAttribute implements ICustomAttribute {

                        /**
                         * Constructs a new CustomAttribute.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Graphics.Text.Attributes.ICustomAttribute);

                        /** CustomAttribute range. */
                        public range?: (rv.data.IIntRange|null);

                        /** CustomAttribute capitalization. */
                        public capitalization?: (rv.data.Graphics.Text.Attributes.Capitalization|null);

                        /** CustomAttribute originalFontSize. */
                        public originalFontSize?: (number|null);

                        /** CustomAttribute fontScaleFactor. */
                        public fontScaleFactor?: (number|null);

                        /** CustomAttribute textGradientFill. */
                        public textGradientFill?: (rv.data.Graphics.Text.IGradientFill|null);

                        /** CustomAttribute shouldPreserveForegroundColor. */
                        public shouldPreserveForegroundColor?: (boolean|null);

                        /** CustomAttribute chord. */
                        public chord?: (string|null);

                        /** CustomAttribute cutOutFill. */
                        public cutOutFill?: (rv.data.Graphics.Text.ICutOutFill|null);

                        /** CustomAttribute mediaFill. */
                        public mediaFill?: (rv.data.Graphics.Text.IMediaFill|null);

                        /** CustomAttribute backgroundEffect. */
                        public backgroundEffect?: (rv.data.Graphics.IBackgroundEffect|null);

                        /** CustomAttribute Attribute. */
                        public Attribute?: ("capitalization"|"originalFontSize"|"fontScaleFactor"|"textGradientFill"|"shouldPreserveForegroundColor"|"chord"|"cutOutFill"|"mediaFill"|"backgroundEffect");

                        /**
                         * Creates a new CustomAttribute instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns CustomAttribute instance
                         */
                        public static create(properties?: rv.data.Graphics.Text.Attributes.ICustomAttribute): rv.data.Graphics.Text.Attributes.CustomAttribute;

                        /**
                         * Encodes the specified CustomAttribute message. Does not implicitly {@link rv.data.Graphics.Text.Attributes.CustomAttribute.verify|verify} messages.
                         * @param message CustomAttribute message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Graphics.Text.Attributes.ICustomAttribute, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified CustomAttribute message, length delimited. Does not implicitly {@link rv.data.Graphics.Text.Attributes.CustomAttribute.verify|verify} messages.
                         * @param message CustomAttribute message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Graphics.Text.Attributes.ICustomAttribute, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a CustomAttribute message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns CustomAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Graphics.Text.Attributes.CustomAttribute;

                        /**
                         * Decodes a CustomAttribute message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns CustomAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Graphics.Text.Attributes.CustomAttribute;

                        /**
                         * Verifies a CustomAttribute message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a CustomAttribute message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns CustomAttribute
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Graphics.Text.Attributes.CustomAttribute;

                        /**
                         * Creates a plain object from a CustomAttribute message. Also converts values to other types if specified.
                         * @param message CustomAttribute
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Graphics.Text.Attributes.CustomAttribute, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this CustomAttribute to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for CustomAttribute
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Capitalization enum. */
                    enum Capitalization {
                        CAPITALIZATION_NONE = 0,
                        CAPITALIZATION_ALL_CAPS = 1,
                        CAPITALIZATION_SMALL_CAPS = 2,
                        CAPITALIZATION_TITLE_CASE = 3,
                        CAPITALIZATION_START_CASE = 4
                    }

                    /** Alignment enum. */
                    enum Alignment {
                        ALIGNMENT_LEFT = 0,
                        ALIGNMENT_RIGHT = 1,
                        ALIGNMENT_CENTER = 2,
                        ALIGNMENT_JUSTIFIED = 3,
                        ALIGNMENT_NATURAL = 4
                    }
                }

                /** VerticalAlignment enum. */
                enum VerticalAlignment {
                    VERTICAL_ALIGNMENT_TOP = 0,
                    VERTICAL_ALIGNMENT_MIDDLE = 1,
                    VERTICAL_ALIGNMENT_BOTTOM = 2
                }

                /** ScaleBehavior enum. */
                enum ScaleBehavior {
                    SCALE_BEHAVIOR_NONE = 0,
                    SCALE_BEHAVIOR_ADJUST_CONTAINER_HEIGHT = 1,
                    SCALE_BEHAVIOR_SCALE_FONT_DOWN = 2,
                    SCALE_BEHAVIOR_SCALE_FONT_UP = 3,
                    SCALE_BEHAVIOR_SCALE_FONT_UP_DOWN = 4
                }

                /** Transform enum. */
                enum Transform {
                    TRANSFORM_NONE = 0,
                    TRANSFORM_SINGLE_LINE = 1,
                    TRANSFORM_ONE_WORD_PER_LINE = 2,
                    TRANSFORM_ONE_CHARACTER_PER_LINE = 3,
                    TRANSFORM_REPLACE_LINE_RETURNS = 4
                }
            }
        }

        /** Properties of a Media. */
        interface IMedia {

            /** Media uuid */
            uuid?: (rv.data.IUUID|null);

            /** Media url */
            url?: (rv.data.IURL|null);

            /** Media metadata */
            metadata?: (rv.data.Media.IMetadata|null);

            /** Media audio */
            audio?: (rv.data.Media.IAudioTypeProperties|null);

            /** Media image */
            image?: (rv.data.Media.IImageTypeProperties|null);

            /** Media video */
            video?: (rv.data.Media.IVideoTypeProperties|null);

            /** Media liveVideo */
            liveVideo?: (rv.data.Media.ILiveVideoTypeProperties|null);

            /** Media webContent */
            webContent?: (rv.data.Media.IWebContentTypeProperties|null);
        }

        /** Represents a Media. */
        class Media implements IMedia {

            /**
             * Constructs a new Media.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IMedia);

            /** Media uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Media url. */
            public url?: (rv.data.IURL|null);

            /** Media metadata. */
            public metadata?: (rv.data.Media.IMetadata|null);

            /** Media audio. */
            public audio?: (rv.data.Media.IAudioTypeProperties|null);

            /** Media image. */
            public image?: (rv.data.Media.IImageTypeProperties|null);

            /** Media video. */
            public video?: (rv.data.Media.IVideoTypeProperties|null);

            /** Media liveVideo. */
            public liveVideo?: (rv.data.Media.ILiveVideoTypeProperties|null);

            /** Media webContent. */
            public webContent?: (rv.data.Media.IWebContentTypeProperties|null);

            /** Media TypeProperties. */
            public TypeProperties?: ("audio"|"image"|"video"|"liveVideo"|"webContent");

            /**
             * Creates a new Media instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Media instance
             */
            public static create(properties?: rv.data.IMedia): rv.data.Media;

            /**
             * Encodes the specified Media message. Does not implicitly {@link rv.data.Media.verify|verify} messages.
             * @param message Media message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IMedia, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Media message, length delimited. Does not implicitly {@link rv.data.Media.verify|verify} messages.
             * @param message Media message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IMedia, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Media message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Media
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media;

            /**
             * Decodes a Media message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Media
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media;

            /**
             * Verifies a Media message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Media message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Media
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Media;

            /**
             * Creates a plain object from a Media message. Also converts values to other types if specified.
             * @param message Media
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Media, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Media to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Media
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Media {

            /** Properties of a Metadata. */
            interface IMetadata {

                /** Metadata manufactureName */
                manufactureName?: (string|null);

                /** Metadata manufactureUrl */
                manufactureUrl?: (rv.data.IURL|null);

                /** Metadata information */
                information?: (string|null);

                /** Metadata artist */
                artist?: (string|null);

                /** Metadata format */
                format?: (string|null);
            }

            /** Represents a Metadata. */
            class Metadata implements IMetadata {

                /**
                 * Constructs a new Metadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IMetadata);

                /** Metadata manufactureName. */
                public manufactureName: string;

                /** Metadata manufactureUrl. */
                public manufactureUrl?: (rv.data.IURL|null);

                /** Metadata information. */
                public information: string;

                /** Metadata artist. */
                public artist: string;

                /** Metadata format. */
                public format: string;

                /**
                 * Creates a new Metadata instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Metadata instance
                 */
                public static create(properties?: rv.data.Media.IMetadata): rv.data.Media.Metadata;

                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link rv.data.Media.Metadata.verify|verify} messages.
                 * @param message Metadata message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Metadata message, length delimited. Does not implicitly {@link rv.data.Media.Metadata.verify|verify} messages.
                 * @param message Metadata message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.Metadata;

                /**
                 * Decodes a Metadata message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.Metadata;

                /**
                 * Verifies a Metadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Metadata
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.Metadata;

                /**
                 * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                 * @param message Metadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.Metadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Metadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Metadata
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a VideoDevice. */
            interface IVideoDevice {

                /** VideoDevice type */
                type?: (rv.data.Media.VideoDevice.Type|null);

                /** VideoDevice name */
                name?: (string|null);

                /** VideoDevice uniqueId */
                uniqueId?: (string|null);

                /** VideoDevice modelId */
                modelId?: (string|null);

                /** VideoDevice formatIndex */
                formatIndex?: (number|null);

                /** VideoDevice audioRouting */
                audioRouting?: (rv.data.DigitalAudio.Device.IRouting|null);
            }

            /** Represents a VideoDevice. */
            class VideoDevice implements IVideoDevice {

                /**
                 * Constructs a new VideoDevice.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IVideoDevice);

                /** VideoDevice type. */
                public type: rv.data.Media.VideoDevice.Type;

                /** VideoDevice name. */
                public name: string;

                /** VideoDevice uniqueId. */
                public uniqueId: string;

                /** VideoDevice modelId. */
                public modelId: string;

                /** VideoDevice formatIndex. */
                public formatIndex: number;

                /** VideoDevice audioRouting. */
                public audioRouting?: (rv.data.DigitalAudio.Device.IRouting|null);

                /**
                 * Creates a new VideoDevice instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns VideoDevice instance
                 */
                public static create(properties?: rv.data.Media.IVideoDevice): rv.data.Media.VideoDevice;

                /**
                 * Encodes the specified VideoDevice message. Does not implicitly {@link rv.data.Media.VideoDevice.verify|verify} messages.
                 * @param message VideoDevice message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IVideoDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified VideoDevice message, length delimited. Does not implicitly {@link rv.data.Media.VideoDevice.verify|verify} messages.
                 * @param message VideoDevice message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IVideoDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a VideoDevice message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns VideoDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.VideoDevice;

                /**
                 * Decodes a VideoDevice message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns VideoDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.VideoDevice;

                /**
                 * Verifies a VideoDevice message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a VideoDevice message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns VideoDevice
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.VideoDevice;

                /**
                 * Creates a plain object from a VideoDevice message. Also converts values to other types if specified.
                 * @param message VideoDevice
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.VideoDevice, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this VideoDevice to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for VideoDevice
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace VideoDevice {

                /** Type enum. */
                enum Type {
                    TYPE_GENERIC = 0,
                    TYPE_DIRECTSHOW = 1,
                    TYPE_BLACKMAGIC = 2,
                    TYPE_AJA = 3,
                    TYPE_AV = 4,
                    TYPE_SYPHON = 5,
                    TYPE_NDI = 6,
                    TYPE_BLUEFISH = 7
                }
            }

            /** Properties of an AudioDevice. */
            interface IAudioDevice {

                /** AudioDevice name */
                name?: (string|null);

                /** AudioDevice uniqueId */
                uniqueId?: (string|null);

                /** AudioDevice modelId */
                modelId?: (string|null);

                /** AudioDevice channelCount */
                channelCount?: (number|null);
            }

            /** Represents an AudioDevice. */
            class AudioDevice implements IAudioDevice {

                /**
                 * Constructs a new AudioDevice.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IAudioDevice);

                /** AudioDevice name. */
                public name: string;

                /** AudioDevice uniqueId. */
                public uniqueId: string;

                /** AudioDevice modelId. */
                public modelId: string;

                /** AudioDevice channelCount. */
                public channelCount: number;

                /**
                 * Creates a new AudioDevice instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AudioDevice instance
                 */
                public static create(properties?: rv.data.Media.IAudioDevice): rv.data.Media.AudioDevice;

                /**
                 * Encodes the specified AudioDevice message. Does not implicitly {@link rv.data.Media.AudioDevice.verify|verify} messages.
                 * @param message AudioDevice message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IAudioDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AudioDevice message, length delimited. Does not implicitly {@link rv.data.Media.AudioDevice.verify|verify} messages.
                 * @param message AudioDevice message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IAudioDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AudioDevice message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AudioDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.AudioDevice;

                /**
                 * Decodes an AudioDevice message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AudioDevice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.AudioDevice;

                /**
                 * Verifies an AudioDevice message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AudioDevice message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AudioDevice
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.AudioDevice;

                /**
                 * Creates a plain object from an AudioDevice message. Also converts values to other types if specified.
                 * @param message AudioDevice
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.AudioDevice, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AudioDevice to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for AudioDevice
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an Audio. */
            interface IAudio {
            }

            /** Represents an Audio. */
            class Audio implements IAudio {

                /**
                 * Constructs a new Audio.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IAudio);

                /**
                 * Creates a new Audio instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Audio instance
                 */
                public static create(properties?: rv.data.Media.IAudio): rv.data.Media.Audio;

                /**
                 * Encodes the specified Audio message. Does not implicitly {@link rv.data.Media.Audio.verify|verify} messages.
                 * @param message Audio message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IAudio, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Audio message, length delimited. Does not implicitly {@link rv.data.Media.Audio.verify|verify} messages.
                 * @param message Audio message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IAudio, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Audio message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Audio
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.Audio;

                /**
                 * Decodes an Audio message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Audio
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.Audio;

                /**
                 * Verifies an Audio message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Audio message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Audio
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.Audio;

                /**
                 * Creates a plain object from an Audio message. Also converts values to other types if specified.
                 * @param message Audio
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.Audio, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Audio to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Audio
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Audio {

                /** Properties of a Channel. */
                interface IChannel {

                    /** Channel index */
                    index?: (number|null);

                    /** Channel muted */
                    muted?: (boolean|null);

                    /** Channel volume */
                    volume?: (number|null);

                    /** Channel compressLimit */
                    compressLimit?: (boolean|null);

                    /** Channel outputs */
                    outputs?: (rv.data.Media.Audio.Channel.IOutput[]|null);
                }

                /** Represents a Channel. */
                class Channel implements IChannel {

                    /**
                     * Constructs a new Channel.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Media.Audio.IChannel);

                    /** Channel index. */
                    public index: number;

                    /** Channel muted. */
                    public muted: boolean;

                    /** Channel volume. */
                    public volume: number;

                    /** Channel compressLimit. */
                    public compressLimit: boolean;

                    /** Channel outputs. */
                    public outputs: rv.data.Media.Audio.Channel.IOutput[];

                    /**
                     * Creates a new Channel instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Channel instance
                     */
                    public static create(properties?: rv.data.Media.Audio.IChannel): rv.data.Media.Audio.Channel;

                    /**
                     * Encodes the specified Channel message. Does not implicitly {@link rv.data.Media.Audio.Channel.verify|verify} messages.
                     * @param message Channel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Media.Audio.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Channel message, length delimited. Does not implicitly {@link rv.data.Media.Audio.Channel.verify|verify} messages.
                     * @param message Channel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Media.Audio.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Channel message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.Audio.Channel;

                    /**
                     * Decodes a Channel message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.Audio.Channel;

                    /**
                     * Verifies a Channel message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Channel
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Media.Audio.Channel;

                    /**
                     * Creates a plain object from a Channel message. Also converts values to other types if specified.
                     * @param message Channel
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Media.Audio.Channel, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Channel to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Channel
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Channel {

                    /** Properties of an Output. */
                    interface IOutput {

                        /** Output channelIndex */
                        channelIndex?: (number|null);
                    }

                    /** Represents an Output. */
                    class Output implements IOutput {

                        /**
                         * Constructs a new Output.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Media.Audio.Channel.IOutput);

                        /** Output channelIndex. */
                        public channelIndex: number;

                        /**
                         * Creates a new Output instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Output instance
                         */
                        public static create(properties?: rv.data.Media.Audio.Channel.IOutput): rv.data.Media.Audio.Channel.Output;

                        /**
                         * Encodes the specified Output message. Does not implicitly {@link rv.data.Media.Audio.Channel.Output.verify|verify} messages.
                         * @param message Output message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Media.Audio.Channel.IOutput, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Output message, length delimited. Does not implicitly {@link rv.data.Media.Audio.Channel.Output.verify|verify} messages.
                         * @param message Output message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Media.Audio.Channel.IOutput, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Output message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Output
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.Audio.Channel.Output;

                        /**
                         * Decodes an Output message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Output
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.Audio.Channel.Output;

                        /**
                         * Verifies an Output message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Output message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Output
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Media.Audio.Channel.Output;

                        /**
                         * Creates a plain object from an Output message. Also converts values to other types if specified.
                         * @param message Output
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Media.Audio.Channel.Output, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Output to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Output
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }
                }
            }

            /** Properties of an AudioProperties. */
            interface IAudioProperties {

                /** AudioProperties volume */
                volume?: (number|null);

                /** AudioProperties audioChannels */
                audioChannels?: (rv.data.Media.Audio.IChannel[]|null);

                /** AudioProperties isCustomMapping */
                isCustomMapping?: (boolean|null);
            }

            /** Represents an AudioProperties. */
            class AudioProperties implements IAudioProperties {

                /**
                 * Constructs a new AudioProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IAudioProperties);

                /** AudioProperties volume. */
                public volume: number;

                /** AudioProperties audioChannels. */
                public audioChannels: rv.data.Media.Audio.IChannel[];

                /** AudioProperties isCustomMapping. */
                public isCustomMapping: boolean;

                /**
                 * Creates a new AudioProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AudioProperties instance
                 */
                public static create(properties?: rv.data.Media.IAudioProperties): rv.data.Media.AudioProperties;

                /**
                 * Encodes the specified AudioProperties message. Does not implicitly {@link rv.data.Media.AudioProperties.verify|verify} messages.
                 * @param message AudioProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IAudioProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AudioProperties message, length delimited. Does not implicitly {@link rv.data.Media.AudioProperties.verify|verify} messages.
                 * @param message AudioProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IAudioProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AudioProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AudioProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.AudioProperties;

                /**
                 * Decodes an AudioProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AudioProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.AudioProperties;

                /**
                 * Verifies an AudioProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AudioProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AudioProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.AudioProperties;

                /**
                 * Creates a plain object from an AudioProperties message. Also converts values to other types if specified.
                 * @param message AudioProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.AudioProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AudioProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for AudioProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a TransportProperties. */
            interface ITransportProperties {

                /** TransportProperties playRate */
                playRate?: (number|null);

                /** TransportProperties inPoint */
                inPoint?: (number|null);

                /** TransportProperties outPoint */
                outPoint?: (number|null);

                /** TransportProperties fadeInDuration */
                fadeInDuration?: (number|null);

                /** TransportProperties fadeOutDuration */
                fadeOutDuration?: (number|null);

                /** TransportProperties shouldFadeIn */
                shouldFadeIn?: (boolean|null);

                /** TransportProperties shouldFadeOut */
                shouldFadeOut?: (boolean|null);

                /** TransportProperties endPoint */
                endPoint?: (number|null);

                /** TransportProperties playbackBehavior */
                playbackBehavior?: (rv.data.Media.TransportProperties.PlaybackBehavior|null);

                /** TransportProperties loopTime */
                loopTime?: (number|null);

                /** TransportProperties timesToLoop */
                timesToLoop?: (number|null);

                /** TransportProperties retrigger */
                retrigger?: (rv.data.Media.TransportProperties.RetriggerSetting|null);
            }

            /** Represents a TransportProperties. */
            class TransportProperties implements ITransportProperties {

                /**
                 * Constructs a new TransportProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.ITransportProperties);

                /** TransportProperties playRate. */
                public playRate: number;

                /** TransportProperties inPoint. */
                public inPoint: number;

                /** TransportProperties outPoint. */
                public outPoint: number;

                /** TransportProperties fadeInDuration. */
                public fadeInDuration: number;

                /** TransportProperties fadeOutDuration. */
                public fadeOutDuration: number;

                /** TransportProperties shouldFadeIn. */
                public shouldFadeIn: boolean;

                /** TransportProperties shouldFadeOut. */
                public shouldFadeOut: boolean;

                /** TransportProperties endPoint. */
                public endPoint: number;

                /** TransportProperties playbackBehavior. */
                public playbackBehavior: rv.data.Media.TransportProperties.PlaybackBehavior;

                /** TransportProperties loopTime. */
                public loopTime: number;

                /** TransportProperties timesToLoop. */
                public timesToLoop: number;

                /** TransportProperties retrigger. */
                public retrigger: rv.data.Media.TransportProperties.RetriggerSetting;

                /**
                 * Creates a new TransportProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TransportProperties instance
                 */
                public static create(properties?: rv.data.Media.ITransportProperties): rv.data.Media.TransportProperties;

                /**
                 * Encodes the specified TransportProperties message. Does not implicitly {@link rv.data.Media.TransportProperties.verify|verify} messages.
                 * @param message TransportProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.ITransportProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TransportProperties message, length delimited. Does not implicitly {@link rv.data.Media.TransportProperties.verify|verify} messages.
                 * @param message TransportProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.ITransportProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TransportProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TransportProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.TransportProperties;

                /**
                 * Decodes a TransportProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TransportProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.TransportProperties;

                /**
                 * Verifies a TransportProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TransportProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TransportProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.TransportProperties;

                /**
                 * Creates a plain object from a TransportProperties message. Also converts values to other types if specified.
                 * @param message TransportProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.TransportProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TransportProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TransportProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace TransportProperties {

                /** PlaybackBehavior enum. */
                enum PlaybackBehavior {
                    PLAYBACK_BEHAVIOR_STOP = 0,
                    PLAYBACK_BEHAVIOR_LOOP = 1,
                    PLAYBACK_BEHAVIOR_LOOP_FOR_COUNT = 2,
                    PLAYBACK_BEHAVIOR_LOOP_FOR_TIME = 3
                }

                /** RetriggerSetting enum. */
                enum RetriggerSetting {
                    RETRIGGER_SETTING_UNSET = 0,
                    RETRIGGER_SETTING_ALWAYS = 1,
                    RETRIGGER_SETTING_NEVER = 2,
                    RETRIGGER_SETTING_AUTOMATIC = 3
                }
            }

            /** Properties of a DrawingProperties. */
            interface IDrawingProperties {

                /** DrawingProperties scaleBehavior */
                scaleBehavior?: (rv.data.Media.ScaleBehavior|null);

                /** DrawingProperties isBlurred */
                isBlurred?: (boolean|null);

                /** DrawingProperties scaleAlignment */
                scaleAlignment?: (rv.data.Media.ScaleAlignment|null);

                /** DrawingProperties flippedHorizontally */
                flippedHorizontally?: (boolean|null);

                /** DrawingProperties flippedVertically */
                flippedVertically?: (boolean|null);

                /** DrawingProperties naturalSize */
                naturalSize?: (rv.data.Graphics.ISize|null);

                /** DrawingProperties customImageRotation */
                customImageRotation?: (number|null);

                /** DrawingProperties customImageBounds */
                customImageBounds?: (rv.data.Graphics.IRect|null);

                /** DrawingProperties customImageAspectLocked */
                customImageAspectLocked?: (boolean|null);

                /** DrawingProperties alphaInverted */
                alphaInverted?: (boolean|null);

                /** DrawingProperties nativeRotation */
                nativeRotation?: (rv.data.Media.DrawingProperties.NativeRotationType|null);

                /** DrawingProperties selectedEffectPresetUuid */
                selectedEffectPresetUuid?: (rv.data.IUUID|null);

                /** DrawingProperties effects */
                effects?: (rv.data.IEffect[]|null);

                /** DrawingProperties cropEnable */
                cropEnable?: (boolean|null);

                /** DrawingProperties cropInsets */
                cropInsets?: (rv.data.Graphics.IEdgeInsets|null);

                /** DrawingProperties alphaType */
                alphaType?: (rv.data.AlphaType|null);
            }

            /** Represents a DrawingProperties. */
            class DrawingProperties implements IDrawingProperties {

                /**
                 * Constructs a new DrawingProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IDrawingProperties);

                /** DrawingProperties scaleBehavior. */
                public scaleBehavior: rv.data.Media.ScaleBehavior;

                /** DrawingProperties isBlurred. */
                public isBlurred: boolean;

                /** DrawingProperties scaleAlignment. */
                public scaleAlignment: rv.data.Media.ScaleAlignment;

                /** DrawingProperties flippedHorizontally. */
                public flippedHorizontally: boolean;

                /** DrawingProperties flippedVertically. */
                public flippedVertically: boolean;

                /** DrawingProperties naturalSize. */
                public naturalSize?: (rv.data.Graphics.ISize|null);

                /** DrawingProperties customImageRotation. */
                public customImageRotation: number;

                /** DrawingProperties customImageBounds. */
                public customImageBounds?: (rv.data.Graphics.IRect|null);

                /** DrawingProperties customImageAspectLocked. */
                public customImageAspectLocked: boolean;

                /** DrawingProperties alphaInverted. */
                public alphaInverted: boolean;

                /** DrawingProperties nativeRotation. */
                public nativeRotation: rv.data.Media.DrawingProperties.NativeRotationType;

                /** DrawingProperties selectedEffectPresetUuid. */
                public selectedEffectPresetUuid?: (rv.data.IUUID|null);

                /** DrawingProperties effects. */
                public effects: rv.data.IEffect[];

                /** DrawingProperties cropEnable. */
                public cropEnable: boolean;

                /** DrawingProperties cropInsets. */
                public cropInsets?: (rv.data.Graphics.IEdgeInsets|null);

                /** DrawingProperties alphaType. */
                public alphaType: rv.data.AlphaType;

                /**
                 * Creates a new DrawingProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DrawingProperties instance
                 */
                public static create(properties?: rv.data.Media.IDrawingProperties): rv.data.Media.DrawingProperties;

                /**
                 * Encodes the specified DrawingProperties message. Does not implicitly {@link rv.data.Media.DrawingProperties.verify|verify} messages.
                 * @param message DrawingProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IDrawingProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrawingProperties message, length delimited. Does not implicitly {@link rv.data.Media.DrawingProperties.verify|verify} messages.
                 * @param message DrawingProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IDrawingProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrawingProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DrawingProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.DrawingProperties;

                /**
                 * Decodes a DrawingProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DrawingProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.DrawingProperties;

                /**
                 * Verifies a DrawingProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DrawingProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DrawingProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.DrawingProperties;

                /**
                 * Creates a plain object from a DrawingProperties message. Also converts values to other types if specified.
                 * @param message DrawingProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.DrawingProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrawingProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for DrawingProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace DrawingProperties {

                /** NativeRotationType enum. */
                enum NativeRotationType {
                    NATIVE_ROTATION_TYPE_ROTATE_STANDARD = 0,
                    NATIVE_ROTATION_TYPE_ROTATE_90 = 90,
                    NATIVE_ROTATION_TYPE_ROTATE_180 = 180,
                    NATIVE_ROTATION_TYPE_ROTATE_270 = 270
                }
            }

            /** Properties of a VideoProperties. */
            interface IVideoProperties {

                /** VideoProperties frameRate */
                frameRate?: (number|null);

                /** VideoProperties fieldType */
                fieldType?: (rv.data.Media.VideoProperties.FieldType|null);

                /** VideoProperties thumbnailPosition */
                thumbnailPosition?: (number|null);

                /** VideoProperties endBehavior */
                endBehavior?: (rv.data.Media.VideoProperties.EndBehavior|null);

                /** VideoProperties softLoop */
                softLoop?: (boolean|null);

                /** VideoProperties softLoopDuration */
                softLoopDuration?: (number|null);
            }

            /** Represents a VideoProperties. */
            class VideoProperties implements IVideoProperties {

                /**
                 * Constructs a new VideoProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IVideoProperties);

                /** VideoProperties frameRate. */
                public frameRate: number;

                /** VideoProperties fieldType. */
                public fieldType: rv.data.Media.VideoProperties.FieldType;

                /** VideoProperties thumbnailPosition. */
                public thumbnailPosition: number;

                /** VideoProperties endBehavior. */
                public endBehavior: rv.data.Media.VideoProperties.EndBehavior;

                /** VideoProperties softLoop. */
                public softLoop: boolean;

                /** VideoProperties softLoopDuration. */
                public softLoopDuration: number;

                /**
                 * Creates a new VideoProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns VideoProperties instance
                 */
                public static create(properties?: rv.data.Media.IVideoProperties): rv.data.Media.VideoProperties;

                /**
                 * Encodes the specified VideoProperties message. Does not implicitly {@link rv.data.Media.VideoProperties.verify|verify} messages.
                 * @param message VideoProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IVideoProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified VideoProperties message, length delimited. Does not implicitly {@link rv.data.Media.VideoProperties.verify|verify} messages.
                 * @param message VideoProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IVideoProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a VideoProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns VideoProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.VideoProperties;

                /**
                 * Decodes a VideoProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns VideoProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.VideoProperties;

                /**
                 * Verifies a VideoProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a VideoProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns VideoProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.VideoProperties;

                /**
                 * Creates a plain object from a VideoProperties message. Also converts values to other types if specified.
                 * @param message VideoProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.VideoProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this VideoProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for VideoProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace VideoProperties {

                /** EndBehavior enum. */
                enum EndBehavior {
                    END_BEHAVIOR_STOP = 0,
                    END_BEHAVIOR_STOP_ON_BLACK = 1,
                    END_BEHAVIOR_STOP_ON_CLEAR = 2,
                    END_BEHAVIOR_FADE_TO_BLACK = 3,
                    END_BEHAVIOR_FADE_TO_CLEAR = 4
                }

                /** FieldType enum. */
                enum FieldType {
                    FIELD_TYPE_UNKNOWN = 0,
                    FIELD_TYPE_PROGRESSIVE = 1,
                    FIELD_TYPE_INTERLACED_UPPER_FIRST = 2,
                    FIELD_TYPE_INTERLACED_LOWER_FIRST = 3
                }
            }

            /** Properties of a LiveVideoProperties. */
            interface ILiveVideoProperties {

                /** LiveVideoProperties videoDevice */
                videoDevice?: (rv.data.Media.IVideoDevice|null);

                /** LiveVideoProperties audioDevice */
                audioDevice?: (rv.data.Media.IAudioDevice|null);

                /** LiveVideoProperties liveVideoIndex */
                liveVideoIndex?: (number|null);
            }

            /** Represents a LiveVideoProperties. */
            class LiveVideoProperties implements ILiveVideoProperties {

                /**
                 * Constructs a new LiveVideoProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.ILiveVideoProperties);

                /** LiveVideoProperties videoDevice. */
                public videoDevice?: (rv.data.Media.IVideoDevice|null);

                /** LiveVideoProperties audioDevice. */
                public audioDevice?: (rv.data.Media.IAudioDevice|null);

                /** LiveVideoProperties liveVideoIndex. */
                public liveVideoIndex: number;

                /**
                 * Creates a new LiveVideoProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LiveVideoProperties instance
                 */
                public static create(properties?: rv.data.Media.ILiveVideoProperties): rv.data.Media.LiveVideoProperties;

                /**
                 * Encodes the specified LiveVideoProperties message. Does not implicitly {@link rv.data.Media.LiveVideoProperties.verify|verify} messages.
                 * @param message LiveVideoProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.ILiveVideoProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LiveVideoProperties message, length delimited. Does not implicitly {@link rv.data.Media.LiveVideoProperties.verify|verify} messages.
                 * @param message LiveVideoProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.ILiveVideoProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LiveVideoProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LiveVideoProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.LiveVideoProperties;

                /**
                 * Decodes a LiveVideoProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LiveVideoProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.LiveVideoProperties;

                /**
                 * Verifies a LiveVideoProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LiveVideoProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LiveVideoProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.LiveVideoProperties;

                /**
                 * Creates a plain object from a LiveVideoProperties message. Also converts values to other types if specified.
                 * @param message LiveVideoProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.LiveVideoProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LiveVideoProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for LiveVideoProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an AudioTypeProperties. */
            interface IAudioTypeProperties {

                /** AudioTypeProperties audio */
                audio?: (rv.data.Media.IAudioProperties|null);

                /** AudioTypeProperties transport */
                transport?: (rv.data.Media.ITransportProperties|null);

                /** AudioTypeProperties file */
                file?: (rv.data.IFileProperties|null);
            }

            /** Represents an AudioTypeProperties. */
            class AudioTypeProperties implements IAudioTypeProperties {

                /**
                 * Constructs a new AudioTypeProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IAudioTypeProperties);

                /** AudioTypeProperties audio. */
                public audio?: (rv.data.Media.IAudioProperties|null);

                /** AudioTypeProperties transport. */
                public transport?: (rv.data.Media.ITransportProperties|null);

                /** AudioTypeProperties file. */
                public file?: (rv.data.IFileProperties|null);

                /**
                 * Creates a new AudioTypeProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AudioTypeProperties instance
                 */
                public static create(properties?: rv.data.Media.IAudioTypeProperties): rv.data.Media.AudioTypeProperties;

                /**
                 * Encodes the specified AudioTypeProperties message. Does not implicitly {@link rv.data.Media.AudioTypeProperties.verify|verify} messages.
                 * @param message AudioTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IAudioTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AudioTypeProperties message, length delimited. Does not implicitly {@link rv.data.Media.AudioTypeProperties.verify|verify} messages.
                 * @param message AudioTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IAudioTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AudioTypeProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AudioTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.AudioTypeProperties;

                /**
                 * Decodes an AudioTypeProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AudioTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.AudioTypeProperties;

                /**
                 * Verifies an AudioTypeProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AudioTypeProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AudioTypeProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.AudioTypeProperties;

                /**
                 * Creates a plain object from an AudioTypeProperties message. Also converts values to other types if specified.
                 * @param message AudioTypeProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.AudioTypeProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AudioTypeProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for AudioTypeProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of an ImageTypeProperties. */
            interface IImageTypeProperties {

                /** ImageTypeProperties drawing */
                drawing?: (rv.data.Media.IDrawingProperties|null);

                /** ImageTypeProperties file */
                file?: (rv.data.IFileProperties|null);
            }

            /** Represents an ImageTypeProperties. */
            class ImageTypeProperties implements IImageTypeProperties {

                /**
                 * Constructs a new ImageTypeProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IImageTypeProperties);

                /** ImageTypeProperties drawing. */
                public drawing?: (rv.data.Media.IDrawingProperties|null);

                /** ImageTypeProperties file. */
                public file?: (rv.data.IFileProperties|null);

                /**
                 * Creates a new ImageTypeProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ImageTypeProperties instance
                 */
                public static create(properties?: rv.data.Media.IImageTypeProperties): rv.data.Media.ImageTypeProperties;

                /**
                 * Encodes the specified ImageTypeProperties message. Does not implicitly {@link rv.data.Media.ImageTypeProperties.verify|verify} messages.
                 * @param message ImageTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IImageTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ImageTypeProperties message, length delimited. Does not implicitly {@link rv.data.Media.ImageTypeProperties.verify|verify} messages.
                 * @param message ImageTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IImageTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ImageTypeProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ImageTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.ImageTypeProperties;

                /**
                 * Decodes an ImageTypeProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ImageTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.ImageTypeProperties;

                /**
                 * Verifies an ImageTypeProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ImageTypeProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ImageTypeProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.ImageTypeProperties;

                /**
                 * Creates a plain object from an ImageTypeProperties message. Also converts values to other types if specified.
                 * @param message ImageTypeProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.ImageTypeProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ImageTypeProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ImageTypeProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a VideoTypeProperties. */
            interface IVideoTypeProperties {

                /** VideoTypeProperties drawing */
                drawing?: (rv.data.Media.IDrawingProperties|null);

                /** VideoTypeProperties audio */
                audio?: (rv.data.Media.IAudioProperties|null);

                /** VideoTypeProperties transport */
                transport?: (rv.data.Media.ITransportProperties|null);

                /** VideoTypeProperties video */
                video?: (rv.data.Media.IVideoProperties|null);

                /** VideoTypeProperties file */
                file?: (rv.data.IFileProperties|null);
            }

            /** Represents a VideoTypeProperties. */
            class VideoTypeProperties implements IVideoTypeProperties {

                /**
                 * Constructs a new VideoTypeProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IVideoTypeProperties);

                /** VideoTypeProperties drawing. */
                public drawing?: (rv.data.Media.IDrawingProperties|null);

                /** VideoTypeProperties audio. */
                public audio?: (rv.data.Media.IAudioProperties|null);

                /** VideoTypeProperties transport. */
                public transport?: (rv.data.Media.ITransportProperties|null);

                /** VideoTypeProperties video. */
                public video?: (rv.data.Media.IVideoProperties|null);

                /** VideoTypeProperties file. */
                public file?: (rv.data.IFileProperties|null);

                /**
                 * Creates a new VideoTypeProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns VideoTypeProperties instance
                 */
                public static create(properties?: rv.data.Media.IVideoTypeProperties): rv.data.Media.VideoTypeProperties;

                /**
                 * Encodes the specified VideoTypeProperties message. Does not implicitly {@link rv.data.Media.VideoTypeProperties.verify|verify} messages.
                 * @param message VideoTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IVideoTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified VideoTypeProperties message, length delimited. Does not implicitly {@link rv.data.Media.VideoTypeProperties.verify|verify} messages.
                 * @param message VideoTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IVideoTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a VideoTypeProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns VideoTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.VideoTypeProperties;

                /**
                 * Decodes a VideoTypeProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns VideoTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.VideoTypeProperties;

                /**
                 * Verifies a VideoTypeProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a VideoTypeProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns VideoTypeProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.VideoTypeProperties;

                /**
                 * Creates a plain object from a VideoTypeProperties message. Also converts values to other types if specified.
                 * @param message VideoTypeProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.VideoTypeProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this VideoTypeProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for VideoTypeProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a LiveVideoTypeProperties. */
            interface ILiveVideoTypeProperties {

                /** LiveVideoTypeProperties drawing */
                drawing?: (rv.data.Media.IDrawingProperties|null);

                /** LiveVideoTypeProperties audio */
                audio?: (rv.data.Media.IAudioProperties|null);

                /** LiveVideoTypeProperties liveVideo */
                liveVideo?: (rv.data.Media.ILiveVideoProperties|null);
            }

            /** Represents a LiveVideoTypeProperties. */
            class LiveVideoTypeProperties implements ILiveVideoTypeProperties {

                /**
                 * Constructs a new LiveVideoTypeProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.ILiveVideoTypeProperties);

                /** LiveVideoTypeProperties drawing. */
                public drawing?: (rv.data.Media.IDrawingProperties|null);

                /** LiveVideoTypeProperties audio. */
                public audio?: (rv.data.Media.IAudioProperties|null);

                /** LiveVideoTypeProperties liveVideo. */
                public liveVideo?: (rv.data.Media.ILiveVideoProperties|null);

                /**
                 * Creates a new LiveVideoTypeProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LiveVideoTypeProperties instance
                 */
                public static create(properties?: rv.data.Media.ILiveVideoTypeProperties): rv.data.Media.LiveVideoTypeProperties;

                /**
                 * Encodes the specified LiveVideoTypeProperties message. Does not implicitly {@link rv.data.Media.LiveVideoTypeProperties.verify|verify} messages.
                 * @param message LiveVideoTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.ILiveVideoTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LiveVideoTypeProperties message, length delimited. Does not implicitly {@link rv.data.Media.LiveVideoTypeProperties.verify|verify} messages.
                 * @param message LiveVideoTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.ILiveVideoTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LiveVideoTypeProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LiveVideoTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.LiveVideoTypeProperties;

                /**
                 * Decodes a LiveVideoTypeProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LiveVideoTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.LiveVideoTypeProperties;

                /**
                 * Verifies a LiveVideoTypeProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LiveVideoTypeProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LiveVideoTypeProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.LiveVideoTypeProperties;

                /**
                 * Creates a plain object from a LiveVideoTypeProperties message. Also converts values to other types if specified.
                 * @param message LiveVideoTypeProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.LiveVideoTypeProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LiveVideoTypeProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for LiveVideoTypeProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a WebContentTypeProperties. */
            interface IWebContentTypeProperties {

                /** WebContentTypeProperties drawing */
                drawing?: (rv.data.Media.IDrawingProperties|null);

                /** WebContentTypeProperties url */
                url?: (rv.data.IURL|null);
            }

            /** Represents a WebContentTypeProperties. */
            class WebContentTypeProperties implements IWebContentTypeProperties {

                /**
                 * Constructs a new WebContentTypeProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Media.IWebContentTypeProperties);

                /** WebContentTypeProperties drawing. */
                public drawing?: (rv.data.Media.IDrawingProperties|null);

                /** WebContentTypeProperties url. */
                public url?: (rv.data.IURL|null);

                /**
                 * Creates a new WebContentTypeProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns WebContentTypeProperties instance
                 */
                public static create(properties?: rv.data.Media.IWebContentTypeProperties): rv.data.Media.WebContentTypeProperties;

                /**
                 * Encodes the specified WebContentTypeProperties message. Does not implicitly {@link rv.data.Media.WebContentTypeProperties.verify|verify} messages.
                 * @param message WebContentTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Media.IWebContentTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified WebContentTypeProperties message, length delimited. Does not implicitly {@link rv.data.Media.WebContentTypeProperties.verify|verify} messages.
                 * @param message WebContentTypeProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Media.IWebContentTypeProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a WebContentTypeProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns WebContentTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Media.WebContentTypeProperties;

                /**
                 * Decodes a WebContentTypeProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns WebContentTypeProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Media.WebContentTypeProperties;

                /**
                 * Verifies a WebContentTypeProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a WebContentTypeProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns WebContentTypeProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Media.WebContentTypeProperties;

                /**
                 * Creates a plain object from a WebContentTypeProperties message. Also converts values to other types if specified.
                 * @param message WebContentTypeProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Media.WebContentTypeProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this WebContentTypeProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for WebContentTypeProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** ScaleBehavior enum. */
            enum ScaleBehavior {
                SCALE_BEHAVIOR_FIT = 0,
                SCALE_BEHAVIOR_FILL = 1,
                SCALE_BEHAVIOR_STRETCH = 2,
                SCALE_BEHAVIOR_CUSTOM = 3
            }

            /** ScaleAlignment enum. */
            enum ScaleAlignment {
                SCALE_ALIGNMENT_MIDDLE_CENTER = 0,
                SCALE_ALIGNMENT_TOP_LEFT = 1,
                SCALE_ALIGNMENT_TOP_CENTER = 2,
                SCALE_ALIGNMENT_TOP_RIGHT = 3,
                SCALE_ALIGNMENT_MIDDLE_RIGHT = 4,
                SCALE_ALIGNMENT_BOTTOM_RIGHT = 5,
                SCALE_ALIGNMENT_BOTTOM_CENTER = 6,
                SCALE_ALIGNMENT_BOTTOM_LEFT = 7,
                SCALE_ALIGNMENT_MIDDLE_LEFT = 8
            }
        }

        /** AlphaType enum. */
        enum AlphaType {
            ALPHA_TYPE_UNKNOWN = 0,
            ALPHA_TYPE_STRAIGHT = 1,
            ALPHA_TYPE_PREMULTIPLIED = 2
        }

        /** Properties of a DigitalAudio. */
        interface IDigitalAudio {
        }

        /** Represents a DigitalAudio. */
        class DigitalAudio implements IDigitalAudio {

            /**
             * Constructs a new DigitalAudio.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IDigitalAudio);

            /**
             * Creates a new DigitalAudio instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DigitalAudio instance
             */
            public static create(properties?: rv.data.IDigitalAudio): rv.data.DigitalAudio;

            /**
             * Encodes the specified DigitalAudio message. Does not implicitly {@link rv.data.DigitalAudio.verify|verify} messages.
             * @param message DigitalAudio message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IDigitalAudio, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DigitalAudio message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.verify|verify} messages.
             * @param message DigitalAudio message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IDigitalAudio, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DigitalAudio message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DigitalAudio
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio;

            /**
             * Decodes a DigitalAudio message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DigitalAudio
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio;

            /**
             * Verifies a DigitalAudio message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DigitalAudio message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DigitalAudio
             */
            public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio;

            /**
             * Creates a plain object from a DigitalAudio message. Also converts values to other types if specified.
             * @param message DigitalAudio
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.DigitalAudio, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DigitalAudio to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for DigitalAudio
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace DigitalAudio {

            /** Properties of a Setup. */
            interface ISetup {

                /** Setup buses */
                buses?: (rv.data.DigitalAudio.IBus[]|null);

                /** Setup monitorDevice */
                monitorDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup mainOutputDevice */
                mainOutputDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup enableSdiNdiDevice */
                enableSdiNdiDevice?: (boolean|null);

                /** Setup sdiNdiDevice */
                sdiNdiDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup monitorOnMains */
                monitorOnMains?: (boolean|null);

                /** Setup disableMainOutputDevice */
                disableMainOutputDevice?: (boolean|null);
            }

            /** Represents a Setup. */
            class Setup implements ISetup {

                /**
                 * Constructs a new Setup.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.DigitalAudio.ISetup);

                /** Setup buses. */
                public buses: rv.data.DigitalAudio.IBus[];

                /** Setup monitorDevice. */
                public monitorDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup mainOutputDevice. */
                public mainOutputDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup enableSdiNdiDevice. */
                public enableSdiNdiDevice: boolean;

                /** Setup sdiNdiDevice. */
                public sdiNdiDevice?: (rv.data.DigitalAudio.IDevice|null);

                /** Setup monitorOnMains. */
                public monitorOnMains: boolean;

                /** Setup disableMainOutputDevice. */
                public disableMainOutputDevice: boolean;

                /**
                 * Creates a new Setup instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Setup instance
                 */
                public static create(properties?: rv.data.DigitalAudio.ISetup): rv.data.DigitalAudio.Setup;

                /**
                 * Encodes the specified Setup message. Does not implicitly {@link rv.data.DigitalAudio.Setup.verify|verify} messages.
                 * @param message Setup message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.DigitalAudio.ISetup, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Setup message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Setup.verify|verify} messages.
                 * @param message Setup message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.DigitalAudio.ISetup, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Setup message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Setup
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Setup;

                /**
                 * Decodes a Setup message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Setup
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Setup;

                /**
                 * Verifies a Setup message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Setup message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Setup
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Setup;

                /**
                 * Creates a plain object from a Setup message. Also converts values to other types if specified.
                 * @param message Setup
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.DigitalAudio.Setup, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Setup to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Setup
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Bus. */
            interface IBus {

                /** Bus name */
                name?: (string|null);

                /** Bus muted */
                muted?: (boolean|null);

                /** Bus solo */
                solo?: (boolean|null);

                /** Bus testTone */
                testTone?: (boolean|null);

                /** Bus masterLevel */
                masterLevel?: (number|null);
            }

            /** Represents a Bus. */
            class Bus implements IBus {

                /**
                 * Constructs a new Bus.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.DigitalAudio.IBus);

                /** Bus name. */
                public name: string;

                /** Bus muted. */
                public muted: boolean;

                /** Bus solo. */
                public solo: boolean;

                /** Bus testTone. */
                public testTone: boolean;

                /** Bus masterLevel. */
                public masterLevel: number;

                /**
                 * Creates a new Bus instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Bus instance
                 */
                public static create(properties?: rv.data.DigitalAudio.IBus): rv.data.DigitalAudio.Bus;

                /**
                 * Encodes the specified Bus message. Does not implicitly {@link rv.data.DigitalAudio.Bus.verify|verify} messages.
                 * @param message Bus message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.DigitalAudio.IBus, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Bus message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Bus.verify|verify} messages.
                 * @param message Bus message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.DigitalAudio.IBus, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Bus message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Bus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Bus;

                /**
                 * Decodes a Bus message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Bus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Bus;

                /**
                 * Verifies a Bus message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Bus message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Bus
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Bus;

                /**
                 * Creates a plain object from a Bus message. Also converts values to other types if specified.
                 * @param message Bus
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.DigitalAudio.Bus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Bus to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Bus
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Device. */
            interface IDevice {

                /** Device name */
                name?: (string|null);

                /** Device renderID */
                renderID?: (string|null);

                /** Device formats */
                formats?: (rv.data.DigitalAudio.Device.IFormat[]|null);

                /** Device routing */
                routing?: (rv.data.DigitalAudio.Device.IRouting|null);
            }

            /** Represents a Device. */
            class Device implements IDevice {

                /**
                 * Constructs a new Device.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.DigitalAudio.IDevice);

                /** Device name. */
                public name: string;

                /** Device renderID. */
                public renderID: string;

                /** Device formats. */
                public formats: rv.data.DigitalAudio.Device.IFormat[];

                /** Device routing. */
                public routing?: (rv.data.DigitalAudio.Device.IRouting|null);

                /**
                 * Creates a new Device instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Device instance
                 */
                public static create(properties?: rv.data.DigitalAudio.IDevice): rv.data.DigitalAudio.Device;

                /**
                 * Encodes the specified Device message. Does not implicitly {@link rv.data.DigitalAudio.Device.verify|verify} messages.
                 * @param message Device message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.DigitalAudio.IDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Device message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Device.verify|verify} messages.
                 * @param message Device message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.DigitalAudio.IDevice, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Device message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Device
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Device;

                /**
                 * Decodes a Device message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Device
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Device;

                /**
                 * Verifies a Device message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Device message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Device
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Device;

                /**
                 * Creates a plain object from a Device message. Also converts values to other types if specified.
                 * @param message Device
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.DigitalAudio.Device, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Device to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Device
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Device {

                /** Properties of a Format. */
                interface IFormat {

                    /** Format sampleRate */
                    sampleRate?: (number|null);

                    /** Format bitDepth */
                    bitDepth?: (number|null);

                    /** Format type */
                    type?: (rv.data.DigitalAudio.Device.Format.Type|null);
                }

                /** Represents a Format. */
                class Format implements IFormat {

                    /**
                     * Constructs a new Format.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.DigitalAudio.Device.IFormat);

                    /** Format sampleRate. */
                    public sampleRate: number;

                    /** Format bitDepth. */
                    public bitDepth: number;

                    /** Format type. */
                    public type: rv.data.DigitalAudio.Device.Format.Type;

                    /**
                     * Creates a new Format instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Format instance
                     */
                    public static create(properties?: rv.data.DigitalAudio.Device.IFormat): rv.data.DigitalAudio.Device.Format;

                    /**
                     * Encodes the specified Format message. Does not implicitly {@link rv.data.DigitalAudio.Device.Format.verify|verify} messages.
                     * @param message Format message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.DigitalAudio.Device.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Format message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Device.Format.verify|verify} messages.
                     * @param message Format message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.DigitalAudio.Device.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Format message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Format
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Device.Format;

                    /**
                     * Decodes a Format message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Format
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Device.Format;

                    /**
                     * Verifies a Format message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Format message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Format
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Device.Format;

                    /**
                     * Creates a plain object from a Format message. Also converts values to other types if specified.
                     * @param message Format
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.DigitalAudio.Device.Format, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Format to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Format
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Format {

                    /** Type enum. */
                    enum Type {
                        TYPE_INT = 0,
                        TYPE_FLOAT = 1
                    }
                }

                /** Properties of a Map. */
                interface IMap {

                    /** Map channelIndex */
                    channelIndex?: (number|null);

                    /** Map mappedIndices */
                    mappedIndices?: (number[]|null);
                }

                /** Represents a Map. */
                class Map implements IMap {

                    /**
                     * Constructs a new Map.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.DigitalAudio.Device.IMap);

                    /** Map channelIndex. */
                    public channelIndex: number;

                    /** Map mappedIndices. */
                    public mappedIndices: number[];

                    /**
                     * Creates a new Map instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Map instance
                     */
                    public static create(properties?: rv.data.DigitalAudio.Device.IMap): rv.data.DigitalAudio.Device.Map;

                    /**
                     * Encodes the specified Map message. Does not implicitly {@link rv.data.DigitalAudio.Device.Map.verify|verify} messages.
                     * @param message Map message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.DigitalAudio.Device.IMap, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Map message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Device.Map.verify|verify} messages.
                     * @param message Map message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.DigitalAudio.Device.IMap, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Map message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Map
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Device.Map;

                    /**
                     * Decodes a Map message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Map
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Device.Map;

                    /**
                     * Verifies a Map message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Map message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Map
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Device.Map;

                    /**
                     * Creates a plain object from a Map message. Also converts values to other types if specified.
                     * @param message Map
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.DigitalAudio.Device.Map, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Map to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Map
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Channel. */
                interface IChannel {

                    /** Channel muteEnable */
                    muteEnable?: (boolean|null);

                    /** Channel soloEnable */
                    soloEnable?: (boolean|null);

                    /** Channel toneEnable */
                    toneEnable?: (boolean|null);

                    /** Channel audioDelay */
                    audioDelay?: (number|null);

                    /** Channel level */
                    level?: (number|null);
                }

                /** Represents a Channel. */
                class Channel implements IChannel {

                    /**
                     * Constructs a new Channel.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.DigitalAudio.Device.IChannel);

                    /** Channel muteEnable. */
                    public muteEnable: boolean;

                    /** Channel soloEnable. */
                    public soloEnable: boolean;

                    /** Channel toneEnable. */
                    public toneEnable: boolean;

                    /** Channel audioDelay. */
                    public audioDelay: number;

                    /** Channel level. */
                    public level: number;

                    /**
                     * Creates a new Channel instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Channel instance
                     */
                    public static create(properties?: rv.data.DigitalAudio.Device.IChannel): rv.data.DigitalAudio.Device.Channel;

                    /**
                     * Encodes the specified Channel message. Does not implicitly {@link rv.data.DigitalAudio.Device.Channel.verify|verify} messages.
                     * @param message Channel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.DigitalAudio.Device.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Channel message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Device.Channel.verify|verify} messages.
                     * @param message Channel message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.DigitalAudio.Device.IChannel, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Channel message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Device.Channel;

                    /**
                     * Decodes a Channel message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Device.Channel;

                    /**
                     * Verifies a Channel message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Channel
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Device.Channel;

                    /**
                     * Creates a plain object from a Channel message. Also converts values to other types if specified.
                     * @param message Channel
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.DigitalAudio.Device.Channel, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Channel to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Channel
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Routing. */
                interface IRouting {

                    /** Routing channels */
                    channels?: (rv.data.DigitalAudio.Device.IChannel[]|null);

                    /** Routing map */
                    map?: (rv.data.DigitalAudio.Device.IMap[]|null);

                    /** Routing isCustomMap */
                    isCustomMap?: (boolean|null);

                    /** Routing masterChannel */
                    masterChannel?: (rv.data.DigitalAudio.Device.IChannel|null);
                }

                /** Represents a Routing. */
                class Routing implements IRouting {

                    /**
                     * Constructs a new Routing.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.DigitalAudio.Device.IRouting);

                    /** Routing channels. */
                    public channels: rv.data.DigitalAudio.Device.IChannel[];

                    /** Routing map. */
                    public map: rv.data.DigitalAudio.Device.IMap[];

                    /** Routing isCustomMap. */
                    public isCustomMap: boolean;

                    /** Routing masterChannel. */
                    public masterChannel?: (rv.data.DigitalAudio.Device.IChannel|null);

                    /**
                     * Creates a new Routing instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Routing instance
                     */
                    public static create(properties?: rv.data.DigitalAudio.Device.IRouting): rv.data.DigitalAudio.Device.Routing;

                    /**
                     * Encodes the specified Routing message. Does not implicitly {@link rv.data.DigitalAudio.Device.Routing.verify|verify} messages.
                     * @param message Routing message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.DigitalAudio.Device.IRouting, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Routing message, length delimited. Does not implicitly {@link rv.data.DigitalAudio.Device.Routing.verify|verify} messages.
                     * @param message Routing message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.DigitalAudio.Device.IRouting, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Routing message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Routing
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.DigitalAudio.Device.Routing;

                    /**
                     * Decodes a Routing message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Routing
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.DigitalAudio.Device.Routing;

                    /**
                     * Verifies a Routing message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Routing message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Routing
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.DigitalAudio.Device.Routing;

                    /**
                     * Creates a plain object from a Routing message. Also converts values to other types if specified.
                     * @param message Routing
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.DigitalAudio.Device.Routing, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Routing to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Routing
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }
        }

        /** Properties of an Effect. */
        interface IEffect {

            /** Effect uuid */
            uuid?: (rv.data.IUUID|null);

            /** Effect enabled */
            enabled?: (boolean|null);

            /** Effect name */
            name?: (string|null);

            /** Effect renderId */
            renderId?: (string|null);

            /** Effect behaviorDescription */
            behaviorDescription?: (string|null);

            /** Effect category */
            category?: (string|null);

            /** Effect variables */
            variables?: (rv.data.Effect.IEffectVariable[]|null);
        }

        /** Represents an Effect. */
        class Effect implements IEffect {

            /**
             * Constructs a new Effect.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IEffect);

            /** Effect uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Effect enabled. */
            public enabled: boolean;

            /** Effect name. */
            public name: string;

            /** Effect renderId. */
            public renderId: string;

            /** Effect behaviorDescription. */
            public behaviorDescription: string;

            /** Effect category. */
            public category: string;

            /** Effect variables. */
            public variables: rv.data.Effect.IEffectVariable[];

            /**
             * Creates a new Effect instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Effect instance
             */
            public static create(properties?: rv.data.IEffect): rv.data.Effect;

            /**
             * Encodes the specified Effect message. Does not implicitly {@link rv.data.Effect.verify|verify} messages.
             * @param message Effect message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IEffect, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Effect message, length delimited. Does not implicitly {@link rv.data.Effect.verify|verify} messages.
             * @param message Effect message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IEffect, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Effect message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Effect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect;

            /**
             * Decodes an Effect message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Effect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect;

            /**
             * Verifies an Effect message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Effect message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Effect
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Effect;

            /**
             * Creates a plain object from an Effect message. Also converts values to other types if specified.
             * @param message Effect
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Effect, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Effect to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Effect
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Effect {

            /** Properties of an EffectVariable. */
            interface IEffectVariable {

                /** EffectVariable name */
                name?: (string|null);

                /** EffectVariable description */
                description?: (string|null);

                /** EffectVariable int */
                int?: (rv.data.Effect.EffectVariable.IEffectInt|null);

                /** EffectVariable float */
                float?: (rv.data.Effect.EffectVariable.IEffectFloat|null);

                /** EffectVariable color */
                color?: (rv.data.Effect.EffectVariable.IEffectColor|null);

                /** EffectVariable direction */
                direction?: (rv.data.Effect.EffectVariable.IEffectDirection|null);

                /** EffectVariable double */
                double?: (rv.data.Effect.EffectVariable.IEffectDouble|null);
            }

            /** Represents an EffectVariable. */
            class EffectVariable implements IEffectVariable {

                /**
                 * Constructs a new EffectVariable.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Effect.IEffectVariable);

                /** EffectVariable name. */
                public name: string;

                /** EffectVariable description. */
                public description: string;

                /** EffectVariable int. */
                public int?: (rv.data.Effect.EffectVariable.IEffectInt|null);

                /** EffectVariable float. */
                public float?: (rv.data.Effect.EffectVariable.IEffectFloat|null);

                /** EffectVariable color. */
                public color?: (rv.data.Effect.EffectVariable.IEffectColor|null);

                /** EffectVariable direction. */
                public direction?: (rv.data.Effect.EffectVariable.IEffectDirection|null);

                /** EffectVariable double. */
                public double?: (rv.data.Effect.EffectVariable.IEffectDouble|null);

                /** EffectVariable Type. */
                public Type?: ("int"|"float"|"color"|"direction"|"double");

                /**
                 * Creates a new EffectVariable instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EffectVariable instance
                 */
                public static create(properties?: rv.data.Effect.IEffectVariable): rv.data.Effect.EffectVariable;

                /**
                 * Encodes the specified EffectVariable message. Does not implicitly {@link rv.data.Effect.EffectVariable.verify|verify} messages.
                 * @param message EffectVariable message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Effect.IEffectVariable, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EffectVariable message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.verify|verify} messages.
                 * @param message EffectVariable message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Effect.IEffectVariable, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EffectVariable message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EffectVariable
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable;

                /**
                 * Decodes an EffectVariable message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EffectVariable
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable;

                /**
                 * Verifies an EffectVariable message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EffectVariable message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EffectVariable
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable;

                /**
                 * Creates a plain object from an EffectVariable message. Also converts values to other types if specified.
                 * @param message EffectVariable
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Effect.EffectVariable, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EffectVariable to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for EffectVariable
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace EffectVariable {

                /** Properties of an EffectInt. */
                interface IEffectInt {

                    /** EffectInt value */
                    value?: (number|null);

                    /** EffectInt defaultValue */
                    defaultValue?: (number|null);

                    /** EffectInt min */
                    min?: (number|null);

                    /** EffectInt max */
                    max?: (number|null);
                }

                /** Represents an EffectInt. */
                class EffectInt implements IEffectInt {

                    /**
                     * Constructs a new EffectInt.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Effect.EffectVariable.IEffectInt);

                    /** EffectInt value. */
                    public value: number;

                    /** EffectInt defaultValue. */
                    public defaultValue: number;

                    /** EffectInt min. */
                    public min: number;

                    /** EffectInt max. */
                    public max: number;

                    /**
                     * Creates a new EffectInt instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EffectInt instance
                     */
                    public static create(properties?: rv.data.Effect.EffectVariable.IEffectInt): rv.data.Effect.EffectVariable.EffectInt;

                    /**
                     * Encodes the specified EffectInt message. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectInt.verify|verify} messages.
                     * @param message EffectInt message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Effect.EffectVariable.IEffectInt, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EffectInt message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectInt.verify|verify} messages.
                     * @param message EffectInt message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Effect.EffectVariable.IEffectInt, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EffectInt message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EffectInt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable.EffectInt;

                    /**
                     * Decodes an EffectInt message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EffectInt
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable.EffectInt;

                    /**
                     * Verifies an EffectInt message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EffectInt message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EffectInt
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable.EffectInt;

                    /**
                     * Creates a plain object from an EffectInt message. Also converts values to other types if specified.
                     * @param message EffectInt
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Effect.EffectVariable.EffectInt, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EffectInt to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for EffectInt
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an EffectFloat. */
                interface IEffectFloat {

                    /** EffectFloat value */
                    value?: (number|null);

                    /** EffectFloat defaultValue */
                    defaultValue?: (number|null);

                    /** EffectFloat min */
                    min?: (number|null);

                    /** EffectFloat max */
                    max?: (number|null);
                }

                /** Represents an EffectFloat. */
                class EffectFloat implements IEffectFloat {

                    /**
                     * Constructs a new EffectFloat.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Effect.EffectVariable.IEffectFloat);

                    /** EffectFloat value. */
                    public value: number;

                    /** EffectFloat defaultValue. */
                    public defaultValue: number;

                    /** EffectFloat min. */
                    public min: number;

                    /** EffectFloat max. */
                    public max: number;

                    /**
                     * Creates a new EffectFloat instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EffectFloat instance
                     */
                    public static create(properties?: rv.data.Effect.EffectVariable.IEffectFloat): rv.data.Effect.EffectVariable.EffectFloat;

                    /**
                     * Encodes the specified EffectFloat message. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectFloat.verify|verify} messages.
                     * @param message EffectFloat message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Effect.EffectVariable.IEffectFloat, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EffectFloat message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectFloat.verify|verify} messages.
                     * @param message EffectFloat message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Effect.EffectVariable.IEffectFloat, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EffectFloat message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EffectFloat
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable.EffectFloat;

                    /**
                     * Decodes an EffectFloat message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EffectFloat
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable.EffectFloat;

                    /**
                     * Verifies an EffectFloat message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EffectFloat message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EffectFloat
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable.EffectFloat;

                    /**
                     * Creates a plain object from an EffectFloat message. Also converts values to other types if specified.
                     * @param message EffectFloat
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Effect.EffectVariable.EffectFloat, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EffectFloat to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for EffectFloat
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an EffectDouble. */
                interface IEffectDouble {

                    /** EffectDouble value */
                    value?: (number|null);

                    /** EffectDouble defaultValue */
                    defaultValue?: (number|null);

                    /** EffectDouble min */
                    min?: (number|null);

                    /** EffectDouble max */
                    max?: (number|null);
                }

                /** Represents an EffectDouble. */
                class EffectDouble implements IEffectDouble {

                    /**
                     * Constructs a new EffectDouble.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Effect.EffectVariable.IEffectDouble);

                    /** EffectDouble value. */
                    public value: number;

                    /** EffectDouble defaultValue. */
                    public defaultValue: number;

                    /** EffectDouble min. */
                    public min: number;

                    /** EffectDouble max. */
                    public max: number;

                    /**
                     * Creates a new EffectDouble instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EffectDouble instance
                     */
                    public static create(properties?: rv.data.Effect.EffectVariable.IEffectDouble): rv.data.Effect.EffectVariable.EffectDouble;

                    /**
                     * Encodes the specified EffectDouble message. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectDouble.verify|verify} messages.
                     * @param message EffectDouble message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Effect.EffectVariable.IEffectDouble, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EffectDouble message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectDouble.verify|verify} messages.
                     * @param message EffectDouble message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Effect.EffectVariable.IEffectDouble, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EffectDouble message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EffectDouble
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable.EffectDouble;

                    /**
                     * Decodes an EffectDouble message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EffectDouble
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable.EffectDouble;

                    /**
                     * Verifies an EffectDouble message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EffectDouble message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EffectDouble
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable.EffectDouble;

                    /**
                     * Creates a plain object from an EffectDouble message. Also converts values to other types if specified.
                     * @param message EffectDouble
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Effect.EffectVariable.EffectDouble, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EffectDouble to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for EffectDouble
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an EffectColor. */
                interface IEffectColor {

                    /** EffectColor color */
                    color?: (rv.data.IColor|null);

                    /** EffectColor defaultColor */
                    defaultColor?: (rv.data.IColor|null);
                }

                /** Represents an EffectColor. */
                class EffectColor implements IEffectColor {

                    /**
                     * Constructs a new EffectColor.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Effect.EffectVariable.IEffectColor);

                    /** EffectColor color. */
                    public color?: (rv.data.IColor|null);

                    /** EffectColor defaultColor. */
                    public defaultColor?: (rv.data.IColor|null);

                    /**
                     * Creates a new EffectColor instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EffectColor instance
                     */
                    public static create(properties?: rv.data.Effect.EffectVariable.IEffectColor): rv.data.Effect.EffectVariable.EffectColor;

                    /**
                     * Encodes the specified EffectColor message. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectColor.verify|verify} messages.
                     * @param message EffectColor message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Effect.EffectVariable.IEffectColor, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EffectColor message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectColor.verify|verify} messages.
                     * @param message EffectColor message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Effect.EffectVariable.IEffectColor, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EffectColor message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EffectColor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable.EffectColor;

                    /**
                     * Decodes an EffectColor message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EffectColor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable.EffectColor;

                    /**
                     * Verifies an EffectColor message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EffectColor message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EffectColor
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable.EffectColor;

                    /**
                     * Creates a plain object from an EffectColor message. Also converts values to other types if specified.
                     * @param message EffectColor
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Effect.EffectVariable.EffectColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EffectColor to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for EffectColor
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an EffectDirection. */
                interface IEffectDirection {

                    /** EffectDirection direction */
                    direction?: (rv.data.Effect.EffectVariable.EffectDirection.EffectDirection|null);

                    /** EffectDirection defaultDirection */
                    defaultDirection?: (rv.data.Effect.EffectVariable.EffectDirection.EffectDirection|null);

                    /** EffectDirection availableDirections */
                    availableDirections?: (number|null);
                }

                /** Represents an EffectDirection. */
                class EffectDirection implements IEffectDirection {

                    /**
                     * Constructs a new EffectDirection.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Effect.EffectVariable.IEffectDirection);

                    /** EffectDirection direction. */
                    public direction: rv.data.Effect.EffectVariable.EffectDirection.EffectDirection;

                    /** EffectDirection defaultDirection. */
                    public defaultDirection: rv.data.Effect.EffectVariable.EffectDirection.EffectDirection;

                    /** EffectDirection availableDirections. */
                    public availableDirections: number;

                    /**
                     * Creates a new EffectDirection instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns EffectDirection instance
                     */
                    public static create(properties?: rv.data.Effect.EffectVariable.IEffectDirection): rv.data.Effect.EffectVariable.EffectDirection;

                    /**
                     * Encodes the specified EffectDirection message. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectDirection.verify|verify} messages.
                     * @param message EffectDirection message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Effect.EffectVariable.IEffectDirection, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified EffectDirection message, length delimited. Does not implicitly {@link rv.data.Effect.EffectVariable.EffectDirection.verify|verify} messages.
                     * @param message EffectDirection message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Effect.EffectVariable.IEffectDirection, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an EffectDirection message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns EffectDirection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.EffectVariable.EffectDirection;

                    /**
                     * Decodes an EffectDirection message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns EffectDirection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.EffectVariable.EffectDirection;

                    /**
                     * Verifies an EffectDirection message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an EffectDirection message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns EffectDirection
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Effect.EffectVariable.EffectDirection;

                    /**
                     * Creates a plain object from an EffectDirection message. Also converts values to other types if specified.
                     * @param message EffectDirection
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Effect.EffectVariable.EffectDirection, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this EffectDirection to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for EffectDirection
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace EffectDirection {

                    /** EffectDirection enum. */
                    enum EffectDirection {
                        EFFECT_DIRECTION_NONE = 0,
                        EFFECT_DIRECTION_TOP_LEFT = 1,
                        EFFECT_DIRECTION_TOP = 2,
                        EFFECT_DIRECTION_TOP_RIGHT = 4,
                        EFFECT_DIRECTION_LEFT = 8,
                        EFFECT_DIRECTION_CENTER = 16,
                        EFFECT_DIRECTION_RIGHT = 32,
                        EFFECT_DIRECTION_BOTTOM_LEFT = 64,
                        EFFECT_DIRECTION_BOTTOM = 128,
                        EFFECT_DIRECTION_BOTTOM_RIGHT = 256
                    }
                }
            }

            /** Properties of a Preset. */
            interface IPreset {

                /** Preset uuid */
                uuid?: (rv.data.IUUID|null);

                /** Preset name */
                name?: (string|null);

                /** Preset effects */
                effects?: (rv.data.IEffect[]|null);
            }

            /** Represents a Preset. */
            class Preset implements IPreset {

                /**
                 * Constructs a new Preset.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Effect.IPreset);

                /** Preset uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Preset name. */
                public name: string;

                /** Preset effects. */
                public effects: rv.data.IEffect[];

                /**
                 * Creates a new Preset instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Preset instance
                 */
                public static create(properties?: rv.data.Effect.IPreset): rv.data.Effect.Preset;

                /**
                 * Encodes the specified Preset message. Does not implicitly {@link rv.data.Effect.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Effect.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Preset message, length delimited. Does not implicitly {@link rv.data.Effect.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Effect.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Preset message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Effect.Preset;

                /**
                 * Decodes a Preset message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Effect.Preset;

                /**
                 * Verifies a Preset message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Preset message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Preset
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Effect.Preset;

                /**
                 * Creates a plain object from a Preset message. Also converts values to other types if specified.
                 * @param message Preset
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Effect.Preset, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Preset to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Preset
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }
        }

        /** Properties of a Transition. */
        interface ITransition {

            /** Transition duration */
            duration?: (number|null);

            /** Transition favoriteUuid */
            favoriteUuid?: (rv.data.IUUID|null);

            /** Transition effect */
            effect?: (rv.data.IEffect|null);
        }

        /** Represents a Transition. */
        class Transition implements ITransition {

            /**
             * Constructs a new Transition.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ITransition);

            /** Transition duration. */
            public duration: number;

            /** Transition favoriteUuid. */
            public favoriteUuid?: (rv.data.IUUID|null);

            /** Transition effect. */
            public effect?: (rv.data.IEffect|null);

            /**
             * Creates a new Transition instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Transition instance
             */
            public static create(properties?: rv.data.ITransition): rv.data.Transition;

            /**
             * Encodes the specified Transition message. Does not implicitly {@link rv.data.Transition.verify|verify} messages.
             * @param message Transition message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ITransition, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Transition message, length delimited. Does not implicitly {@link rv.data.Transition.verify|verify} messages.
             * @param message Transition message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ITransition, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Transition message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Transition
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Transition;

            /**
             * Decodes a Transition message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Transition
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Transition;

            /**
             * Verifies a Transition message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Transition message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Transition
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Transition;

            /**
             * Creates a plain object from a Transition message. Also converts values to other types if specified.
             * @param message Transition
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Transition, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Transition to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Transition
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Transition {

            /** Properties of a Preset. */
            interface IPreset {

                /** Preset uuid */
                uuid?: (rv.data.IUUID|null);

                /** Preset name */
                name?: (string|null);

                /** Preset transition */
                transition?: (rv.data.ITransition|null);
            }

            /** Represents a Preset. */
            class Preset implements IPreset {

                /**
                 * Constructs a new Preset.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Transition.IPreset);

                /** Preset uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Preset name. */
                public name: string;

                /** Preset transition. */
                public transition?: (rv.data.ITransition|null);

                /**
                 * Creates a new Preset instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Preset instance
                 */
                public static create(properties?: rv.data.Transition.IPreset): rv.data.Transition.Preset;

                /**
                 * Encodes the specified Preset message. Does not implicitly {@link rv.data.Transition.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Transition.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Preset message, length delimited. Does not implicitly {@link rv.data.Transition.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Transition.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Preset message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Transition.Preset;

                /**
                 * Decodes a Preset message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Transition.Preset;

                /**
                 * Verifies a Preset message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Preset message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Preset
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Transition.Preset;

                /**
                 * Creates a plain object from a Preset message. Also converts values to other types if specified.
                 * @param message Preset
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Transition.Preset, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Preset to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Preset
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }
        }

        /** Properties of a UUID. */
        interface IUUID {

            /** UUID string */
            string?: (string|null);
        }

        /** Represents a UUID. */
        class UUID implements IUUID {

            /**
             * Constructs a new UUID.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IUUID);

            /** UUID string. */
            public string: string;

            /**
             * Creates a new UUID instance using the specified properties.
             * @param [properties] Properties to set
             * @returns UUID instance
             */
            public static create(properties?: rv.data.IUUID): rv.data.UUID;

            /**
             * Encodes the specified UUID message. Does not implicitly {@link rv.data.UUID.verify|verify} messages.
             * @param message UUID message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IUUID, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UUID message, length delimited. Does not implicitly {@link rv.data.UUID.verify|verify} messages.
             * @param message UUID message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IUUID, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a UUID message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns UUID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.UUID;

            /**
             * Decodes a UUID message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns UUID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.UUID;

            /**
             * Verifies a UUID message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a UUID message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UUID
             */
            public static fromObject(object: { [k: string]: any }): rv.data.UUID;

            /**
             * Creates a plain object from a UUID message. Also converts values to other types if specified.
             * @param message UUID
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.UUID, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UUID to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for UUID
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a FileProperties. */
        interface IFileProperties {

            /** FileProperties localUrl */
            localUrl?: (rv.data.IURL|null);

            /** FileProperties remoteProperties */
            remoteProperties?: (rv.data.FileProperties.IRemoteProperties|null);
        }

        /** Represents a FileProperties. */
        class FileProperties implements IFileProperties {

            /**
             * Constructs a new FileProperties.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IFileProperties);

            /** FileProperties localUrl. */
            public localUrl?: (rv.data.IURL|null);

            /** FileProperties remoteProperties. */
            public remoteProperties?: (rv.data.FileProperties.IRemoteProperties|null);

            /**
             * Creates a new FileProperties instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileProperties instance
             */
            public static create(properties?: rv.data.IFileProperties): rv.data.FileProperties;

            /**
             * Encodes the specified FileProperties message. Does not implicitly {@link rv.data.FileProperties.verify|verify} messages.
             * @param message FileProperties message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IFileProperties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileProperties message, length delimited. Does not implicitly {@link rv.data.FileProperties.verify|verify} messages.
             * @param message FileProperties message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IFileProperties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileProperties message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileProperties
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.FileProperties;

            /**
             * Decodes a FileProperties message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileProperties
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.FileProperties;

            /**
             * Verifies a FileProperties message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileProperties message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileProperties
             */
            public static fromObject(object: { [k: string]: any }): rv.data.FileProperties;

            /**
             * Creates a plain object from a FileProperties message. Also converts values to other types if specified.
             * @param message FileProperties
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.FileProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileProperties to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for FileProperties
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace FileProperties {

            /** Properties of a RemoteProperties. */
            interface IRemoteProperties {

                /** RemoteProperties procontent */
                procontent?: (rv.data.FileProperties.RemoteProperties.IProContent|null);
            }

            /** Represents a RemoteProperties. */
            class RemoteProperties implements IRemoteProperties {

                /**
                 * Constructs a new RemoteProperties.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.FileProperties.IRemoteProperties);

                /** RemoteProperties procontent. */
                public procontent?: (rv.data.FileProperties.RemoteProperties.IProContent|null);

                /**
                 * Creates a new RemoteProperties instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RemoteProperties instance
                 */
                public static create(properties?: rv.data.FileProperties.IRemoteProperties): rv.data.FileProperties.RemoteProperties;

                /**
                 * Encodes the specified RemoteProperties message. Does not implicitly {@link rv.data.FileProperties.RemoteProperties.verify|verify} messages.
                 * @param message RemoteProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.FileProperties.IRemoteProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RemoteProperties message, length delimited. Does not implicitly {@link rv.data.FileProperties.RemoteProperties.verify|verify} messages.
                 * @param message RemoteProperties message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.FileProperties.IRemoteProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RemoteProperties message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RemoteProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.FileProperties.RemoteProperties;

                /**
                 * Decodes a RemoteProperties message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RemoteProperties
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.FileProperties.RemoteProperties;

                /**
                 * Verifies a RemoteProperties message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RemoteProperties message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RemoteProperties
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.FileProperties.RemoteProperties;

                /**
                 * Creates a plain object from a RemoteProperties message. Also converts values to other types if specified.
                 * @param message RemoteProperties
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.FileProperties.RemoteProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RemoteProperties to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for RemoteProperties
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace RemoteProperties {

                /** Properties of a ProContent. */
                interface IProContent {

                    /** ProContent downloadIdentifier */
                    downloadIdentifier?: (string|null);
                }

                /** Represents a ProContent. */
                class ProContent implements IProContent {

                    /**
                     * Constructs a new ProContent.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.FileProperties.RemoteProperties.IProContent);

                    /** ProContent downloadIdentifier. */
                    public downloadIdentifier: string;

                    /**
                     * Creates a new ProContent instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ProContent instance
                     */
                    public static create(properties?: rv.data.FileProperties.RemoteProperties.IProContent): rv.data.FileProperties.RemoteProperties.ProContent;

                    /**
                     * Encodes the specified ProContent message. Does not implicitly {@link rv.data.FileProperties.RemoteProperties.ProContent.verify|verify} messages.
                     * @param message ProContent message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.FileProperties.RemoteProperties.IProContent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ProContent message, length delimited. Does not implicitly {@link rv.data.FileProperties.RemoteProperties.ProContent.verify|verify} messages.
                     * @param message ProContent message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.FileProperties.RemoteProperties.IProContent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ProContent message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ProContent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.FileProperties.RemoteProperties.ProContent;

                    /**
                     * Decodes a ProContent message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ProContent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.FileProperties.RemoteProperties.ProContent;

                    /**
                     * Verifies a ProContent message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ProContent message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ProContent
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.FileProperties.RemoteProperties.ProContent;

                    /**
                     * Creates a plain object from a ProContent message. Also converts values to other types if specified.
                     * @param message ProContent
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.FileProperties.RemoteProperties.ProContent, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ProContent to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for ProContent
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }
        }

        /** Properties of a URL. */
        interface IURL {

            /** URL platform */
            platform?: (rv.data.URL.Platform|null);

            /** URL absoluteString */
            absoluteString?: (string|null);

            /** URL relativePath */
            relativePath?: (string|null);

            /** URL local */
            local?: (rv.data.URL.ILocalRelativePath|null);

            /** URL external */
            external?: (rv.data.URL.IExternalRelativePath|null);
        }

        /** Represents a URL. */
        class URL implements IURL {

            /**
             * Constructs a new URL.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IURL);

            /** URL platform. */
            public platform: rv.data.URL.Platform;

            /** URL absoluteString. */
            public absoluteString?: (string|null);

            /** URL relativePath. */
            public relativePath?: (string|null);

            /** URL local. */
            public local?: (rv.data.URL.ILocalRelativePath|null);

            /** URL external. */
            public external?: (rv.data.URL.IExternalRelativePath|null);

            /** URL Storage. */
            public Storage?: ("absoluteString"|"relativePath");

            /** URL RelativeFilePath. */
            public RelativeFilePath?: ("local"|"external");

            /**
             * Creates a new URL instance using the specified properties.
             * @param [properties] Properties to set
             * @returns URL instance
             */
            public static create(properties?: rv.data.IURL): rv.data.URL;

            /**
             * Encodes the specified URL message. Does not implicitly {@link rv.data.URL.verify|verify} messages.
             * @param message URL message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IURL, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified URL message, length delimited. Does not implicitly {@link rv.data.URL.verify|verify} messages.
             * @param message URL message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IURL, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a URL message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns URL
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URL;

            /**
             * Decodes a URL message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns URL
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URL;

            /**
             * Verifies a URL message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a URL message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns URL
             */
            public static fromObject(object: { [k: string]: any }): rv.data.URL;

            /**
             * Creates a plain object from a URL message. Also converts values to other types if specified.
             * @param message URL
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.URL, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this URL to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for URL
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace URL {

            /** Properties of a LocalRelativePath. */
            interface ILocalRelativePath {

                /** LocalRelativePath root */
                root?: (rv.data.URL.LocalRelativePath.Root|null);

                /** LocalRelativePath path */
                path?: (string|null);
            }

            /** Represents a LocalRelativePath. */
            class LocalRelativePath implements ILocalRelativePath {

                /**
                 * Constructs a new LocalRelativePath.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.URL.ILocalRelativePath);

                /** LocalRelativePath root. */
                public root: rv.data.URL.LocalRelativePath.Root;

                /** LocalRelativePath path. */
                public path: string;

                /**
                 * Creates a new LocalRelativePath instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LocalRelativePath instance
                 */
                public static create(properties?: rv.data.URL.ILocalRelativePath): rv.data.URL.LocalRelativePath;

                /**
                 * Encodes the specified LocalRelativePath message. Does not implicitly {@link rv.data.URL.LocalRelativePath.verify|verify} messages.
                 * @param message LocalRelativePath message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.URL.ILocalRelativePath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LocalRelativePath message, length delimited. Does not implicitly {@link rv.data.URL.LocalRelativePath.verify|verify} messages.
                 * @param message LocalRelativePath message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.URL.ILocalRelativePath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LocalRelativePath message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LocalRelativePath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URL.LocalRelativePath;

                /**
                 * Decodes a LocalRelativePath message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LocalRelativePath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URL.LocalRelativePath;

                /**
                 * Verifies a LocalRelativePath message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LocalRelativePath message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LocalRelativePath
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.URL.LocalRelativePath;

                /**
                 * Creates a plain object from a LocalRelativePath message. Also converts values to other types if specified.
                 * @param message LocalRelativePath
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.URL.LocalRelativePath, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LocalRelativePath to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for LocalRelativePath
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace LocalRelativePath {

                /** Root enum. */
                enum Root {
                    ROOT_UNKNOWN = 0,
                    ROOT_BOOT_VOLUME = 1,
                    ROOT_USER_HOME = 2,
                    ROOT_USER_DOCUMENTS = 3,
                    ROOT_USER_DOWNLOADS = 4,
                    ROOT_USER_MUSIC = 5,
                    ROOT_USER_PICTURES = 6,
                    ROOT_USER_VIDEOS = 7,
                    ROOT_USER_DESKTOP = 11,
                    ROOT_USER_APP_SUPPORT = 8,
                    ROOT_SHARED = 9,
                    ROOT_SHOW = 10,
                    ROOT_CURRENT_RESOURCE = 12
                }
            }

            /** Properties of an ExternalRelativePath. */
            interface IExternalRelativePath {

                /** ExternalRelativePath macos */
                macos?: (rv.data.URL.ExternalRelativePath.IMacOSExternalVolume|null);

                /** ExternalRelativePath win32 */
                win32?: (rv.data.URL.ExternalRelativePath.IWin32ExternalVolume|null);

                /** ExternalRelativePath path */
                path?: (string|null);
            }

            /** Represents an ExternalRelativePath. */
            class ExternalRelativePath implements IExternalRelativePath {

                /**
                 * Constructs a new ExternalRelativePath.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.URL.IExternalRelativePath);

                /** ExternalRelativePath macos. */
                public macos?: (rv.data.URL.ExternalRelativePath.IMacOSExternalVolume|null);

                /** ExternalRelativePath win32. */
                public win32?: (rv.data.URL.ExternalRelativePath.IWin32ExternalVolume|null);

                /** ExternalRelativePath path. */
                public path: string;

                /**
                 * Creates a new ExternalRelativePath instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ExternalRelativePath instance
                 */
                public static create(properties?: rv.data.URL.IExternalRelativePath): rv.data.URL.ExternalRelativePath;

                /**
                 * Encodes the specified ExternalRelativePath message. Does not implicitly {@link rv.data.URL.ExternalRelativePath.verify|verify} messages.
                 * @param message ExternalRelativePath message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.URL.IExternalRelativePath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ExternalRelativePath message, length delimited. Does not implicitly {@link rv.data.URL.ExternalRelativePath.verify|verify} messages.
                 * @param message ExternalRelativePath message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.URL.IExternalRelativePath, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ExternalRelativePath message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ExternalRelativePath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URL.ExternalRelativePath;

                /**
                 * Decodes an ExternalRelativePath message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ExternalRelativePath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URL.ExternalRelativePath;

                /**
                 * Verifies an ExternalRelativePath message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExternalRelativePath message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExternalRelativePath
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.URL.ExternalRelativePath;

                /**
                 * Creates a plain object from an ExternalRelativePath message. Also converts values to other types if specified.
                 * @param message ExternalRelativePath
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.URL.ExternalRelativePath, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExternalRelativePath to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ExternalRelativePath
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace ExternalRelativePath {

                /** Properties of a MacOSExternalVolume. */
                interface IMacOSExternalVolume {

                    /** MacOSExternalVolume volumeName */
                    volumeName?: (string|null);
                }

                /** Represents a MacOSExternalVolume. */
                class MacOSExternalVolume implements IMacOSExternalVolume {

                    /**
                     * Constructs a new MacOSExternalVolume.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.URL.ExternalRelativePath.IMacOSExternalVolume);

                    /** MacOSExternalVolume volumeName. */
                    public volumeName: string;

                    /**
                     * Creates a new MacOSExternalVolume instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MacOSExternalVolume instance
                     */
                    public static create(properties?: rv.data.URL.ExternalRelativePath.IMacOSExternalVolume): rv.data.URL.ExternalRelativePath.MacOSExternalVolume;

                    /**
                     * Encodes the specified MacOSExternalVolume message. Does not implicitly {@link rv.data.URL.ExternalRelativePath.MacOSExternalVolume.verify|verify} messages.
                     * @param message MacOSExternalVolume message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.URL.ExternalRelativePath.IMacOSExternalVolume, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MacOSExternalVolume message, length delimited. Does not implicitly {@link rv.data.URL.ExternalRelativePath.MacOSExternalVolume.verify|verify} messages.
                     * @param message MacOSExternalVolume message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.URL.ExternalRelativePath.IMacOSExternalVolume, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MacOSExternalVolume message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MacOSExternalVolume
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URL.ExternalRelativePath.MacOSExternalVolume;

                    /**
                     * Decodes a MacOSExternalVolume message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MacOSExternalVolume
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URL.ExternalRelativePath.MacOSExternalVolume;

                    /**
                     * Verifies a MacOSExternalVolume message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MacOSExternalVolume message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MacOSExternalVolume
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.URL.ExternalRelativePath.MacOSExternalVolume;

                    /**
                     * Creates a plain object from a MacOSExternalVolume message. Also converts values to other types if specified.
                     * @param message MacOSExternalVolume
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.URL.ExternalRelativePath.MacOSExternalVolume, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MacOSExternalVolume to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for MacOSExternalVolume
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Win32ExternalVolume. */
                interface IWin32ExternalVolume {

                    /** Win32ExternalVolume driveLetter */
                    driveLetter?: (string|null);

                    /** Win32ExternalVolume volumeName */
                    volumeName?: (string|null);

                    /** Win32ExternalVolume networkShare */
                    networkShare?: (boolean|null);
                }

                /** Represents a Win32ExternalVolume. */
                class Win32ExternalVolume implements IWin32ExternalVolume {

                    /**
                     * Constructs a new Win32ExternalVolume.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.URL.ExternalRelativePath.IWin32ExternalVolume);

                    /** Win32ExternalVolume driveLetter. */
                    public driveLetter: string;

                    /** Win32ExternalVolume volumeName. */
                    public volumeName: string;

                    /** Win32ExternalVolume networkShare. */
                    public networkShare: boolean;

                    /**
                     * Creates a new Win32ExternalVolume instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Win32ExternalVolume instance
                     */
                    public static create(properties?: rv.data.URL.ExternalRelativePath.IWin32ExternalVolume): rv.data.URL.ExternalRelativePath.Win32ExternalVolume;

                    /**
                     * Encodes the specified Win32ExternalVolume message. Does not implicitly {@link rv.data.URL.ExternalRelativePath.Win32ExternalVolume.verify|verify} messages.
                     * @param message Win32ExternalVolume message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.URL.ExternalRelativePath.IWin32ExternalVolume, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Win32ExternalVolume message, length delimited. Does not implicitly {@link rv.data.URL.ExternalRelativePath.Win32ExternalVolume.verify|verify} messages.
                     * @param message Win32ExternalVolume message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.URL.ExternalRelativePath.IWin32ExternalVolume, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Win32ExternalVolume message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Win32ExternalVolume
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URL.ExternalRelativePath.Win32ExternalVolume;

                    /**
                     * Decodes a Win32ExternalVolume message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Win32ExternalVolume
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URL.ExternalRelativePath.Win32ExternalVolume;

                    /**
                     * Verifies a Win32ExternalVolume message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Win32ExternalVolume message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Win32ExternalVolume
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.URL.ExternalRelativePath.Win32ExternalVolume;

                    /**
                     * Creates a plain object from a Win32ExternalVolume message. Also converts values to other types if specified.
                     * @param message Win32ExternalVolume
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.URL.ExternalRelativePath.Win32ExternalVolume, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Win32ExternalVolume to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Win32ExternalVolume
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** Platform enum. */
            enum Platform {
                PLATFORM_UNKNOWN = 0,
                PLATFORM_MACOS = 1,
                PLATFORM_WIN32 = 2,
                PLATFORM_WEB = 3
            }
        }

        /** Properties of a URLs. */
        interface IURLs {

            /** URLs urls */
            urls?: (rv.data.IURL[]|null);
        }

        /** Represents a URLs. */
        class URLs implements IURLs {

            /**
             * Constructs a new URLs.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IURLs);

            /** URLs urls. */
            public urls: rv.data.IURL[];

            /**
             * Creates a new URLs instance using the specified properties.
             * @param [properties] Properties to set
             * @returns URLs instance
             */
            public static create(properties?: rv.data.IURLs): rv.data.URLs;

            /**
             * Encodes the specified URLs message. Does not implicitly {@link rv.data.URLs.verify|verify} messages.
             * @param message URLs message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IURLs, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified URLs message, length delimited. Does not implicitly {@link rv.data.URLs.verify|verify} messages.
             * @param message URLs message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IURLs, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a URLs message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns URLs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.URLs;

            /**
             * Decodes a URLs message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns URLs
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.URLs;

            /**
             * Verifies a URLs message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a URLs message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns URLs
             */
            public static fromObject(object: { [k: string]: any }): rv.data.URLs;

            /**
             * Creates a plain object from a URLs message. Also converts values to other types if specified.
             * @param message URLs
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.URLs, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this URLs to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for URLs
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a Font. */
        interface IFont {

            /** Font name */
            name?: (string|null);

            /** Font size */
            size?: (number|null);

            /** Font italic */
            italic?: (boolean|null);

            /** Font bold */
            bold?: (boolean|null);

            /** Font family */
            family?: (string|null);

            /** Font face */
            face?: (string|null);
        }

        /** Represents a Font. */
        class Font implements IFont {

            /**
             * Constructs a new Font.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IFont);

            /** Font name. */
            public name: string;

            /** Font size. */
            public size: number;

            /** Font italic. */
            public italic: boolean;

            /** Font bold. */
            public bold: boolean;

            /** Font family. */
            public family: string;

            /** Font face. */
            public face: string;

            /**
             * Creates a new Font instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Font instance
             */
            public static create(properties?: rv.data.IFont): rv.data.Font;

            /**
             * Encodes the specified Font message. Does not implicitly {@link rv.data.Font.verify|verify} messages.
             * @param message Font message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IFont, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Font message, length delimited. Does not implicitly {@link rv.data.Font.verify|verify} messages.
             * @param message Font message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IFont, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Font message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Font
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Font;

            /**
             * Decodes a Font message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Font
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Font;

            /**
             * Verifies a Font message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Font message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Font
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Font;

            /**
             * Creates a plain object from a Font message. Also converts values to other types if specified.
             * @param message Font
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Font, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Font to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Font
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of an IntRange. */
        interface IIntRange {

            /** IntRange start */
            start?: (number|null);

            /** IntRange end */
            end?: (number|null);
        }

        /** Represents an IntRange. */
        class IntRange implements IIntRange {

            /**
             * Constructs a new IntRange.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IIntRange);

            /** IntRange start. */
            public start: number;

            /** IntRange end. */
            public end: number;

            /**
             * Creates a new IntRange instance using the specified properties.
             * @param [properties] Properties to set
             * @returns IntRange instance
             */
            public static create(properties?: rv.data.IIntRange): rv.data.IntRange;

            /**
             * Encodes the specified IntRange message. Does not implicitly {@link rv.data.IntRange.verify|verify} messages.
             * @param message IntRange message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IIntRange, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified IntRange message, length delimited. Does not implicitly {@link rv.data.IntRange.verify|verify} messages.
             * @param message IntRange message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IIntRange, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an IntRange message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns IntRange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.IntRange;

            /**
             * Decodes an IntRange message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns IntRange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.IntRange;

            /**
             * Verifies an IntRange message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an IntRange message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns IntRange
             */
            public static fromObject(object: { [k: string]: any }): rv.data.IntRange;

            /**
             * Creates a plain object from an IntRange message. Also converts values to other types if specified.
             * @param message IntRange
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.IntRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this IntRange to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for IntRange
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a CollectionElementType. */
        interface ICollectionElementType {

            /** CollectionElementType parameterUuid */
            parameterUuid?: (rv.data.IUUID|null);

            /** CollectionElementType parameterName */
            parameterName?: (string|null);

            /** CollectionElementType parentCollection */
            parentCollection?: (rv.data.ICollectionElementType|null);
        }

        /** Represents a CollectionElementType. */
        class CollectionElementType implements ICollectionElementType {

            /**
             * Constructs a new CollectionElementType.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ICollectionElementType);

            /** CollectionElementType parameterUuid. */
            public parameterUuid?: (rv.data.IUUID|null);

            /** CollectionElementType parameterName. */
            public parameterName: string;

            /** CollectionElementType parentCollection. */
            public parentCollection?: (rv.data.ICollectionElementType|null);

            /**
             * Creates a new CollectionElementType instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CollectionElementType instance
             */
            public static create(properties?: rv.data.ICollectionElementType): rv.data.CollectionElementType;

            /**
             * Encodes the specified CollectionElementType message. Does not implicitly {@link rv.data.CollectionElementType.verify|verify} messages.
             * @param message CollectionElementType message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ICollectionElementType, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CollectionElementType message, length delimited. Does not implicitly {@link rv.data.CollectionElementType.verify|verify} messages.
             * @param message CollectionElementType message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ICollectionElementType, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CollectionElementType message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CollectionElementType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.CollectionElementType;

            /**
             * Decodes a CollectionElementType message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CollectionElementType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.CollectionElementType;

            /**
             * Verifies a CollectionElementType message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CollectionElementType message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CollectionElementType
             */
            public static fromObject(object: { [k: string]: any }): rv.data.CollectionElementType;

            /**
             * Creates a plain object from a CollectionElementType message. Also converts values to other types if specified.
             * @param message CollectionElementType
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.CollectionElementType, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CollectionElementType to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for CollectionElementType
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a VideoInput. */
        interface IVideoInput {

            /** VideoInput uuid */
            uuid?: (rv.data.IUUID|null);

            /** VideoInput userDescription */
            userDescription?: (string|null);

            /** VideoInput videoInputDevice */
            videoInputDevice?: (rv.data.Media.IVideoDevice|null);

            /** VideoInput displayColor */
            displayColor?: (rv.data.IColor|null);

            /** VideoInput thumbnailPath */
            thumbnailPath?: (rv.data.IURL|null);

            /** VideoInput audioType */
            audioType?: (rv.data.VideoInput.AudioDeviceType|null);

            /** VideoInput alphaType */
            alphaType?: (rv.data.AlphaType|null);

            /** VideoInput audioDevice */
            audioDevice?: (rv.data.DigitalAudio.IDevice|null);

            /** VideoInput videoDevice */
            videoDevice?: (rv.data.Media.IVideoDevice|null);
        }

        /** Represents a VideoInput. */
        class VideoInput implements IVideoInput {

            /**
             * Constructs a new VideoInput.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IVideoInput);

            /** VideoInput uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** VideoInput userDescription. */
            public userDescription: string;

            /** VideoInput videoInputDevice. */
            public videoInputDevice?: (rv.data.Media.IVideoDevice|null);

            /** VideoInput displayColor. */
            public displayColor?: (rv.data.IColor|null);

            /** VideoInput thumbnailPath. */
            public thumbnailPath?: (rv.data.IURL|null);

            /** VideoInput audioType. */
            public audioType: rv.data.VideoInput.AudioDeviceType;

            /** VideoInput alphaType. */
            public alphaType: rv.data.AlphaType;

            /** VideoInput audioDevice. */
            public audioDevice?: (rv.data.DigitalAudio.IDevice|null);

            /** VideoInput videoDevice. */
            public videoDevice?: (rv.data.Media.IVideoDevice|null);

            /** VideoInput AltAudioSource. */
            public AltAudioSource?: ("audioDevice"|"videoDevice");

            /**
             * Creates a new VideoInput instance using the specified properties.
             * @param [properties] Properties to set
             * @returns VideoInput instance
             */
            public static create(properties?: rv.data.IVideoInput): rv.data.VideoInput;

            /**
             * Encodes the specified VideoInput message. Does not implicitly {@link rv.data.VideoInput.verify|verify} messages.
             * @param message VideoInput message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IVideoInput, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified VideoInput message, length delimited. Does not implicitly {@link rv.data.VideoInput.verify|verify} messages.
             * @param message VideoInput message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IVideoInput, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a VideoInput message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns VideoInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.VideoInput;

            /**
             * Decodes a VideoInput message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns VideoInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.VideoInput;

            /**
             * Verifies a VideoInput message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a VideoInput message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns VideoInput
             */
            public static fromObject(object: { [k: string]: any }): rv.data.VideoInput;

            /**
             * Creates a plain object from a VideoInput message. Also converts values to other types if specified.
             * @param message VideoInput
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.VideoInput, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this VideoInput to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for VideoInput
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace VideoInput {

            /** Properties of a SettingsDocument. */
            interface ISettingsDocument {

                /** SettingsDocument inputs */
                inputs?: (rv.data.IVideoInput[]|null);
            }

            /** Represents a SettingsDocument. */
            class SettingsDocument implements ISettingsDocument {

                /**
                 * Constructs a new SettingsDocument.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.VideoInput.ISettingsDocument);

                /** SettingsDocument inputs. */
                public inputs: rv.data.IVideoInput[];

                /**
                 * Creates a new SettingsDocument instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SettingsDocument instance
                 */
                public static create(properties?: rv.data.VideoInput.ISettingsDocument): rv.data.VideoInput.SettingsDocument;

                /**
                 * Encodes the specified SettingsDocument message. Does not implicitly {@link rv.data.VideoInput.SettingsDocument.verify|verify} messages.
                 * @param message SettingsDocument message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.VideoInput.ISettingsDocument, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SettingsDocument message, length delimited. Does not implicitly {@link rv.data.VideoInput.SettingsDocument.verify|verify} messages.
                 * @param message SettingsDocument message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.VideoInput.ISettingsDocument, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SettingsDocument message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SettingsDocument
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.VideoInput.SettingsDocument;

                /**
                 * Decodes a SettingsDocument message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SettingsDocument
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.VideoInput.SettingsDocument;

                /**
                 * Verifies a SettingsDocument message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SettingsDocument message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SettingsDocument
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.VideoInput.SettingsDocument;

                /**
                 * Creates a plain object from a SettingsDocument message. Also converts values to other types if specified.
                 * @param message SettingsDocument
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.VideoInput.SettingsDocument, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SettingsDocument to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for SettingsDocument
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** AudioDeviceType enum. */
            enum AudioDeviceType {
                AUDIO_DEVICE_TYPE_DEFAULT = 0,
                AUDIO_DEVICE_TYPE_NONE = 1,
                AUDIO_DEVICE_TYPE_ALTERNATE = 2
            }
        }

        /** Properties of an AudioInput. */
        interface IAudioInput {

            /** AudioInput uuid */
            uuid?: (rv.data.IUUID|null);

            /** AudioInput userDescription */
            userDescription?: (string|null);

            /** AudioInput behaviorMode */
            behaviorMode?: (rv.data.AudioInput.IBehaviorMode|null);

            /** AudioInput audioDevice */
            audioDevice?: (rv.data.DigitalAudio.IDevice|null);

            /** AudioInput videoDevice */
            videoDevice?: (rv.data.Media.IVideoDevice|null);
        }

        /** Represents an AudioInput. */
        class AudioInput implements IAudioInput {

            /**
             * Constructs a new AudioInput.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IAudioInput);

            /** AudioInput uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** AudioInput userDescription. */
            public userDescription: string;

            /** AudioInput behaviorMode. */
            public behaviorMode?: (rv.data.AudioInput.IBehaviorMode|null);

            /** AudioInput audioDevice. */
            public audioDevice?: (rv.data.DigitalAudio.IDevice|null);

            /** AudioInput videoDevice. */
            public videoDevice?: (rv.data.Media.IVideoDevice|null);

            /** AudioInput Source. */
            public Source?: ("audioDevice"|"videoDevice");

            /**
             * Creates a new AudioInput instance using the specified properties.
             * @param [properties] Properties to set
             * @returns AudioInput instance
             */
            public static create(properties?: rv.data.IAudioInput): rv.data.AudioInput;

            /**
             * Encodes the specified AudioInput message. Does not implicitly {@link rv.data.AudioInput.verify|verify} messages.
             * @param message AudioInput message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IAudioInput, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AudioInput message, length delimited. Does not implicitly {@link rv.data.AudioInput.verify|verify} messages.
             * @param message AudioInput message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IAudioInput, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AudioInput message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns AudioInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput;

            /**
             * Decodes an AudioInput message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns AudioInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput;

            /**
             * Verifies an AudioInput message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an AudioInput message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns AudioInput
             */
            public static fromObject(object: { [k: string]: any }): rv.data.AudioInput;

            /**
             * Creates a plain object from an AudioInput message. Also converts values to other types if specified.
             * @param message AudioInput
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.AudioInput, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this AudioInput to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for AudioInput
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace AudioInput {

            /** Properties of a BehaviorMode. */
            interface IBehaviorMode {

                /** BehaviorMode on */
                on?: (rv.data.AudioInput.BehaviorMode.IOn|null);

                /** BehaviorMode off */
                off?: (rv.data.AudioInput.BehaviorMode.IOff|null);

                /** BehaviorMode autoOn */
                autoOn?: (rv.data.AudioInput.BehaviorMode.IAutoOn|null);

                /** BehaviorMode autoOff */
                autoOff?: (rv.data.AudioInput.BehaviorMode.IAutoOff|null);
            }

            /** Represents a BehaviorMode. */
            class BehaviorMode implements IBehaviorMode {

                /**
                 * Constructs a new BehaviorMode.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.AudioInput.IBehaviorMode);

                /** BehaviorMode on. */
                public on?: (rv.data.AudioInput.BehaviorMode.IOn|null);

                /** BehaviorMode off. */
                public off?: (rv.data.AudioInput.BehaviorMode.IOff|null);

                /** BehaviorMode autoOn. */
                public autoOn?: (rv.data.AudioInput.BehaviorMode.IAutoOn|null);

                /** BehaviorMode autoOff. */
                public autoOff?: (rv.data.AudioInput.BehaviorMode.IAutoOff|null);

                /** BehaviorMode Mode. */
                public Mode?: ("on"|"off"|"autoOn"|"autoOff");

                /**
                 * Creates a new BehaviorMode instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns BehaviorMode instance
                 */
                public static create(properties?: rv.data.AudioInput.IBehaviorMode): rv.data.AudioInput.BehaviorMode;

                /**
                 * Encodes the specified BehaviorMode message. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.verify|verify} messages.
                 * @param message BehaviorMode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.AudioInput.IBehaviorMode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified BehaviorMode message, length delimited. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.verify|verify} messages.
                 * @param message BehaviorMode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.AudioInput.IBehaviorMode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a BehaviorMode message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns BehaviorMode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput.BehaviorMode;

                /**
                 * Decodes a BehaviorMode message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns BehaviorMode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput.BehaviorMode;

                /**
                 * Verifies a BehaviorMode message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a BehaviorMode message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns BehaviorMode
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.AudioInput.BehaviorMode;

                /**
                 * Creates a plain object from a BehaviorMode message. Also converts values to other types if specified.
                 * @param message BehaviorMode
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.AudioInput.BehaviorMode, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this BehaviorMode to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for BehaviorMode
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace BehaviorMode {

                /** Properties of an On. */
                interface IOn {
                }

                /** Represents an On. */
                class On implements IOn {

                    /**
                     * Constructs a new On.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.AudioInput.BehaviorMode.IOn);

                    /**
                     * Creates a new On instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns On instance
                     */
                    public static create(properties?: rv.data.AudioInput.BehaviorMode.IOn): rv.data.AudioInput.BehaviorMode.On;

                    /**
                     * Encodes the specified On message. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.On.verify|verify} messages.
                     * @param message On message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.AudioInput.BehaviorMode.IOn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified On message, length delimited. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.On.verify|verify} messages.
                     * @param message On message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.AudioInput.BehaviorMode.IOn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an On message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns On
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput.BehaviorMode.On;

                    /**
                     * Decodes an On message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns On
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput.BehaviorMode.On;

                    /**
                     * Verifies an On message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an On message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns On
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.AudioInput.BehaviorMode.On;

                    /**
                     * Creates a plain object from an On message. Also converts values to other types if specified.
                     * @param message On
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.AudioInput.BehaviorMode.On, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this On to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for On
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an Off. */
                interface IOff {
                }

                /** Represents an Off. */
                class Off implements IOff {

                    /**
                     * Constructs a new Off.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.AudioInput.BehaviorMode.IOff);

                    /**
                     * Creates a new Off instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Off instance
                     */
                    public static create(properties?: rv.data.AudioInput.BehaviorMode.IOff): rv.data.AudioInput.BehaviorMode.Off;

                    /**
                     * Encodes the specified Off message. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.Off.verify|verify} messages.
                     * @param message Off message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.AudioInput.BehaviorMode.IOff, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Off message, length delimited. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.Off.verify|verify} messages.
                     * @param message Off message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.AudioInput.BehaviorMode.IOff, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Off message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Off
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput.BehaviorMode.Off;

                    /**
                     * Decodes an Off message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Off
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput.BehaviorMode.Off;

                    /**
                     * Verifies an Off message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Off message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Off
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.AudioInput.BehaviorMode.Off;

                    /**
                     * Creates a plain object from an Off message. Also converts values to other types if specified.
                     * @param message Off
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.AudioInput.BehaviorMode.Off, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Off to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Off
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an AutoOff. */
                interface IAutoOff {
                }

                /** Represents an AutoOff. */
                class AutoOff implements IAutoOff {

                    /**
                     * Constructs a new AutoOff.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.AudioInput.BehaviorMode.IAutoOff);

                    /**
                     * Creates a new AutoOff instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns AutoOff instance
                     */
                    public static create(properties?: rv.data.AudioInput.BehaviorMode.IAutoOff): rv.data.AudioInput.BehaviorMode.AutoOff;

                    /**
                     * Encodes the specified AutoOff message. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.AutoOff.verify|verify} messages.
                     * @param message AutoOff message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.AudioInput.BehaviorMode.IAutoOff, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified AutoOff message, length delimited. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.AutoOff.verify|verify} messages.
                     * @param message AutoOff message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.AudioInput.BehaviorMode.IAutoOff, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an AutoOff message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns AutoOff
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput.BehaviorMode.AutoOff;

                    /**
                     * Decodes an AutoOff message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns AutoOff
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput.BehaviorMode.AutoOff;

                    /**
                     * Verifies an AutoOff message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AutoOff message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AutoOff
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.AudioInput.BehaviorMode.AutoOff;

                    /**
                     * Creates a plain object from an AutoOff message. Also converts values to other types if specified.
                     * @param message AutoOff
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.AudioInput.BehaviorMode.AutoOff, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AutoOff to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for AutoOff
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of an AutoOn. */
                interface IAutoOn {

                    /** AutoOn linkedVideoInputs */
                    linkedVideoInputs?: (number[]|null);
                }

                /** Represents an AutoOn. */
                class AutoOn implements IAutoOn {

                    /**
                     * Constructs a new AutoOn.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.AudioInput.BehaviorMode.IAutoOn);

                    /** AutoOn linkedVideoInputs. */
                    public linkedVideoInputs: number[];

                    /**
                     * Creates a new AutoOn instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns AutoOn instance
                     */
                    public static create(properties?: rv.data.AudioInput.BehaviorMode.IAutoOn): rv.data.AudioInput.BehaviorMode.AutoOn;

                    /**
                     * Encodes the specified AutoOn message. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.AutoOn.verify|verify} messages.
                     * @param message AutoOn message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.AudioInput.BehaviorMode.IAutoOn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified AutoOn message, length delimited. Does not implicitly {@link rv.data.AudioInput.BehaviorMode.AutoOn.verify|verify} messages.
                     * @param message AutoOn message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.AudioInput.BehaviorMode.IAutoOn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an AutoOn message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns AutoOn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AudioInput.BehaviorMode.AutoOn;

                    /**
                     * Decodes an AutoOn message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns AutoOn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AudioInput.BehaviorMode.AutoOn;

                    /**
                     * Verifies an AutoOn message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an AutoOn message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns AutoOn
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.AudioInput.BehaviorMode.AutoOn;

                    /**
                     * Creates a plain object from an AutoOn message. Also converts values to other types if specified.
                     * @param message AutoOn
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.AudioInput.BehaviorMode.AutoOn, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this AutoOn to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for AutoOn
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }
        }

        /** Properties of a Layer. */
        interface ILayer {

            /** Layer uuid */
            uuid?: (rv.data.IUUID|null);

            /** Layer name */
            name?: (string|null);

            /** Layer color */
            color?: (rv.data.IColor|null);

            /** Layer muted */
            muted?: (boolean|null);

            /** Layer hidden */
            hidden?: (boolean|null);

            /** Layer blendMode */
            blendMode?: (rv.data.Layer.BlendMode|null);

            /** Layer opacity */
            opacity?: (number|null);

            /** Layer selectedTargetSetUuid */
            selectedTargetSetUuid?: (rv.data.IUUID|null);

            /** Layer effectsPresetUuid */
            effectsPresetUuid?: (rv.data.IUUID|null);

            /** Layer effectsBuildDuration */
            effectsBuildDuration?: (number|null);

            /** Layer layerPresetUuid */
            layerPresetUuid?: (rv.data.IUUID|null);

            /** Layer hotKey */
            hotKey?: (rv.data.IHotKey|null);

            /** Layer transition */
            transition?: (rv.data.ITransition|null);

            /** Layer effects */
            effects?: (rv.data.IEffect[]|null);

            /** Layer blend */
            blend?: (rv.data.Layer.IBlending|null);
        }

        /** Represents a Layer. */
        class Layer implements ILayer {

            /**
             * Constructs a new Layer.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ILayer);

            /** Layer uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Layer name. */
            public name: string;

            /** Layer color. */
            public color?: (rv.data.IColor|null);

            /** Layer muted. */
            public muted: boolean;

            /** Layer hidden. */
            public hidden: boolean;

            /** Layer blendMode. */
            public blendMode: rv.data.Layer.BlendMode;

            /** Layer opacity. */
            public opacity: number;

            /** Layer selectedTargetSetUuid. */
            public selectedTargetSetUuid?: (rv.data.IUUID|null);

            /** Layer effectsPresetUuid. */
            public effectsPresetUuid?: (rv.data.IUUID|null);

            /** Layer effectsBuildDuration. */
            public effectsBuildDuration: number;

            /** Layer layerPresetUuid. */
            public layerPresetUuid?: (rv.data.IUUID|null);

            /** Layer hotKey. */
            public hotKey?: (rv.data.IHotKey|null);

            /** Layer transition. */
            public transition?: (rv.data.ITransition|null);

            /** Layer effects. */
            public effects: rv.data.IEffect[];

            /** Layer blend. */
            public blend?: (rv.data.Layer.IBlending|null);

            /**
             * Creates a new Layer instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Layer instance
             */
            public static create(properties?: rv.data.ILayer): rv.data.Layer;

            /**
             * Encodes the specified Layer message. Does not implicitly {@link rv.data.Layer.verify|verify} messages.
             * @param message Layer message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ILayer, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Layer message, length delimited. Does not implicitly {@link rv.data.Layer.verify|verify} messages.
             * @param message Layer message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ILayer, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Layer message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Layer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer;

            /**
             * Decodes a Layer message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Layer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer;

            /**
             * Verifies a Layer message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Layer message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Layer
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Layer;

            /**
             * Creates a plain object from a Layer message. Also converts values to other types if specified.
             * @param message Layer
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Layer, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Layer to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Layer
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Layer {

            /** Properties of a Preset. */
            interface IPreset {

                /** Preset uuid */
                uuid?: (rv.data.IUUID|null);

                /** Preset name */
                name?: (string|null);

                /** Preset layer */
                layer?: (rv.data.ILayer|null);
            }

            /** Represents a Preset. */
            class Preset implements IPreset {

                /**
                 * Constructs a new Preset.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Layer.IPreset);

                /** Preset uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Preset name. */
                public name: string;

                /** Preset layer. */
                public layer?: (rv.data.ILayer|null);

                /**
                 * Creates a new Preset instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Preset instance
                 */
                public static create(properties?: rv.data.Layer.IPreset): rv.data.Layer.Preset;

                /**
                 * Encodes the specified Preset message. Does not implicitly {@link rv.data.Layer.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Layer.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Preset message, length delimited. Does not implicitly {@link rv.data.Layer.Preset.verify|verify} messages.
                 * @param message Preset message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Layer.IPreset, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Preset message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Preset;

                /**
                 * Decodes a Preset message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Preset
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Preset;

                /**
                 * Verifies a Preset message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Preset message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Preset
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Layer.Preset;

                /**
                 * Creates a plain object from a Preset message. Also converts values to other types if specified.
                 * @param message Preset
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Layer.Preset, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Preset to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Preset
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Blending. */
            interface IBlending {

                /** Blending standard */
                standard?: (rv.data.Layer.Blending.IStandard|null);

                /** Blending matte */
                matte?: (rv.data.Layer.Blending.IMatte|null);
            }

            /** Represents a Blending. */
            class Blending implements IBlending {

                /**
                 * Constructs a new Blending.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Layer.IBlending);

                /** Blending standard. */
                public standard?: (rv.data.Layer.Blending.IStandard|null);

                /** Blending matte. */
                public matte?: (rv.data.Layer.Blending.IMatte|null);

                /** Blending BlendingType. */
                public BlendingType?: ("standard"|"matte");

                /**
                 * Creates a new Blending instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Blending instance
                 */
                public static create(properties?: rv.data.Layer.IBlending): rv.data.Layer.Blending;

                /**
                 * Encodes the specified Blending message. Does not implicitly {@link rv.data.Layer.Blending.verify|verify} messages.
                 * @param message Blending message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Layer.IBlending, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Blending message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.verify|verify} messages.
                 * @param message Blending message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Layer.IBlending, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Blending message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Blending
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending;

                /**
                 * Decodes a Blending message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Blending
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending;

                /**
                 * Verifies a Blending message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Blending message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Blending
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending;

                /**
                 * Creates a plain object from a Blending message. Also converts values to other types if specified.
                 * @param message Blending
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Layer.Blending, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Blending to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Blending
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Blending {

                /** Properties of a Standard. */
                interface IStandard {

                    /** Standard mode */
                    mode?: (rv.data.Layer.BlendMode|null);

                    /** Standard opacity */
                    opacity?: (number|null);
                }

                /** Represents a Standard. */
                class Standard implements IStandard {

                    /**
                     * Constructs a new Standard.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Layer.Blending.IStandard);

                    /** Standard mode. */
                    public mode: rv.data.Layer.BlendMode;

                    /** Standard opacity. */
                    public opacity: number;

                    /**
                     * Creates a new Standard instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Standard instance
                     */
                    public static create(properties?: rv.data.Layer.Blending.IStandard): rv.data.Layer.Blending.Standard;

                    /**
                     * Encodes the specified Standard message. Does not implicitly {@link rv.data.Layer.Blending.Standard.verify|verify} messages.
                     * @param message Standard message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Layer.Blending.IStandard, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Standard message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.Standard.verify|verify} messages.
                     * @param message Standard message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Layer.Blending.IStandard, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Standard message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Standard
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending.Standard;

                    /**
                     * Decodes a Standard message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Standard
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending.Standard;

                    /**
                     * Verifies a Standard message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Standard message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Standard
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending.Standard;

                    /**
                     * Creates a plain object from a Standard message. Also converts values to other types if specified.
                     * @param message Standard
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Layer.Blending.Standard, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Standard to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Standard
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a Matte. */
                interface IMatte {

                    /** Matte alpha */
                    alpha?: (rv.data.Layer.Blending.Matte.IAlpha|null);

                    /** Matte luma */
                    luma?: (rv.data.Layer.Blending.Matte.ILuma|null);

                    /** Matte white */
                    white?: (rv.data.Layer.Blending.Matte.IWhite|null);
                }

                /** Represents a Matte. */
                class Matte implements IMatte {

                    /**
                     * Constructs a new Matte.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Layer.Blending.IMatte);

                    /** Matte alpha. */
                    public alpha?: (rv.data.Layer.Blending.Matte.IAlpha|null);

                    /** Matte luma. */
                    public luma?: (rv.data.Layer.Blending.Matte.ILuma|null);

                    /** Matte white. */
                    public white?: (rv.data.Layer.Blending.Matte.IWhite|null);

                    /** Matte MatteType. */
                    public MatteType?: ("alpha"|"luma"|"white");

                    /**
                     * Creates a new Matte instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Matte instance
                     */
                    public static create(properties?: rv.data.Layer.Blending.IMatte): rv.data.Layer.Blending.Matte;

                    /**
                     * Encodes the specified Matte message. Does not implicitly {@link rv.data.Layer.Blending.Matte.verify|verify} messages.
                     * @param message Matte message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Layer.Blending.IMatte, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Matte message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.Matte.verify|verify} messages.
                     * @param message Matte message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Layer.Blending.IMatte, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Matte message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Matte
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending.Matte;

                    /**
                     * Decodes a Matte message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Matte
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending.Matte;

                    /**
                     * Verifies a Matte message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Matte message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Matte
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending.Matte;

                    /**
                     * Creates a plain object from a Matte message. Also converts values to other types if specified.
                     * @param message Matte
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Layer.Blending.Matte, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Matte to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Matte
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Matte {

                    /** Properties of an Alpha. */
                    interface IAlpha {

                        /** Alpha inverted */
                        inverted?: (boolean|null);
                    }

                    /** Represents an Alpha. */
                    class Alpha implements IAlpha {

                        /**
                         * Constructs a new Alpha.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Layer.Blending.Matte.IAlpha);

                        /** Alpha inverted. */
                        public inverted: boolean;

                        /**
                         * Creates a new Alpha instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Alpha instance
                         */
                        public static create(properties?: rv.data.Layer.Blending.Matte.IAlpha): rv.data.Layer.Blending.Matte.Alpha;

                        /**
                         * Encodes the specified Alpha message. Does not implicitly {@link rv.data.Layer.Blending.Matte.Alpha.verify|verify} messages.
                         * @param message Alpha message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Layer.Blending.Matte.IAlpha, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Alpha message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.Matte.Alpha.verify|verify} messages.
                         * @param message Alpha message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Layer.Blending.Matte.IAlpha, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an Alpha message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Alpha
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending.Matte.Alpha;

                        /**
                         * Decodes an Alpha message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Alpha
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending.Matte.Alpha;

                        /**
                         * Verifies an Alpha message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an Alpha message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Alpha
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending.Matte.Alpha;

                        /**
                         * Creates a plain object from an Alpha message. Also converts values to other types if specified.
                         * @param message Alpha
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Layer.Blending.Matte.Alpha, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Alpha to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Alpha
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a Luma. */
                    interface ILuma {

                        /** Luma inverted */
                        inverted?: (boolean|null);
                    }

                    /** Represents a Luma. */
                    class Luma implements ILuma {

                        /**
                         * Constructs a new Luma.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Layer.Blending.Matte.ILuma);

                        /** Luma inverted. */
                        public inverted: boolean;

                        /**
                         * Creates a new Luma instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Luma instance
                         */
                        public static create(properties?: rv.data.Layer.Blending.Matte.ILuma): rv.data.Layer.Blending.Matte.Luma;

                        /**
                         * Encodes the specified Luma message. Does not implicitly {@link rv.data.Layer.Blending.Matte.Luma.verify|verify} messages.
                         * @param message Luma message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Layer.Blending.Matte.ILuma, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Luma message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.Matte.Luma.verify|verify} messages.
                         * @param message Luma message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Layer.Blending.Matte.ILuma, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Luma message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Luma
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending.Matte.Luma;

                        /**
                         * Decodes a Luma message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Luma
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending.Matte.Luma;

                        /**
                         * Verifies a Luma message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Luma message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Luma
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending.Matte.Luma;

                        /**
                         * Creates a plain object from a Luma message. Also converts values to other types if specified.
                         * @param message Luma
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Layer.Blending.Matte.Luma, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Luma to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Luma
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a White. */
                    interface IWhite {
                    }

                    /** Represents a White. */
                    class White implements IWhite {

                        /**
                         * Constructs a new White.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Layer.Blending.Matte.IWhite);

                        /**
                         * Creates a new White instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns White instance
                         */
                        public static create(properties?: rv.data.Layer.Blending.Matte.IWhite): rv.data.Layer.Blending.Matte.White;

                        /**
                         * Encodes the specified White message. Does not implicitly {@link rv.data.Layer.Blending.Matte.White.verify|verify} messages.
                         * @param message White message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Layer.Blending.Matte.IWhite, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified White message, length delimited. Does not implicitly {@link rv.data.Layer.Blending.Matte.White.verify|verify} messages.
                         * @param message White message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Layer.Blending.Matte.IWhite, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a White message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns White
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Layer.Blending.Matte.White;

                        /**
                         * Decodes a White message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns White
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Layer.Blending.Matte.White;

                        /**
                         * Verifies a White message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a White message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns White
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Layer.Blending.Matte.White;

                        /**
                         * Creates a plain object from a White message. Also converts values to other types if specified.
                         * @param message White
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Layer.Blending.Matte.White, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this White to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for White
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }
                }
            }

            /** BlendMode enum. */
            enum BlendMode {
                BLEND_MODE_NORMAL = 0,
                BLEND_MODE_DISSOLVE = 1,
                BLEND_MODE_DARKEN = 2,
                BLEND_MODE_MULTIPLY = 3,
                BLEND_MODE_COLOR_BURN = 4,
                BLEND_MODE_LINEAR_BURN = 5,
                BLEND_MODE_DARKER_COLOR = 6,
                BLEND_MODE_LIGHTEN = 7,
                BLEND_MODE_SCREEN = 8,
                BLEND_MODE_COLOR_DODGE = 9,
                BLEND_MODE_LINEAR_DODGE = 10,
                BLEND_MODE_LIGHTER_COLOR = 11,
                BLEND_MODE_OVERLAY = 12,
                BLEND_MODE_SOFT_LIGHT = 13,
                BLEND_MODE_HARD_LIGHT = 14,
                BLEND_MODE_VIVID_LIGHT = 15,
                BLEND_MODE_LINEAR_LIGHT = 16,
                BLEND_MODE_PIN_LIGHT = 17,
                BLEND_MODE_HARD_MIX = 18,
                BLEND_MODE_DIFFERENCE = 19,
                BLEND_MODE_EXCLUSION = 20,
                BLEND_MODE_SUBTRACT = 21,
                BLEND_MODE_DIVIDE = 22,
                BLEND_MODE_HUE = 23,
                BLEND_MODE_SATURATION = 24,
                BLEND_MODE_COLOR = 25,
                BLEND_MODE_LUMINOSITY = 26
            }
        }

        /** Properties of a HotKey. */
        interface IHotKey {

            /** HotKey code */
            code?: (rv.data.KeyCode|null);

            /** HotKey controlIdentifier */
            controlIdentifier?: (string|null);
        }

        /** Represents a HotKey. */
        class HotKey implements IHotKey {

            /**
             * Constructs a new HotKey.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IHotKey);

            /** HotKey code. */
            public code: rv.data.KeyCode;

            /** HotKey controlIdentifier. */
            public controlIdentifier: string;

            /**
             * Creates a new HotKey instance using the specified properties.
             * @param [properties] Properties to set
             * @returns HotKey instance
             */
            public static create(properties?: rv.data.IHotKey): rv.data.HotKey;

            /**
             * Encodes the specified HotKey message. Does not implicitly {@link rv.data.HotKey.verify|verify} messages.
             * @param message HotKey message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IHotKey, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified HotKey message, length delimited. Does not implicitly {@link rv.data.HotKey.verify|verify} messages.
             * @param message HotKey message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IHotKey, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a HotKey message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns HotKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.HotKey;

            /**
             * Decodes a HotKey message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns HotKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.HotKey;

            /**
             * Verifies a HotKey message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a HotKey message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns HotKey
             */
            public static fromObject(object: { [k: string]: any }): rv.data.HotKey;

            /**
             * Creates a plain object from a HotKey message. Also converts values to other types if specified.
             * @param message HotKey
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.HotKey, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this HotKey to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for HotKey
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** KeyCode enum. */
        enum KeyCode {
            KEY_CODE_UNKNOWN = 0,
            KEY_CODE_ANSI_A = 1,
            KEY_CODE_ANSI_B = 2,
            KEY_CODE_ANSI_C = 3,
            KEY_CODE_ANSI_D = 4,
            KEY_CODE_ANSI_E = 5,
            KEY_CODE_ANSI_F = 6,
            KEY_CODE_ANSI_G = 7,
            KEY_CODE_ANSI_H = 8,
            KEY_CODE_ANSI_I = 9,
            KEY_CODE_ANSI_J = 10,
            KEY_CODE_ANSI_K = 11,
            KEY_CODE_ANSI_L = 12,
            KEY_CODE_ANSI_M = 13,
            KEY_CODE_ANSI_N = 14,
            KEY_CODE_ANSI_O = 15,
            KEY_CODE_ANSI_P = 16,
            KEY_CODE_ANSI_Q = 17,
            KEY_CODE_ANSI_R = 18,
            KEY_CODE_ANSI_S = 19,
            KEY_CODE_ANSI_T = 20,
            KEY_CODE_ANSI_U = 21,
            KEY_CODE_ANSI_V = 22,
            KEY_CODE_ANSI_W = 23,
            KEY_CODE_ANSI_X = 24,
            KEY_CODE_ANSI_Y = 25,
            KEY_CODE_ANSI_Z = 26,
            KEY_CODE_ANSI_0 = 27,
            KEY_CODE_ANSI_1 = 28,
            KEY_CODE_ANSI_2 = 29,
            KEY_CODE_ANSI_3 = 30,
            KEY_CODE_ANSI_4 = 31,
            KEY_CODE_ANSI_5 = 32,
            KEY_CODE_ANSI_6 = 33,
            KEY_CODE_ANSI_7 = 34,
            KEY_CODE_ANSI_8 = 35,
            KEY_CODE_ANSI_9 = 36,
            KEY_CODE_ANSI_EQUAL = 37,
            KEY_CODE_ANSI_MINUS = 38,
            KEY_CODE_ANSI_RIGHT_BRACKET = 39,
            KEY_CODE_ANSI_LEFT_BRACKET = 40,
            KEY_CODE_ANSI_QUOTE = 41,
            KEY_CODE_ANSI_SEMICOLON = 42,
            KEY_CODE_ANSI_BACKSLASH = 43,
            KEY_CODE_ANSI_COMMA = 44,
            KEY_CODE_ANSI_SLASH = 45,
            KEY_CODE_ANSI_PERIOD = 46,
            KEY_CODE_ANSI_GRAVE = 47,
            KEY_CODE_ANSI_KEYPAD_DECIMAL = 48,
            KEY_CODE_ANSI_KEYPAD_PLUS = 49,
            KEY_CODE_ANSI_KEYPAD_CLEAR = 50,
            KEY_CODE_ANSI_KEYPAD_DIVIDE = 51,
            KEY_CODE_ANSI_KEYPAD_ENTER = 52,
            KEY_CODE_ANSI_KEYPAD_MINUS = 53,
            KEY_CODE_ANSI_KEYPAD_EQUALS = 54,
            KEY_CODE_ANSI_KEYPAD_0 = 55,
            KEY_CODE_ANSI_KEYPAD_1 = 56,
            KEY_CODE_ANSI_KEYPAD_2 = 57,
            KEY_CODE_ANSI_KEYPAD_3 = 58,
            KEY_CODE_ANSI_KEYPAD_4 = 59,
            KEY_CODE_ANSI_KEYPAD_5 = 60,
            KEY_CODE_ANSI_KEYPAD_6 = 61,
            KEY_CODE_ANSI_KEYPAD_7 = 62,
            KEY_CODE_ANSI_KEYPAD_8 = 63,
            KEY_CODE_ANSI_KEYPAD_9 = 64,
            KEY_CODE_F1 = 65,
            KEY_CODE_F2 = 66,
            KEY_CODE_F3 = 67,
            KEY_CODE_F4 = 68,
            KEY_CODE_F5 = 69,
            KEY_CODE_F6 = 70,
            KEY_CODE_F7 = 71,
            KEY_CODE_F8 = 72,
            KEY_CODE_F9 = 73,
            KEY_CODE_F10 = 74,
            KEY_CODE_F11 = 75,
            KEY_CODE_F12 = 76,
            KEY_CODE_F13 = 77,
            KEY_CODE_F14 = 78,
            KEY_CODE_F15 = 79,
            KEY_CODE_F16 = 80,
            KEY_CODE_F17 = 81,
            KEY_CODE_F18 = 82,
            KEY_CODE_F19 = 83,
            KEY_CODE_F20 = 84,
            KEY_CODE_FUNCTION = 85,
            KEY_CODE_RETURN = 86,
            KEY_CODE_TAB = 87,
            KEY_CODE_SPACE = 88,
            KEY_CODE_DELETE = 89,
            KEY_CODE_ESCAPE = 90,
            KEY_CODE_COMMAND = 91,
            KEY_CODE_SHIFT = 92,
            KEY_CODE_CAPS_LOCK = 93,
            KEY_CODE_OPTION = 94,
            KEY_CODE_CONTROL = 95,
            KEY_CODE_RIGHT_SHIFT = 96,
            KEY_CODE_RIGHT_OPTION = 97,
            KEY_CODE_RIGHT_CONTROL = 98,
            KEY_CODE_VOLUME_UP = 99,
            KEY_CODE_VOLUME_DOWN = 100,
            KEY_CODE_MUTE = 101,
            KEY_CODE_HELP = 102,
            KEY_CODE_HOME = 103,
            KEY_CODE_PAGE_UP = 104,
            KEY_CODE_FORWARD_DELETE = 105,
            KEY_CODE_END = 106,
            KEY_CODE_PAGE_DOWN = 107,
            KEY_CODE_LEFT_ARROW = 108,
            KEY_CODE_RIGHT_ARROW = 109,
            KEY_CODE_DOWN_ARROW = 110,
            KEY_CODE_UP_ARROW = 111,
            KEY_CODE_ISO_SELECTION = 112,
            KEY_CODE_JIS_YEN = 113,
            KEY_CODE_JIS_UNDERSCORE = 114,
            KEY_CODE_JIS_KEYPAD_COMMA = 115,
            KEY_CODE_JIS_EISU = 116,
            KEY_CODE_JIS_KANA = 117
        }

        /** Properties of a Message. */
        interface IMessage {

            /** Message uuid */
            uuid?: (rv.data.IUUID|null);

            /** Message title */
            title?: (string|null);

            /** Message timeToRemove */
            timeToRemove?: (number|null);

            /** Message visibleOnNetwork */
            visibleOnNetwork?: (boolean|null);

            /** Message template */
            template?: (rv.data.ITemplateIdentification|null);

            /** Message clearType */
            clearType?: (rv.data.Message.ClearType|null);

            /** Message messageText */
            messageText?: (string|null);

            /** Message tokens */
            tokens?: (rv.data.Message.IToken[]|null);

            /** Message tokenValues */
            tokenValues?: (rv.data.Message.ITokenValue[]|null);
        }

        /** Represents a Message. */
        class Message implements IMessage {

            /**
             * Constructs a new Message.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IMessage);

            /** Message uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Message title. */
            public title: string;

            /** Message timeToRemove. */
            public timeToRemove: number;

            /** Message visibleOnNetwork. */
            public visibleOnNetwork: boolean;

            /** Message template. */
            public template?: (rv.data.ITemplateIdentification|null);

            /** Message clearType. */
            public clearType: rv.data.Message.ClearType;

            /** Message messageText. */
            public messageText: string;

            /** Message tokens. */
            public tokens: rv.data.Message.IToken[];

            /** Message tokenValues. */
            public tokenValues: rv.data.Message.ITokenValue[];

            /**
             * Creates a new Message instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Message instance
             */
            public static create(properties?: rv.data.IMessage): rv.data.Message;

            /**
             * Encodes the specified Message message. Does not implicitly {@link rv.data.Message.verify|verify} messages.
             * @param message Message message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Message message, length delimited. Does not implicitly {@link rv.data.Message.verify|verify} messages.
             * @param message Message message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Message message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message;

            /**
             * Decodes a Message message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Message
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message;

            /**
             * Verifies a Message message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Message message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Message
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Message;

            /**
             * Creates a plain object from a Message message. Also converts values to other types if specified.
             * @param message Message
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Message, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Message to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Message
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Message {

            /** Properties of a Token. */
            interface IToken {

                /** Token uuid */
                uuid?: (rv.data.IUUID|null);

                /** Token text */
                text?: (rv.data.Message.Token.ITokenTypeText|null);

                /** Token timer */
                timer?: (rv.data.Message.Token.ITokenTypeTimer|null);

                /** Token clock */
                clock?: (rv.data.Message.Token.ITokenTypeClock|null);
            }

            /** Represents a Token. */
            class Token implements IToken {

                /**
                 * Constructs a new Token.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Message.IToken);

                /** Token uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Token text. */
                public text?: (rv.data.Message.Token.ITokenTypeText|null);

                /** Token timer. */
                public timer?: (rv.data.Message.Token.ITokenTypeTimer|null);

                /** Token clock. */
                public clock?: (rv.data.Message.Token.ITokenTypeClock|null);

                /** Token TokenType. */
                public TokenType?: ("text"|"timer"|"clock");

                /**
                 * Creates a new Token instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Token instance
                 */
                public static create(properties?: rv.data.Message.IToken): rv.data.Message.Token;

                /**
                 * Encodes the specified Token message. Does not implicitly {@link rv.data.Message.Token.verify|verify} messages.
                 * @param message Token message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Message.IToken, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Token message, length delimited. Does not implicitly {@link rv.data.Message.Token.verify|verify} messages.
                 * @param message Token message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Message.IToken, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Token message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Token
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.Token;

                /**
                 * Decodes a Token message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Token
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.Token;

                /**
                 * Verifies a Token message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Token message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Token
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Message.Token;

                /**
                 * Creates a plain object from a Token message. Also converts values to other types if specified.
                 * @param message Token
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Message.Token, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Token to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Token
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Token {

                /** Properties of a TokenTypeText. */
                interface ITokenTypeText {

                    /** TokenTypeText name */
                    name?: (string|null);
                }

                /** Represents a TokenTypeText. */
                class TokenTypeText implements ITokenTypeText {

                    /**
                     * Constructs a new TokenTypeText.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.Token.ITokenTypeText);

                    /** TokenTypeText name. */
                    public name: string;

                    /**
                     * Creates a new TokenTypeText instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenTypeText instance
                     */
                    public static create(properties?: rv.data.Message.Token.ITokenTypeText): rv.data.Message.Token.TokenTypeText;

                    /**
                     * Encodes the specified TokenTypeText message. Does not implicitly {@link rv.data.Message.Token.TokenTypeText.verify|verify} messages.
                     * @param message TokenTypeText message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.Token.ITokenTypeText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenTypeText message, length delimited. Does not implicitly {@link rv.data.Message.Token.TokenTypeText.verify|verify} messages.
                     * @param message TokenTypeText message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.Token.ITokenTypeText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenTypeText message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenTypeText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.Token.TokenTypeText;

                    /**
                     * Decodes a TokenTypeText message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenTypeText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.Token.TokenTypeText;

                    /**
                     * Verifies a TokenTypeText message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenTypeText message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenTypeText
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.Token.TokenTypeText;

                    /**
                     * Creates a plain object from a TokenTypeText message. Also converts values to other types if specified.
                     * @param message TokenTypeText
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.Token.TokenTypeText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenTypeText to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenTypeText
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a TokenTypeTimer. */
                interface ITokenTypeTimer {

                    /** TokenTypeTimer name */
                    name?: (string|null);

                    /** TokenTypeTimer timerUuid */
                    timerUuid?: (rv.data.IUUID|null);
                }

                /** Represents a TokenTypeTimer. */
                class TokenTypeTimer implements ITokenTypeTimer {

                    /**
                     * Constructs a new TokenTypeTimer.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.Token.ITokenTypeTimer);

                    /** TokenTypeTimer name. */
                    public name: string;

                    /** TokenTypeTimer timerUuid. */
                    public timerUuid?: (rv.data.IUUID|null);

                    /**
                     * Creates a new TokenTypeTimer instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenTypeTimer instance
                     */
                    public static create(properties?: rv.data.Message.Token.ITokenTypeTimer): rv.data.Message.Token.TokenTypeTimer;

                    /**
                     * Encodes the specified TokenTypeTimer message. Does not implicitly {@link rv.data.Message.Token.TokenTypeTimer.verify|verify} messages.
                     * @param message TokenTypeTimer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.Token.ITokenTypeTimer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenTypeTimer message, length delimited. Does not implicitly {@link rv.data.Message.Token.TokenTypeTimer.verify|verify} messages.
                     * @param message TokenTypeTimer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.Token.ITokenTypeTimer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenTypeTimer message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenTypeTimer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.Token.TokenTypeTimer;

                    /**
                     * Decodes a TokenTypeTimer message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenTypeTimer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.Token.TokenTypeTimer;

                    /**
                     * Verifies a TokenTypeTimer message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenTypeTimer message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenTypeTimer
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.Token.TokenTypeTimer;

                    /**
                     * Creates a plain object from a TokenTypeTimer message. Also converts values to other types if specified.
                     * @param message TokenTypeTimer
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.Token.TokenTypeTimer, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenTypeTimer to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenTypeTimer
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a TokenTypeClock. */
                interface ITokenTypeClock {
                }

                /** Represents a TokenTypeClock. */
                class TokenTypeClock implements ITokenTypeClock {

                    /**
                     * Constructs a new TokenTypeClock.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.Token.ITokenTypeClock);

                    /**
                     * Creates a new TokenTypeClock instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenTypeClock instance
                     */
                    public static create(properties?: rv.data.Message.Token.ITokenTypeClock): rv.data.Message.Token.TokenTypeClock;

                    /**
                     * Encodes the specified TokenTypeClock message. Does not implicitly {@link rv.data.Message.Token.TokenTypeClock.verify|verify} messages.
                     * @param message TokenTypeClock message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.Token.ITokenTypeClock, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenTypeClock message, length delimited. Does not implicitly {@link rv.data.Message.Token.TokenTypeClock.verify|verify} messages.
                     * @param message TokenTypeClock message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.Token.ITokenTypeClock, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenTypeClock message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenTypeClock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.Token.TokenTypeClock;

                    /**
                     * Decodes a TokenTypeClock message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenTypeClock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.Token.TokenTypeClock;

                    /**
                     * Verifies a TokenTypeClock message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenTypeClock message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenTypeClock
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.Token.TokenTypeClock;

                    /**
                     * Creates a plain object from a TokenTypeClock message. Also converts values to other types if specified.
                     * @param message TokenTypeClock
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.Token.TokenTypeClock, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenTypeClock to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenTypeClock
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** Properties of a TokenValue. */
            interface ITokenValue {

                /** TokenValue tokenId */
                tokenId?: (rv.data.IUUID|null);

                /** TokenValue tokenName */
                tokenName?: (string|null);

                /** TokenValue text */
                text?: (rv.data.Message.TokenValue.ITokenValueText|null);

                /** TokenValue timer */
                timer?: (rv.data.Message.TokenValue.ITokenValueTimer|null);

                /** TokenValue clock */
                clock?: (rv.data.Message.TokenValue.ITokenValueClock|null);
            }

            /** Represents a TokenValue. */
            class TokenValue implements ITokenValue {

                /**
                 * Constructs a new TokenValue.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Message.ITokenValue);

                /** TokenValue tokenId. */
                public tokenId?: (rv.data.IUUID|null);

                /** TokenValue tokenName. */
                public tokenName: string;

                /** TokenValue text. */
                public text?: (rv.data.Message.TokenValue.ITokenValueText|null);

                /** TokenValue timer. */
                public timer?: (rv.data.Message.TokenValue.ITokenValueTimer|null);

                /** TokenValue clock. */
                public clock?: (rv.data.Message.TokenValue.ITokenValueClock|null);

                /** TokenValue TokenValueType. */
                public TokenValueType?: ("text"|"timer"|"clock");

                /**
                 * Creates a new TokenValue instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TokenValue instance
                 */
                public static create(properties?: rv.data.Message.ITokenValue): rv.data.Message.TokenValue;

                /**
                 * Encodes the specified TokenValue message. Does not implicitly {@link rv.data.Message.TokenValue.verify|verify} messages.
                 * @param message TokenValue message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Message.ITokenValue, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TokenValue message, length delimited. Does not implicitly {@link rv.data.Message.TokenValue.verify|verify} messages.
                 * @param message TokenValue message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Message.ITokenValue, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TokenValue message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TokenValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.TokenValue;

                /**
                 * Decodes a TokenValue message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TokenValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.TokenValue;

                /**
                 * Verifies a TokenValue message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TokenValue message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TokenValue
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Message.TokenValue;

                /**
                 * Creates a plain object from a TokenValue message. Also converts values to other types if specified.
                 * @param message TokenValue
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Message.TokenValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TokenValue to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TokenValue
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace TokenValue {

                /** Properties of a TokenValueText. */
                interface ITokenValueText {

                    /** TokenValueText value */
                    value?: (string|null);
                }

                /** Represents a TokenValueText. */
                class TokenValueText implements ITokenValueText {

                    /**
                     * Constructs a new TokenValueText.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.TokenValue.ITokenValueText);

                    /** TokenValueText value. */
                    public value: string;

                    /**
                     * Creates a new TokenValueText instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenValueText instance
                     */
                    public static create(properties?: rv.data.Message.TokenValue.ITokenValueText): rv.data.Message.TokenValue.TokenValueText;

                    /**
                     * Encodes the specified TokenValueText message. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueText.verify|verify} messages.
                     * @param message TokenValueText message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.TokenValue.ITokenValueText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenValueText message, length delimited. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueText.verify|verify} messages.
                     * @param message TokenValueText message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.TokenValue.ITokenValueText, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenValueText message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenValueText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.TokenValue.TokenValueText;

                    /**
                     * Decodes a TokenValueText message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenValueText
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.TokenValue.TokenValueText;

                    /**
                     * Verifies a TokenValueText message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenValueText message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenValueText
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.TokenValue.TokenValueText;

                    /**
                     * Creates a plain object from a TokenValueText message. Also converts values to other types if specified.
                     * @param message TokenValueText
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.TokenValue.TokenValueText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenValueText to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenValueText
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a TokenValueTimer. */
                interface ITokenValueTimer {

                    /** TokenValueTimer configuration */
                    configuration?: (rv.data.Timer.IConfiguration|null);

                    /** TokenValueTimer format */
                    format?: (rv.data.Timer.IFormat|null);
                }

                /** Represents a TokenValueTimer. */
                class TokenValueTimer implements ITokenValueTimer {

                    /**
                     * Constructs a new TokenValueTimer.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.TokenValue.ITokenValueTimer);

                    /** TokenValueTimer configuration. */
                    public configuration?: (rv.data.Timer.IConfiguration|null);

                    /** TokenValueTimer format. */
                    public format?: (rv.data.Timer.IFormat|null);

                    /**
                     * Creates a new TokenValueTimer instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenValueTimer instance
                     */
                    public static create(properties?: rv.data.Message.TokenValue.ITokenValueTimer): rv.data.Message.TokenValue.TokenValueTimer;

                    /**
                     * Encodes the specified TokenValueTimer message. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueTimer.verify|verify} messages.
                     * @param message TokenValueTimer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.TokenValue.ITokenValueTimer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenValueTimer message, length delimited. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueTimer.verify|verify} messages.
                     * @param message TokenValueTimer message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.TokenValue.ITokenValueTimer, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenValueTimer message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenValueTimer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.TokenValue.TokenValueTimer;

                    /**
                     * Decodes a TokenValueTimer message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenValueTimer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.TokenValue.TokenValueTimer;

                    /**
                     * Verifies a TokenValueTimer message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenValueTimer message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenValueTimer
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.TokenValue.TokenValueTimer;

                    /**
                     * Creates a plain object from a TokenValueTimer message. Also converts values to other types if specified.
                     * @param message TokenValueTimer
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.TokenValue.TokenValueTimer, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenValueTimer to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenValueTimer
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a TokenValueClock. */
                interface ITokenValueClock {

                    /** TokenValueClock format */
                    format?: (rv.data.Clock.IFormat|null);
                }

                /** Represents a TokenValueClock. */
                class TokenValueClock implements ITokenValueClock {

                    /**
                     * Constructs a new TokenValueClock.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Message.TokenValue.ITokenValueClock);

                    /** TokenValueClock format. */
                    public format?: (rv.data.Clock.IFormat|null);

                    /**
                     * Creates a new TokenValueClock instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TokenValueClock instance
                     */
                    public static create(properties?: rv.data.Message.TokenValue.ITokenValueClock): rv.data.Message.TokenValue.TokenValueClock;

                    /**
                     * Encodes the specified TokenValueClock message. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueClock.verify|verify} messages.
                     * @param message TokenValueClock message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Message.TokenValue.ITokenValueClock, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TokenValueClock message, length delimited. Does not implicitly {@link rv.data.Message.TokenValue.TokenValueClock.verify|verify} messages.
                     * @param message TokenValueClock message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Message.TokenValue.ITokenValueClock, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TokenValueClock message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TokenValueClock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Message.TokenValue.TokenValueClock;

                    /**
                     * Decodes a TokenValueClock message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TokenValueClock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Message.TokenValue.TokenValueClock;

                    /**
                     * Verifies a TokenValueClock message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TokenValueClock message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TokenValueClock
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Message.TokenValue.TokenValueClock;

                    /**
                     * Creates a plain object from a TokenValueClock message. Also converts values to other types if specified.
                     * @param message TokenValueClock
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Message.TokenValue.TokenValueClock, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TokenValueClock to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TokenValueClock
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }

            /** ClearType enum. */
            enum ClearType {
                CLEAR_TYPE_MANUAL = 0,
                CLEAR_TYPE_AFTER_TIME = 1,
                CLEAR_TYPE_AFTER_TIMERS = 2
            }
        }

        /** Properties of a MessageDocument. */
        interface IMessageDocument {

            /** MessageDocument applicationInfo */
            applicationInfo?: (rv.data.IApplicationInfo|null);

            /** MessageDocument messages */
            messages?: (rv.data.IMessage[]|null);
        }

        /** Represents a MessageDocument. */
        class MessageDocument implements IMessageDocument {

            /**
             * Constructs a new MessageDocument.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IMessageDocument);

            /** MessageDocument applicationInfo. */
            public applicationInfo?: (rv.data.IApplicationInfo|null);

            /** MessageDocument messages. */
            public messages: rv.data.IMessage[];

            /**
             * Creates a new MessageDocument instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MessageDocument instance
             */
            public static create(properties?: rv.data.IMessageDocument): rv.data.MessageDocument;

            /**
             * Encodes the specified MessageDocument message. Does not implicitly {@link rv.data.MessageDocument.verify|verify} messages.
             * @param message MessageDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IMessageDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MessageDocument message, length delimited. Does not implicitly {@link rv.data.MessageDocument.verify|verify} messages.
             * @param message MessageDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IMessageDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MessageDocument message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MessageDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.MessageDocument;

            /**
             * Decodes a MessageDocument message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MessageDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.MessageDocument;

            /**
             * Verifies a MessageDocument message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MessageDocument message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MessageDocument
             */
            public static fromObject(object: { [k: string]: any }): rv.data.MessageDocument;

            /**
             * Creates a plain object from a MessageDocument message. Also converts values to other types if specified.
             * @param message MessageDocument
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.MessageDocument, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MessageDocument to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for MessageDocument
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of an ApplicationInfo. */
        interface IApplicationInfo {

            /** ApplicationInfo platform */
            platform?: (rv.data.ApplicationInfo.Platform|null);

            /** ApplicationInfo platformVersion */
            platformVersion?: (rv.data.IVersion|null);

            /** ApplicationInfo application */
            application?: (rv.data.ApplicationInfo.Application|null);

            /** ApplicationInfo applicationVersion */
            applicationVersion?: (rv.data.IVersion|null);
        }

        /** Represents an ApplicationInfo. */
        class ApplicationInfo implements IApplicationInfo {

            /**
             * Constructs a new ApplicationInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IApplicationInfo);

            /** ApplicationInfo platform. */
            public platform: rv.data.ApplicationInfo.Platform;

            /** ApplicationInfo platformVersion. */
            public platformVersion?: (rv.data.IVersion|null);

            /** ApplicationInfo application. */
            public application: rv.data.ApplicationInfo.Application;

            /** ApplicationInfo applicationVersion. */
            public applicationVersion?: (rv.data.IVersion|null);

            /**
             * Creates a new ApplicationInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ApplicationInfo instance
             */
            public static create(properties?: rv.data.IApplicationInfo): rv.data.ApplicationInfo;

            /**
             * Encodes the specified ApplicationInfo message. Does not implicitly {@link rv.data.ApplicationInfo.verify|verify} messages.
             * @param message ApplicationInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IApplicationInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ApplicationInfo message, length delimited. Does not implicitly {@link rv.data.ApplicationInfo.verify|verify} messages.
             * @param message ApplicationInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IApplicationInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ApplicationInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ApplicationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.ApplicationInfo;

            /**
             * Decodes an ApplicationInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ApplicationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.ApplicationInfo;

            /**
             * Verifies an ApplicationInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ApplicationInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ApplicationInfo
             */
            public static fromObject(object: { [k: string]: any }): rv.data.ApplicationInfo;

            /**
             * Creates a plain object from an ApplicationInfo message. Also converts values to other types if specified.
             * @param message ApplicationInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.ApplicationInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ApplicationInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for ApplicationInfo
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace ApplicationInfo {

            /** Platform enum. */
            enum Platform {
                PLATFORM_UNDEFINED = 0,
                PLATFORM_MACOS = 1,
                PLATFORM_WINDOWS = 2
            }

            /** Application enum. */
            enum Application {
                APPLICATION_UNDEFINED = 0,
                APPLICATION_PROPRESENTER = 1,
                APPLICATION_PVP = 2,
                APPLICATION_PROVIDEOSERVER = 3,
                APPLICATION_SCOREBOARD = 4
            }
        }

        /** Properties of a Version. */
        interface IVersion {

            /** Version majorVersion */
            majorVersion?: (number|null);

            /** Version minorVersion */
            minorVersion?: (number|null);

            /** Version patchVersion */
            patchVersion?: (number|null);

            /** Version build */
            build?: (string|null);
        }

        /** Represents a Version. */
        class Version implements IVersion {

            /**
             * Constructs a new Version.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IVersion);

            /** Version majorVersion. */
            public majorVersion: number;

            /** Version minorVersion. */
            public minorVersion: number;

            /** Version patchVersion. */
            public patchVersion: number;

            /** Version build. */
            public build: string;

            /**
             * Creates a new Version instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Version instance
             */
            public static create(properties?: rv.data.IVersion): rv.data.Version;

            /**
             * Encodes the specified Version message. Does not implicitly {@link rv.data.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Version message, length delimited. Does not implicitly {@link rv.data.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Version message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Version;

            /**
             * Decodes a Version message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Version;

            /**
             * Verifies a Version message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Version
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Version;

            /**
             * Creates a plain object from a Version message. Also converts values to other types if specified.
             * @param message Version
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Version, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Version to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Version
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a TemplateIdentification. */
        interface ITemplateIdentification {

            /** TemplateIdentification uuid */
            uuid?: (rv.data.IUUID|null);

            /** TemplateIdentification name */
            name?: (string|null);

            /** TemplateIdentification slideUuid */
            slideUuid?: (rv.data.IUUID|null);

            /** TemplateIdentification slideName */
            slideName?: (string|null);

            /** TemplateIdentification slideIndex */
            slideIndex?: (number|null);
        }

        /** Represents a TemplateIdentification. */
        class TemplateIdentification implements ITemplateIdentification {

            /**
             * Constructs a new TemplateIdentification.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ITemplateIdentification);

            /** TemplateIdentification uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** TemplateIdentification name. */
            public name: string;

            /** TemplateIdentification slideUuid. */
            public slideUuid?: (rv.data.IUUID|null);

            /** TemplateIdentification slideName. */
            public slideName: string;

            /** TemplateIdentification slideIndex. */
            public slideIndex: number;

            /**
             * Creates a new TemplateIdentification instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TemplateIdentification instance
             */
            public static create(properties?: rv.data.ITemplateIdentification): rv.data.TemplateIdentification;

            /**
             * Encodes the specified TemplateIdentification message. Does not implicitly {@link rv.data.TemplateIdentification.verify|verify} messages.
             * @param message TemplateIdentification message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ITemplateIdentification, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TemplateIdentification message, length delimited. Does not implicitly {@link rv.data.TemplateIdentification.verify|verify} messages.
             * @param message TemplateIdentification message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ITemplateIdentification, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TemplateIdentification message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TemplateIdentification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.TemplateIdentification;

            /**
             * Decodes a TemplateIdentification message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TemplateIdentification
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.TemplateIdentification;

            /**
             * Verifies a TemplateIdentification message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TemplateIdentification message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TemplateIdentification
             */
            public static fromObject(object: { [k: string]: any }): rv.data.TemplateIdentification;

            /**
             * Creates a plain object from a TemplateIdentification message. Also converts values to other types if specified.
             * @param message TemplateIdentification
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.TemplateIdentification, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TemplateIdentification to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for TemplateIdentification
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a Clock. */
        interface IClock {

            /** Clock format */
            format?: (string|null);
        }

        /** Represents a Clock. */
        class Clock implements IClock {

            /**
             * Constructs a new Clock.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IClock);

            /** Clock format. */
            public format: string;

            /**
             * Creates a new Clock instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Clock instance
             */
            public static create(properties?: rv.data.IClock): rv.data.Clock;

            /**
             * Encodes the specified Clock message. Does not implicitly {@link rv.data.Clock.verify|verify} messages.
             * @param message Clock message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IClock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Clock message, length delimited. Does not implicitly {@link rv.data.Clock.verify|verify} messages.
             * @param message Clock message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IClock, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Clock message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Clock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Clock;

            /**
             * Decodes a Clock message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Clock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Clock;

            /**
             * Verifies a Clock message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Clock message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Clock
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Clock;

            /**
             * Creates a plain object from a Clock message. Also converts values to other types if specified.
             * @param message Clock
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Clock, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Clock to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Clock
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Clock {

            /** Properties of a Format. */
            interface IFormat {

                /** Format dateType */
                dateType?: (rv.data.Clock.Format.DateFormatterStyle|null);

                /** Format timeFormat */
                timeFormat?: (rv.data.Clock.Format.DateFormatterStyle|null);

                /** Format militaryTimeEnabled */
                militaryTimeEnabled?: (boolean|null);
            }

            /** Represents a Format. */
            class Format implements IFormat {

                /**
                 * Constructs a new Format.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Clock.IFormat);

                /** Format dateType. */
                public dateType: rv.data.Clock.Format.DateFormatterStyle;

                /** Format timeFormat. */
                public timeFormat: rv.data.Clock.Format.DateFormatterStyle;

                /** Format militaryTimeEnabled. */
                public militaryTimeEnabled: boolean;

                /**
                 * Creates a new Format instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Format instance
                 */
                public static create(properties?: rv.data.Clock.IFormat): rv.data.Clock.Format;

                /**
                 * Encodes the specified Format message. Does not implicitly {@link rv.data.Clock.Format.verify|verify} messages.
                 * @param message Format message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Clock.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Format message, length delimited. Does not implicitly {@link rv.data.Clock.Format.verify|verify} messages.
                 * @param message Format message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Clock.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Format message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Format
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Clock.Format;

                /**
                 * Decodes a Format message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Format
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Clock.Format;

                /**
                 * Verifies a Format message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Format message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Format
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Clock.Format;

                /**
                 * Creates a plain object from a Format message. Also converts values to other types if specified.
                 * @param message Format
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Clock.Format, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Format to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Format
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Format {

                /** DateFormatterStyle enum. */
                enum DateFormatterStyle {
                    DATE_FORMATTER_STYLE_NONE = 0,
                    DATE_FORMATTER_STYLE_SHORT = 1,
                    DATE_FORMATTER_STYLE_MEDIUM = 2,
                    DATE_FORMATTER_STYLE_LONG = 3,
                    DATE_FORMATTER_STYLE_FULL = 4
                }
            }
        }

        /** Properties of a Timer. */
        interface ITimer {

            /** Timer uuid */
            uuid?: (rv.data.IUUID|null);

            /** Timer name */
            name?: (string|null);

            /** Timer configuration */
            configuration?: (rv.data.Timer.IConfiguration|null);
        }

        /** Represents a Timer. */
        class Timer implements ITimer {

            /**
             * Constructs a new Timer.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ITimer);

            /** Timer uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Timer name. */
            public name: string;

            /** Timer configuration. */
            public configuration?: (rv.data.Timer.IConfiguration|null);

            /**
             * Creates a new Timer instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Timer instance
             */
            public static create(properties?: rv.data.ITimer): rv.data.Timer;

            /**
             * Encodes the specified Timer message. Does not implicitly {@link rv.data.Timer.verify|verify} messages.
             * @param message Timer message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ITimer, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Timer message, length delimited. Does not implicitly {@link rv.data.Timer.verify|verify} messages.
             * @param message Timer message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ITimer, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Timer message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Timer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer;

            /**
             * Decodes a Timer message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Timer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer;

            /**
             * Verifies a Timer message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Timer message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Timer
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Timer;

            /**
             * Creates a plain object from a Timer message. Also converts values to other types if specified.
             * @param message Timer
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Timer, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Timer to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Timer
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Timer {

            /** Properties of a Format. */
            interface IFormat {

                /** Format hour */
                hour?: (rv.data.Timer.Format.Style|null);

                /** Format minute */
                minute?: (rv.data.Timer.Format.Style|null);

                /** Format second */
                second?: (rv.data.Timer.Format.Style|null);

                /** Format millisecond */
                millisecond?: (rv.data.Timer.Format.Style|null);

                /** Format isWallClockTime */
                isWallClockTime?: (boolean|null);

                /** Format is_24HourTime */
                is_24HourTime?: (boolean|null);

                /** Format showMillisecondsUnderMinuteOnly */
                showMillisecondsUnderMinuteOnly?: (boolean|null);
            }

            /** Represents a Format. */
            class Format implements IFormat {

                /**
                 * Constructs a new Format.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Timer.IFormat);

                /** Format hour. */
                public hour: rv.data.Timer.Format.Style;

                /** Format minute. */
                public minute: rv.data.Timer.Format.Style;

                /** Format second. */
                public second: rv.data.Timer.Format.Style;

                /** Format millisecond. */
                public millisecond: rv.data.Timer.Format.Style;

                /** Format isWallClockTime. */
                public isWallClockTime: boolean;

                /** Format is_24HourTime. */
                public is_24HourTime: boolean;

                /** Format showMillisecondsUnderMinuteOnly. */
                public showMillisecondsUnderMinuteOnly: boolean;

                /**
                 * Creates a new Format instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Format instance
                 */
                public static create(properties?: rv.data.Timer.IFormat): rv.data.Timer.Format;

                /**
                 * Encodes the specified Format message. Does not implicitly {@link rv.data.Timer.Format.verify|verify} messages.
                 * @param message Format message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Timer.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Format message, length delimited. Does not implicitly {@link rv.data.Timer.Format.verify|verify} messages.
                 * @param message Format message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Timer.IFormat, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Format message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Format
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer.Format;

                /**
                 * Decodes a Format message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Format
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer.Format;

                /**
                 * Verifies a Format message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Format message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Format
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Timer.Format;

                /**
                 * Creates a plain object from a Format message. Also converts values to other types if specified.
                 * @param message Format
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Timer.Format, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Format to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Format
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Format {

                /** Style enum. */
                enum Style {
                    STYE_NONE = 0,
                    STYLE_SHORT = 1,
                    STYLE_LONG = 2,
                    STYLE_REMOVE_SHORT = 3,
                    STYLE_REMOVE_LONG = 4
                }
            }

            /** Properties of a Configuration. */
            interface IConfiguration {

                /** Configuration allowsOverrun */
                allowsOverrun?: (boolean|null);

                /** Configuration countdown */
                countdown?: (rv.data.Timer.Configuration.ITimerTypeCountdown|null);

                /** Configuration countdownToTime */
                countdownToTime?: (rv.data.Timer.Configuration.ITimerTypeCountdownToTime|null);

                /** Configuration elapsedTime */
                elapsedTime?: (rv.data.Timer.Configuration.ITimerTypeElapsedTime|null);
            }

            /** Represents a Configuration. */
            class Configuration implements IConfiguration {

                /**
                 * Constructs a new Configuration.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Timer.IConfiguration);

                /** Configuration allowsOverrun. */
                public allowsOverrun: boolean;

                /** Configuration countdown. */
                public countdown?: (rv.data.Timer.Configuration.ITimerTypeCountdown|null);

                /** Configuration countdownToTime. */
                public countdownToTime?: (rv.data.Timer.Configuration.ITimerTypeCountdownToTime|null);

                /** Configuration elapsedTime. */
                public elapsedTime?: (rv.data.Timer.Configuration.ITimerTypeElapsedTime|null);

                /** Configuration TimerType. */
                public TimerType?: ("countdown"|"countdownToTime"|"elapsedTime");

                /**
                 * Creates a new Configuration instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Configuration instance
                 */
                public static create(properties?: rv.data.Timer.IConfiguration): rv.data.Timer.Configuration;

                /**
                 * Encodes the specified Configuration message. Does not implicitly {@link rv.data.Timer.Configuration.verify|verify} messages.
                 * @param message Configuration message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Timer.IConfiguration, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Configuration message, length delimited. Does not implicitly {@link rv.data.Timer.Configuration.verify|verify} messages.
                 * @param message Configuration message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Timer.IConfiguration, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Configuration message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Configuration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer.Configuration;

                /**
                 * Decodes a Configuration message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Configuration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer.Configuration;

                /**
                 * Verifies a Configuration message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Configuration message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Configuration
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Timer.Configuration;

                /**
                 * Creates a plain object from a Configuration message. Also converts values to other types if specified.
                 * @param message Configuration
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Timer.Configuration, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Configuration to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Configuration
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Configuration {

                /** Properties of a TimerTypeCountdown. */
                interface ITimerTypeCountdown {

                    /** TimerTypeCountdown duration */
                    duration?: (number|null);
                }

                /** Represents a TimerTypeCountdown. */
                class TimerTypeCountdown implements ITimerTypeCountdown {

                    /**
                     * Constructs a new TimerTypeCountdown.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Timer.Configuration.ITimerTypeCountdown);

                    /** TimerTypeCountdown duration. */
                    public duration: number;

                    /**
                     * Creates a new TimerTypeCountdown instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TimerTypeCountdown instance
                     */
                    public static create(properties?: rv.data.Timer.Configuration.ITimerTypeCountdown): rv.data.Timer.Configuration.TimerTypeCountdown;

                    /**
                     * Encodes the specified TimerTypeCountdown message. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeCountdown.verify|verify} messages.
                     * @param message TimerTypeCountdown message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Timer.Configuration.ITimerTypeCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TimerTypeCountdown message, length delimited. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeCountdown.verify|verify} messages.
                     * @param message TimerTypeCountdown message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Timer.Configuration.ITimerTypeCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TimerTypeCountdown message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TimerTypeCountdown
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer.Configuration.TimerTypeCountdown;

                    /**
                     * Decodes a TimerTypeCountdown message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TimerTypeCountdown
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer.Configuration.TimerTypeCountdown;

                    /**
                     * Verifies a TimerTypeCountdown message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TimerTypeCountdown message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TimerTypeCountdown
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Timer.Configuration.TimerTypeCountdown;

                    /**
                     * Creates a plain object from a TimerTypeCountdown message. Also converts values to other types if specified.
                     * @param message TimerTypeCountdown
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Timer.Configuration.TimerTypeCountdown, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TimerTypeCountdown to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TimerTypeCountdown
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a TimerTypeCountdownToTime. */
                interface ITimerTypeCountdownToTime {

                    /** TimerTypeCountdownToTime timeOfDay */
                    timeOfDay?: (number|null);

                    /** TimerTypeCountdownToTime period */
                    period?: (rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod|null);
                }

                /** Represents a TimerTypeCountdownToTime. */
                class TimerTypeCountdownToTime implements ITimerTypeCountdownToTime {

                    /**
                     * Constructs a new TimerTypeCountdownToTime.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Timer.Configuration.ITimerTypeCountdownToTime);

                    /** TimerTypeCountdownToTime timeOfDay. */
                    public timeOfDay: number;

                    /** TimerTypeCountdownToTime period. */
                    public period: rv.data.Timer.Configuration.TimerTypeCountdownToTime.TimePeriod;

                    /**
                     * Creates a new TimerTypeCountdownToTime instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TimerTypeCountdownToTime instance
                     */
                    public static create(properties?: rv.data.Timer.Configuration.ITimerTypeCountdownToTime): rv.data.Timer.Configuration.TimerTypeCountdownToTime;

                    /**
                     * Encodes the specified TimerTypeCountdownToTime message. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeCountdownToTime.verify|verify} messages.
                     * @param message TimerTypeCountdownToTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Timer.Configuration.ITimerTypeCountdownToTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TimerTypeCountdownToTime message, length delimited. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeCountdownToTime.verify|verify} messages.
                     * @param message TimerTypeCountdownToTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Timer.Configuration.ITimerTypeCountdownToTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TimerTypeCountdownToTime message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TimerTypeCountdownToTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer.Configuration.TimerTypeCountdownToTime;

                    /**
                     * Decodes a TimerTypeCountdownToTime message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TimerTypeCountdownToTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer.Configuration.TimerTypeCountdownToTime;

                    /**
                     * Verifies a TimerTypeCountdownToTime message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TimerTypeCountdownToTime message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TimerTypeCountdownToTime
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Timer.Configuration.TimerTypeCountdownToTime;

                    /**
                     * Creates a plain object from a TimerTypeCountdownToTime message. Also converts values to other types if specified.
                     * @param message TimerTypeCountdownToTime
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Timer.Configuration.TimerTypeCountdownToTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TimerTypeCountdownToTime to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TimerTypeCountdownToTime
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace TimerTypeCountdownToTime {

                    /** TimePeriod enum. */
                    enum TimePeriod {
                        TIME_PERIOD_AM = 0,
                        TIME_PERIOD_PM = 1,
                        TIME_PERIOD_24 = 2
                    }
                }

                /** Properties of a TimerTypeElapsedTime. */
                interface ITimerTypeElapsedTime {

                    /** TimerTypeElapsedTime startTime */
                    startTime?: (number|null);

                    /** TimerTypeElapsedTime endTime */
                    endTime?: (number|null);

                    /** TimerTypeElapsedTime hasEndTime */
                    hasEndTime?: (boolean|null);
                }

                /** Represents a TimerTypeElapsedTime. */
                class TimerTypeElapsedTime implements ITimerTypeElapsedTime {

                    /**
                     * Constructs a new TimerTypeElapsedTime.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Timer.Configuration.ITimerTypeElapsedTime);

                    /** TimerTypeElapsedTime startTime. */
                    public startTime: number;

                    /** TimerTypeElapsedTime endTime. */
                    public endTime: number;

                    /** TimerTypeElapsedTime hasEndTime. */
                    public hasEndTime: boolean;

                    /**
                     * Creates a new TimerTypeElapsedTime instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TimerTypeElapsedTime instance
                     */
                    public static create(properties?: rv.data.Timer.Configuration.ITimerTypeElapsedTime): rv.data.Timer.Configuration.TimerTypeElapsedTime;

                    /**
                     * Encodes the specified TimerTypeElapsedTime message. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeElapsedTime.verify|verify} messages.
                     * @param message TimerTypeElapsedTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Timer.Configuration.ITimerTypeElapsedTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TimerTypeElapsedTime message, length delimited. Does not implicitly {@link rv.data.Timer.Configuration.TimerTypeElapsedTime.verify|verify} messages.
                     * @param message TimerTypeElapsedTime message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Timer.Configuration.ITimerTypeElapsedTime, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TimerTypeElapsedTime message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TimerTypeElapsedTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timer.Configuration.TimerTypeElapsedTime;

                    /**
                     * Decodes a TimerTypeElapsedTime message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TimerTypeElapsedTime
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timer.Configuration.TimerTypeElapsedTime;

                    /**
                     * Verifies a TimerTypeElapsedTime message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TimerTypeElapsedTime message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TimerTypeElapsedTime
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Timer.Configuration.TimerTypeElapsedTime;

                    /**
                     * Creates a plain object from a TimerTypeElapsedTime message. Also converts values to other types if specified.
                     * @param message TimerTypeElapsedTime
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Timer.Configuration.TimerTypeElapsedTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TimerTypeElapsedTime to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TimerTypeElapsedTime
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }
            }
        }

        /** Properties of a TimersDocument. */
        interface ITimersDocument {

            /** TimersDocument applicationInfo */
            applicationInfo?: (rv.data.IApplicationInfo|null);

            /** TimersDocument clock */
            clock?: (rv.data.IClock|null);

            /** TimersDocument timers */
            timers?: (rv.data.ITimer[]|null);
        }

        /** Represents a TimersDocument. */
        class TimersDocument implements ITimersDocument {

            /**
             * Constructs a new TimersDocument.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ITimersDocument);

            /** TimersDocument applicationInfo. */
            public applicationInfo?: (rv.data.IApplicationInfo|null);

            /** TimersDocument clock. */
            public clock?: (rv.data.IClock|null);

            /** TimersDocument timers. */
            public timers: rv.data.ITimer[];

            /**
             * Creates a new TimersDocument instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TimersDocument instance
             */
            public static create(properties?: rv.data.ITimersDocument): rv.data.TimersDocument;

            /**
             * Encodes the specified TimersDocument message. Does not implicitly {@link rv.data.TimersDocument.verify|verify} messages.
             * @param message TimersDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ITimersDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TimersDocument message, length delimited. Does not implicitly {@link rv.data.TimersDocument.verify|verify} messages.
             * @param message TimersDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ITimersDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TimersDocument message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TimersDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.TimersDocument;

            /**
             * Decodes a TimersDocument message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TimersDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.TimersDocument;

            /**
             * Verifies a TimersDocument message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TimersDocument message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TimersDocument
             */
            public static fromObject(object: { [k: string]: any }): rv.data.TimersDocument;

            /**
             * Creates a plain object from a TimersDocument message. Also converts values to other types if specified.
             * @param message TimersDocument
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.TimersDocument, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TimersDocument to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for TimersDocument
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a PropSlide. */
        interface IPropSlide {

            /** PropSlide baseSlide */
            baseSlide?: (rv.data.ISlide|null);

            /** PropSlide transition */
            transition?: (rv.data.ITransition|null);
        }

        /** Represents a PropSlide. */
        class PropSlide implements IPropSlide {

            /**
             * Constructs a new PropSlide.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IPropSlide);

            /** PropSlide baseSlide. */
            public baseSlide?: (rv.data.ISlide|null);

            /** PropSlide transition. */
            public transition?: (rv.data.ITransition|null);

            /**
             * Creates a new PropSlide instance using the specified properties.
             * @param [properties] Properties to set
             * @returns PropSlide instance
             */
            public static create(properties?: rv.data.IPropSlide): rv.data.PropSlide;

            /**
             * Encodes the specified PropSlide message. Does not implicitly {@link rv.data.PropSlide.verify|verify} messages.
             * @param message PropSlide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IPropSlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified PropSlide message, length delimited. Does not implicitly {@link rv.data.PropSlide.verify|verify} messages.
             * @param message PropSlide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IPropSlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a PropSlide message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns PropSlide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.PropSlide;

            /**
             * Decodes a PropSlide message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns PropSlide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.PropSlide;

            /**
             * Verifies a PropSlide message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a PropSlide message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns PropSlide
             */
            public static fromObject(object: { [k: string]: any }): rv.data.PropSlide;

            /**
             * Creates a plain object from a PropSlide message. Also converts values to other types if specified.
             * @param message PropSlide
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.PropSlide, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this PropSlide to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for PropSlide
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a Slide. */
        interface ISlide {

            /** Slide elements */
            elements?: (rv.data.Slide.IElement[]|null);

            /** Slide elementBuildOrder */
            elementBuildOrder?: (rv.data.IUUID[]|null);

            /** Slide guidelines */
            guidelines?: (rv.data.IAlignmentGuide[]|null);

            /** Slide drawsBackgroundColor */
            drawsBackgroundColor?: (boolean|null);

            /** Slide backgroundColor */
            backgroundColor?: (rv.data.IColor|null);

            /** Slide size */
            size?: (rv.data.Graphics.ISize|null);

            /** Slide uuid */
            uuid?: (rv.data.IUUID|null);
        }

        /** Represents a Slide. */
        class Slide implements ISlide {

            /**
             * Constructs a new Slide.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ISlide);

            /** Slide elements. */
            public elements: rv.data.Slide.IElement[];

            /** Slide elementBuildOrder. */
            public elementBuildOrder: rv.data.IUUID[];

            /** Slide guidelines. */
            public guidelines: rv.data.IAlignmentGuide[];

            /** Slide drawsBackgroundColor. */
            public drawsBackgroundColor: boolean;

            /** Slide backgroundColor. */
            public backgroundColor?: (rv.data.IColor|null);

            /** Slide size. */
            public size?: (rv.data.Graphics.ISize|null);

            /** Slide uuid. */
            public uuid?: (rv.data.IUUID|null);

            /**
             * Creates a new Slide instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Slide instance
             */
            public static create(properties?: rv.data.ISlide): rv.data.Slide;

            /**
             * Encodes the specified Slide message. Does not implicitly {@link rv.data.Slide.verify|verify} messages.
             * @param message Slide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ISlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Slide message, length delimited. Does not implicitly {@link rv.data.Slide.verify|verify} messages.
             * @param message Slide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ISlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Slide message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Slide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide;

            /**
             * Decodes a Slide message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Slide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide;

            /**
             * Verifies a Slide message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Slide message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Slide
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Slide;

            /**
             * Creates a plain object from a Slide message. Also converts values to other types if specified.
             * @param message Slide
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Slide, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Slide to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Slide
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Slide {

            /** Properties of an Element. */
            interface IElement {

                /** Element element */
                element?: (rv.data.Graphics.IElement|null);

                /** Element buildIn */
                buildIn?: (rv.data.Slide.Element.IBuild|null);

                /** Element buildOut */
                buildOut?: (rv.data.Slide.Element.IBuild|null);

                /** Element info */
                info?: (number|null);

                /** Element revealType */
                revealType?: (rv.data.Slide.Element.TextRevealType|null);

                /** Element dataLinks */
                dataLinks?: (rv.data.Slide.Element.IDataLink[]|null);

                /** Element childBuilds */
                childBuilds?: (rv.data.Slide.Element.IChildBuild[]|null);

                /** Element revealFromIndex */
                revealFromIndex?: (number|null);

                /** Element textScroller */
                textScroller?: (rv.data.Slide.Element.ITextScroller|null);
            }

            /** Represents an Element. */
            class Element implements IElement {

                /**
                 * Constructs a new Element.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Slide.IElement);

                /** Element element. */
                public element?: (rv.data.Graphics.IElement|null);

                /** Element buildIn. */
                public buildIn?: (rv.data.Slide.Element.IBuild|null);

                /** Element buildOut. */
                public buildOut?: (rv.data.Slide.Element.IBuild|null);

                /** Element info. */
                public info: number;

                /** Element revealType. */
                public revealType: rv.data.Slide.Element.TextRevealType;

                /** Element dataLinks. */
                public dataLinks: rv.data.Slide.Element.IDataLink[];

                /** Element childBuilds. */
                public childBuilds: rv.data.Slide.Element.IChildBuild[];

                /** Element revealFromIndex. */
                public revealFromIndex: number;

                /** Element textScroller. */
                public textScroller?: (rv.data.Slide.Element.ITextScroller|null);

                /**
                 * Creates a new Element instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Element instance
                 */
                public static create(properties?: rv.data.Slide.IElement): rv.data.Slide.Element;

                /**
                 * Encodes the specified Element message. Does not implicitly {@link rv.data.Slide.Element.verify|verify} messages.
                 * @param message Element message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Slide.IElement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Element message, length delimited. Does not implicitly {@link rv.data.Slide.Element.verify|verify} messages.
                 * @param message Element message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Slide.IElement, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Element message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Element
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element;

                /**
                 * Decodes an Element message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Element
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element;

                /**
                 * Verifies an Element message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Element message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Element
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element;

                /**
                 * Creates a plain object from an Element message. Also converts values to other types if specified.
                 * @param message Element
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Slide.Element, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Element to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Element
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            namespace Element {

                /** Properties of a Build. */
                interface IBuild {

                    /** Build uuid */
                    uuid?: (rv.data.IUUID|null);

                    /** Build elementUUID */
                    elementUUID?: (rv.data.IUUID|null);

                    /** Build start */
                    start?: (rv.data.Slide.Element.Build.Start|null);

                    /** Build delayTime */
                    delayTime?: (number|null);

                    /** Build transition */
                    transition?: (rv.data.ITransition|null);
                }

                /** Represents a Build. */
                class Build implements IBuild {

                    /**
                     * Constructs a new Build.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Slide.Element.IBuild);

                    /** Build uuid. */
                    public uuid?: (rv.data.IUUID|null);

                    /** Build elementUUID. */
                    public elementUUID?: (rv.data.IUUID|null);

                    /** Build start. */
                    public start: rv.data.Slide.Element.Build.Start;

                    /** Build delayTime. */
                    public delayTime: number;

                    /** Build transition. */
                    public transition?: (rv.data.ITransition|null);

                    /**
                     * Creates a new Build instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Build instance
                     */
                    public static create(properties?: rv.data.Slide.Element.IBuild): rv.data.Slide.Element.Build;

                    /**
                     * Encodes the specified Build message. Does not implicitly {@link rv.data.Slide.Element.Build.verify|verify} messages.
                     * @param message Build message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Slide.Element.IBuild, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Build message, length delimited. Does not implicitly {@link rv.data.Slide.Element.Build.verify|verify} messages.
                     * @param message Build message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Slide.Element.IBuild, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Build message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Build
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.Build;

                    /**
                     * Decodes a Build message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Build
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.Build;

                    /**
                     * Verifies a Build message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Build message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Build
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.Build;

                    /**
                     * Creates a plain object from a Build message. Also converts values to other types if specified.
                     * @param message Build
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Slide.Element.Build, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Build to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for Build
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace Build {

                    /** Start enum. */
                    enum Start {
                        START_ON_CLICK = 0,
                        START_WITH_PREVIOUS = 1,
                        START_AFTER_PREVIOUS = 2,
                        START_WITH_SLIDE = 3
                    }
                }

                /** Properties of a ChildBuild. */
                interface IChildBuild {

                    /** ChildBuild uuid */
                    uuid?: (rv.data.IUUID|null);

                    /** ChildBuild start */
                    start?: (rv.data.Slide.Element.Build.Start|null);

                    /** ChildBuild delayTime */
                    delayTime?: (number|null);

                    /** ChildBuild index */
                    index?: (number|null);
                }

                /** Represents a ChildBuild. */
                class ChildBuild implements IChildBuild {

                    /**
                     * Constructs a new ChildBuild.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Slide.Element.IChildBuild);

                    /** ChildBuild uuid. */
                    public uuid?: (rv.data.IUUID|null);

                    /** ChildBuild start. */
                    public start: rv.data.Slide.Element.Build.Start;

                    /** ChildBuild delayTime. */
                    public delayTime: number;

                    /** ChildBuild index. */
                    public index: number;

                    /**
                     * Creates a new ChildBuild instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChildBuild instance
                     */
                    public static create(properties?: rv.data.Slide.Element.IChildBuild): rv.data.Slide.Element.ChildBuild;

                    /**
                     * Encodes the specified ChildBuild message. Does not implicitly {@link rv.data.Slide.Element.ChildBuild.verify|verify} messages.
                     * @param message ChildBuild message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Slide.Element.IChildBuild, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChildBuild message, length delimited. Does not implicitly {@link rv.data.Slide.Element.ChildBuild.verify|verify} messages.
                     * @param message ChildBuild message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Slide.Element.IChildBuild, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChildBuild message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChildBuild
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.ChildBuild;

                    /**
                     * Decodes a ChildBuild message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChildBuild
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.ChildBuild;

                    /**
                     * Verifies a ChildBuild message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChildBuild message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChildBuild
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.ChildBuild;

                    /**
                     * Creates a plain object from a ChildBuild message. Also converts values to other types if specified.
                     * @param message ChildBuild
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Slide.Element.ChildBuild, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChildBuild to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for ChildBuild
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                /** Properties of a DataLink. */
                interface IDataLink {

                    /** DataLink ticker */
                    ticker?: (rv.data.Slide.Element.DataLink.ITicker|null);

                    /** DataLink alternateText */
                    alternateText?: (rv.data.Slide.Element.DataLink.IAlternateElementText|null);

                    /** DataLink timerText */
                    timerText?: (rv.data.Slide.Element.DataLink.ITimerText|null);

                    /** DataLink clockText */
                    clockText?: (rv.data.Slide.Element.DataLink.IClockText|null);

                    /** DataLink chordChart */
                    chordChart?: (rv.data.Slide.Element.DataLink.IChordChart|null);

                    /** DataLink outputScreen */
                    outputScreen?: (rv.data.Slide.Element.DataLink.IOutputScreen|null);

                    /** DataLink pcoLive */
                    pcoLive?: (rv.data.Slide.Element.DataLink.IPCOLive|null);

                    /** DataLink alternateFill */
                    alternateFill?: (rv.data.Slide.Element.DataLink.IAlternateElementFill|null);

                    /** DataLink visibilityLink */
                    visibilityLink?: (rv.data.Slide.Element.DataLink.IVisibilityLink|null);

                    /** DataLink slideText */
                    slideText?: (rv.data.Slide.Element.DataLink.ISlideText|null);

                    /** DataLink stageMessage */
                    stageMessage?: (rv.data.Slide.Element.DataLink.IStageMessage|null);

                    /** DataLink videoCountdown */
                    videoCountdown?: (rv.data.Slide.Element.DataLink.IVideoCountdown|null);

                    /** DataLink slideImage */
                    slideImage?: (rv.data.Slide.Element.DataLink.ISlideImage|null);

                    /** DataLink ccliText */
                    ccliText?: (rv.data.Slide.Element.DataLink.ICCLIText|null);

                    /** DataLink groupName */
                    groupName?: (rv.data.Slide.Element.DataLink.IGroupName|null);

                    /** DataLink groupColor */
                    groupColor?: (rv.data.Slide.Element.DataLink.IGroupColor|null);

                    /** DataLink presentationNotes */
                    presentationNotes?: (rv.data.Slide.Element.DataLink.IPresentationNotes|null);

                    /** DataLink playlistItem */
                    playlistItem?: (rv.data.Slide.Element.DataLink.IPlaylistItem|null);

                    /** DataLink autoAdvanceTimeRemaining */
                    autoAdvanceTimeRemaining?: (rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining|null);

                    /** DataLink captureStatusText */
                    captureStatusText?: (rv.data.Slide.Element.DataLink.ICaptureStatusText|null);

                    /** DataLink captureStatusColor */
                    captureStatusColor?: (rv.data.Slide.Element.DataLink.ICaptureStatusColor|null);

                    /** DataLink slideCount */
                    slideCount?: (rv.data.Slide.Element.DataLink.ISlideCount|null);

                    /** DataLink audioCountdown */
                    audioCountdown?: (rv.data.Slide.Element.DataLink.IAudioCountdown|null);

                    /** DataLink presentation */
                    presentation?: (rv.data.Slide.Element.DataLink.IPresentation|null);

                    /** DataLink slide_Label_Text */
                    slide_Label_Text?: (rv.data.Slide.Element.DataLink.ISlideLabelText|null);

                    /** DataLink slide_Label_Color */
                    slide_Label_Color?: (rv.data.Slide.Element.DataLink.ISlideLabelColor|null);

                    /** DataLink rssFeed */
                    rssFeed?: (rv.data.Slide.Element.DataLink.IRSSFeed|null);

                    /** DataLink fileFeed */
                    fileFeed?: (rv.data.Slide.Element.DataLink.IFileFeed|null);

                    /** DataLink chordProChart */
                    chordProChart?: (rv.data.Slide.Element.DataLink.IChordProChart|null);

                    /** DataLink playbackMarkerText */
                    playbackMarkerText?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerText|null);

                    /** DataLink playbackMarkerColor */
                    playbackMarkerColor?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier|null);

                    /** DataLink timecodeText */
                    timecodeText?: (rv.data.Slide.Element.DataLink.ITimecodeText|null);

                    /** DataLink timecodeStatus */
                    timecodeStatus?: (rv.data.Slide.Element.DataLink.ITimecodeStatus|null);
                }

                /** Represents a DataLink. */
                class DataLink implements IDataLink {

                    /**
                     * Constructs a new DataLink.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Slide.Element.IDataLink);

                    /** DataLink ticker. */
                    public ticker?: (rv.data.Slide.Element.DataLink.ITicker|null);

                    /** DataLink alternateText. */
                    public alternateText?: (rv.data.Slide.Element.DataLink.IAlternateElementText|null);

                    /** DataLink timerText. */
                    public timerText?: (rv.data.Slide.Element.DataLink.ITimerText|null);

                    /** DataLink clockText. */
                    public clockText?: (rv.data.Slide.Element.DataLink.IClockText|null);

                    /** DataLink chordChart. */
                    public chordChart?: (rv.data.Slide.Element.DataLink.IChordChart|null);

                    /** DataLink outputScreen. */
                    public outputScreen?: (rv.data.Slide.Element.DataLink.IOutputScreen|null);

                    /** DataLink pcoLive. */
                    public pcoLive?: (rv.data.Slide.Element.DataLink.IPCOLive|null);

                    /** DataLink alternateFill. */
                    public alternateFill?: (rv.data.Slide.Element.DataLink.IAlternateElementFill|null);

                    /** DataLink visibilityLink. */
                    public visibilityLink?: (rv.data.Slide.Element.DataLink.IVisibilityLink|null);

                    /** DataLink slideText. */
                    public slideText?: (rv.data.Slide.Element.DataLink.ISlideText|null);

                    /** DataLink stageMessage. */
                    public stageMessage?: (rv.data.Slide.Element.DataLink.IStageMessage|null);

                    /** DataLink videoCountdown. */
                    public videoCountdown?: (rv.data.Slide.Element.DataLink.IVideoCountdown|null);

                    /** DataLink slideImage. */
                    public slideImage?: (rv.data.Slide.Element.DataLink.ISlideImage|null);

                    /** DataLink ccliText. */
                    public ccliText?: (rv.data.Slide.Element.DataLink.ICCLIText|null);

                    /** DataLink groupName. */
                    public groupName?: (rv.data.Slide.Element.DataLink.IGroupName|null);

                    /** DataLink groupColor. */
                    public groupColor?: (rv.data.Slide.Element.DataLink.IGroupColor|null);

                    /** DataLink presentationNotes. */
                    public presentationNotes?: (rv.data.Slide.Element.DataLink.IPresentationNotes|null);

                    /** DataLink playlistItem. */
                    public playlistItem?: (rv.data.Slide.Element.DataLink.IPlaylistItem|null);

                    /** DataLink autoAdvanceTimeRemaining. */
                    public autoAdvanceTimeRemaining?: (rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining|null);

                    /** DataLink captureStatusText. */
                    public captureStatusText?: (rv.data.Slide.Element.DataLink.ICaptureStatusText|null);

                    /** DataLink captureStatusColor. */
                    public captureStatusColor?: (rv.data.Slide.Element.DataLink.ICaptureStatusColor|null);

                    /** DataLink slideCount. */
                    public slideCount?: (rv.data.Slide.Element.DataLink.ISlideCount|null);

                    /** DataLink audioCountdown. */
                    public audioCountdown?: (rv.data.Slide.Element.DataLink.IAudioCountdown|null);

                    /** DataLink presentation. */
                    public presentation?: (rv.data.Slide.Element.DataLink.IPresentation|null);

                    /** DataLink slide_Label_Text. */
                    public slide_Label_Text?: (rv.data.Slide.Element.DataLink.ISlideLabelText|null);

                    /** DataLink slide_Label_Color. */
                    public slide_Label_Color?: (rv.data.Slide.Element.DataLink.ISlideLabelColor|null);

                    /** DataLink rssFeed. */
                    public rssFeed?: (rv.data.Slide.Element.DataLink.IRSSFeed|null);

                    /** DataLink fileFeed. */
                    public fileFeed?: (rv.data.Slide.Element.DataLink.IFileFeed|null);

                    /** DataLink chordProChart. */
                    public chordProChart?: (rv.data.Slide.Element.DataLink.IChordProChart|null);

                    /** DataLink playbackMarkerText. */
                    public playbackMarkerText?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerText|null);

                    /** DataLink playbackMarkerColor. */
                    public playbackMarkerColor?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier|null);

                    /** DataLink timecodeText. */
                    public timecodeText?: (rv.data.Slide.Element.DataLink.ITimecodeText|null);

                    /** DataLink timecodeStatus. */
                    public timecodeStatus?: (rv.data.Slide.Element.DataLink.ITimecodeStatus|null);

                    /** DataLink PropertyType. */
                    public PropertyType?: ("ticker"|"alternateText"|"timerText"|"clockText"|"chordChart"|"outputScreen"|"pcoLive"|"alternateFill"|"visibilityLink"|"slideText"|"stageMessage"|"videoCountdown"|"slideImage"|"ccliText"|"groupName"|"groupColor"|"presentationNotes"|"playlistItem"|"autoAdvanceTimeRemaining"|"captureStatusText"|"captureStatusColor"|"slideCount"|"audioCountdown"|"presentation"|"slide_Label_Text"|"slide_Label_Color"|"rssFeed"|"fileFeed"|"chordProChart"|"playbackMarkerText"|"playbackMarkerColor"|"timecodeText"|"timecodeStatus");

                    /**
                     * Creates a new DataLink instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns DataLink instance
                     */
                    public static create(properties?: rv.data.Slide.Element.IDataLink): rv.data.Slide.Element.DataLink;

                    /**
                     * Encodes the specified DataLink message. Does not implicitly {@link rv.data.Slide.Element.DataLink.verify|verify} messages.
                     * @param message DataLink message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Slide.Element.IDataLink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified DataLink message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.verify|verify} messages.
                     * @param message DataLink message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Slide.Element.IDataLink, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a DataLink message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns DataLink
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink;

                    /**
                     * Decodes a DataLink message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns DataLink
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink;

                    /**
                     * Verifies a DataLink message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a DataLink message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns DataLink
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink;

                    /**
                     * Creates a plain object from a DataLink message. Also converts values to other types if specified.
                     * @param message DataLink
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Slide.Element.DataLink, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this DataLink to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for DataLink
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace DataLink {

                    /** Properties of a RSSFeed. */
                    interface IRSSFeed {

                        /** RSSFeed url */
                        url?: (rv.data.IURL|null);

                        /** RSSFeed content */
                        content?: (rv.data.Slide.Element.DataLink.RSSFeed.ContentType|null);

                        /** RSSFeed textDelimiter */
                        textDelimiter?: (string|null);
                    }

                    /** Represents a RSSFeed. */
                    class RSSFeed implements IRSSFeed {

                        /**
                         * Constructs a new RSSFeed.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IRSSFeed);

                        /** RSSFeed url. */
                        public url?: (rv.data.IURL|null);

                        /** RSSFeed content. */
                        public content: rv.data.Slide.Element.DataLink.RSSFeed.ContentType;

                        /** RSSFeed textDelimiter. */
                        public textDelimiter: string;

                        /**
                         * Creates a new RSSFeed instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns RSSFeed instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IRSSFeed): rv.data.Slide.Element.DataLink.RSSFeed;

                        /**
                         * Encodes the specified RSSFeed message. Does not implicitly {@link rv.data.Slide.Element.DataLink.RSSFeed.verify|verify} messages.
                         * @param message RSSFeed message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IRSSFeed, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified RSSFeed message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.RSSFeed.verify|verify} messages.
                         * @param message RSSFeed message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IRSSFeed, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a RSSFeed message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns RSSFeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.RSSFeed;

                        /**
                         * Decodes a RSSFeed message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns RSSFeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.RSSFeed;

                        /**
                         * Verifies a RSSFeed message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a RSSFeed message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns RSSFeed
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.RSSFeed;

                        /**
                         * Creates a plain object from a RSSFeed message. Also converts values to other types if specified.
                         * @param message RSSFeed
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.RSSFeed, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this RSSFeed to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for RSSFeed
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace RSSFeed {

                        /** ContentType enum. */
                        enum ContentType {
                            CONTENT_TYPE_TITLE_ONLY = 0,
                            CONTENT_TYPE_TITLE_AND_DESCRIPTION = 1
                        }
                    }

                    /** Properties of a FileFeed. */
                    interface IFileFeed {

                        /** FileFeed url */
                        url?: (rv.data.IURL|null);
                    }

                    /** Represents a FileFeed. */
                    class FileFeed implements IFileFeed {

                        /**
                         * Constructs a new FileFeed.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IFileFeed);

                        /** FileFeed url. */
                        public url?: (rv.data.IURL|null);

                        /**
                         * Creates a new FileFeed instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns FileFeed instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IFileFeed): rv.data.Slide.Element.DataLink.FileFeed;

                        /**
                         * Encodes the specified FileFeed message. Does not implicitly {@link rv.data.Slide.Element.DataLink.FileFeed.verify|verify} messages.
                         * @param message FileFeed message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IFileFeed, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified FileFeed message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.FileFeed.verify|verify} messages.
                         * @param message FileFeed message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IFileFeed, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a FileFeed message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns FileFeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.FileFeed;

                        /**
                         * Decodes a FileFeed message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns FileFeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.FileFeed;

                        /**
                         * Verifies a FileFeed message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a FileFeed message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns FileFeed
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.FileFeed;

                        /**
                         * Creates a plain object from a FileFeed message. Also converts values to other types if specified.
                         * @param message FileFeed
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.FileFeed, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this FileFeed to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for FileFeed
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a Ticker. */
                    interface ITicker {

                        /** Ticker playRate */
                        playRate?: (number|null);

                        /** Ticker shouldLoop */
                        shouldLoop?: (boolean|null);

                        /** Ticker loopDelay */
                        loopDelay?: (number|null);

                        /** Ticker textDelimiter */
                        textDelimiter?: (string|null);

                        /** Ticker textType */
                        textType?: (rv.data.Slide.Element.DataLink.Ticker.ITextType|null);

                        /** Ticker rssType */
                        rssType?: (rv.data.Slide.Element.DataLink.Ticker.IRSSType|null);

                        /** Ticker fileType */
                        fileType?: (rv.data.Slide.Element.DataLink.Ticker.IFileType|null);
                    }

                    /** Represents a Ticker. */
                    class Ticker implements ITicker {

                        /**
                         * Constructs a new Ticker.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ITicker);

                        /** Ticker playRate. */
                        public playRate: number;

                        /** Ticker shouldLoop. */
                        public shouldLoop: boolean;

                        /** Ticker loopDelay. */
                        public loopDelay: number;

                        /** Ticker textDelimiter. */
                        public textDelimiter: string;

                        /** Ticker textType. */
                        public textType?: (rv.data.Slide.Element.DataLink.Ticker.ITextType|null);

                        /** Ticker rssType. */
                        public rssType?: (rv.data.Slide.Element.DataLink.Ticker.IRSSType|null);

                        /** Ticker fileType. */
                        public fileType?: (rv.data.Slide.Element.DataLink.Ticker.IFileType|null);

                        /** Ticker SourceType. */
                        public SourceType?: ("textType"|"rssType"|"fileType");

                        /**
                         * Creates a new Ticker instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Ticker instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ITicker): rv.data.Slide.Element.DataLink.Ticker;

                        /**
                         * Encodes the specified Ticker message. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.verify|verify} messages.
                         * @param message Ticker message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ITicker, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Ticker message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.verify|verify} messages.
                         * @param message Ticker message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ITicker, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Ticker message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Ticker
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.Ticker;

                        /**
                         * Decodes a Ticker message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Ticker
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.Ticker;

                        /**
                         * Verifies a Ticker message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Ticker message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Ticker
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.Ticker;

                        /**
                         * Creates a plain object from a Ticker message. Also converts values to other types if specified.
                         * @param message Ticker
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.Ticker, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Ticker to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Ticker
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace Ticker {

                        /** Properties of a TextType. */
                        interface ITextType {

                            /** TextType text */
                            text?: (string|null);
                        }

                        /** Represents a TextType. */
                        class TextType implements ITextType {

                            /**
                             * Constructs a new TextType.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.Ticker.ITextType);

                            /** TextType text. */
                            public text: string;

                            /**
                             * Creates a new TextType instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns TextType instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.Ticker.ITextType): rv.data.Slide.Element.DataLink.Ticker.TextType;

                            /**
                             * Encodes the specified TextType message. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.TextType.verify|verify} messages.
                             * @param message TextType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.Ticker.ITextType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified TextType message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.TextType.verify|verify} messages.
                             * @param message TextType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.Ticker.ITextType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a TextType message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns TextType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.Ticker.TextType;

                            /**
                             * Decodes a TextType message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns TextType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.Ticker.TextType;

                            /**
                             * Verifies a TextType message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a TextType message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns TextType
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.Ticker.TextType;

                            /**
                             * Creates a plain object from a TextType message. Also converts values to other types if specified.
                             * @param message TextType
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.Ticker.TextType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this TextType to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for TextType
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        /** Properties of a RSSType. */
                        interface IRSSType {

                            /** RSSType url */
                            url?: (rv.data.IURL|null);

                            /** RSSType content */
                            content?: (rv.data.Slide.Element.DataLink.Ticker.RSSType.ContentType|null);
                        }

                        /** Represents a RSSType. */
                        class RSSType implements IRSSType {

                            /**
                             * Constructs a new RSSType.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.Ticker.IRSSType);

                            /** RSSType url. */
                            public url?: (rv.data.IURL|null);

                            /** RSSType content. */
                            public content: rv.data.Slide.Element.DataLink.Ticker.RSSType.ContentType;

                            /**
                             * Creates a new RSSType instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns RSSType instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.Ticker.IRSSType): rv.data.Slide.Element.DataLink.Ticker.RSSType;

                            /**
                             * Encodes the specified RSSType message. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.RSSType.verify|verify} messages.
                             * @param message RSSType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.Ticker.IRSSType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified RSSType message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.RSSType.verify|verify} messages.
                             * @param message RSSType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.Ticker.IRSSType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a RSSType message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns RSSType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.Ticker.RSSType;

                            /**
                             * Decodes a RSSType message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns RSSType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.Ticker.RSSType;

                            /**
                             * Verifies a RSSType message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a RSSType message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns RSSType
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.Ticker.RSSType;

                            /**
                             * Creates a plain object from a RSSType message. Also converts values to other types if specified.
                             * @param message RSSType
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.Ticker.RSSType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this RSSType to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for RSSType
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        namespace RSSType {

                            /** ContentType enum. */
                            enum ContentType {
                                CONTENT_TYPE_TITLE_ONLY = 0,
                                CONTENT_TYPE_TITLE_AND_DESCRIPTION = 1
                            }
                        }

                        /** Properties of a FileType. */
                        interface IFileType {

                            /** FileType url */
                            url?: (rv.data.IURL|null);
                        }

                        /** Represents a FileType. */
                        class FileType implements IFileType {

                            /**
                             * Constructs a new FileType.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.Ticker.IFileType);

                            /** FileType url. */
                            public url?: (rv.data.IURL|null);

                            /**
                             * Creates a new FileType instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns FileType instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.Ticker.IFileType): rv.data.Slide.Element.DataLink.Ticker.FileType;

                            /**
                             * Encodes the specified FileType message. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.FileType.verify|verify} messages.
                             * @param message FileType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.Ticker.IFileType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified FileType message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.Ticker.FileType.verify|verify} messages.
                             * @param message FileType message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.Ticker.IFileType, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a FileType message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns FileType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.Ticker.FileType;

                            /**
                             * Decodes a FileType message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns FileType
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.Ticker.FileType;

                            /**
                             * Verifies a FileType message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a FileType message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns FileType
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.Ticker.FileType;

                            /**
                             * Creates a plain object from a FileType message. Also converts values to other types if specified.
                             * @param message FileType
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.Ticker.FileType, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this FileType to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for FileType
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }
                    }

                    /** Properties of an AlternateElementText. */
                    interface IAlternateElementText {

                        /** AlternateElementText otherElementUuid */
                        otherElementUuid?: (rv.data.IUUID|null);

                        /** AlternateElementText otherElementName */
                        otherElementName?: (string|null);

                        /** AlternateElementText textTransformOptions */
                        textTransformOptions?: (number|null);

                        /** AlternateElementText textTransform */
                        textTransform?: (rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption|null);
                    }

                    /** Represents an AlternateElementText. */
                    class AlternateElementText implements IAlternateElementText {

                        /**
                         * Constructs a new AlternateElementText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IAlternateElementText);

                        /** AlternateElementText otherElementUuid. */
                        public otherElementUuid?: (rv.data.IUUID|null);

                        /** AlternateElementText otherElementName. */
                        public otherElementName: string;

                        /** AlternateElementText textTransformOptions. */
                        public textTransformOptions: number;

                        /** AlternateElementText textTransform. */
                        public textTransform: rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption;

                        /**
                         * Creates a new AlternateElementText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns AlternateElementText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IAlternateElementText): rv.data.Slide.Element.DataLink.AlternateElementText;

                        /**
                         * Encodes the specified AlternateElementText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.AlternateElementText.verify|verify} messages.
                         * @param message AlternateElementText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IAlternateElementText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified AlternateElementText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.AlternateElementText.verify|verify} messages.
                         * @param message AlternateElementText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IAlternateElementText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an AlternateElementText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns AlternateElementText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.AlternateElementText;

                        /**
                         * Decodes an AlternateElementText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns AlternateElementText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.AlternateElementText;

                        /**
                         * Verifies an AlternateElementText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an AlternateElementText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns AlternateElementText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.AlternateElementText;

                        /**
                         * Creates a plain object from an AlternateElementText message. Also converts values to other types if specified.
                         * @param message AlternateElementText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.AlternateElementText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this AlternateElementText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for AlternateElementText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace AlternateElementText {

                        /** TextTransformOption enum. */
                        enum TextTransformOption {
                            TEXT_TRANSFORM_OPTION_NONE = 0,
                            TEXT_TRANSFORM_OPTION_REMOVE_LINE_RETURNS = 1,
                            TEXT_TRANSFORM_OPTION_ONE_WORD_PER_LINE = 2,
                            TEXT_TRANSFORM_OPTION_ONE_CHARACTER_PER_LINE = 3
                        }
                    }

                    /** Properties of a CCLIText. */
                    interface ICCLIText {
                    }

                    /** Represents a CCLIText. */
                    class CCLIText implements ICCLIText {

                        /**
                         * Constructs a new CCLIText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ICCLIText);

                        /**
                         * Creates a new CCLIText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns CCLIText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ICCLIText): rv.data.Slide.Element.DataLink.CCLIText;

                        /**
                         * Encodes the specified CCLIText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.CCLIText.verify|verify} messages.
                         * @param message CCLIText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ICCLIText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified CCLIText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.CCLIText.verify|verify} messages.
                         * @param message CCLIText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ICCLIText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a CCLIText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns CCLIText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.CCLIText;

                        /**
                         * Decodes a CCLIText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns CCLIText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.CCLIText;

                        /**
                         * Verifies a CCLIText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a CCLIText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns CCLIText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.CCLIText;

                        /**
                         * Creates a plain object from a CCLIText message. Also converts values to other types if specified.
                         * @param message CCLIText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.CCLIText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this CCLIText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for CCLIText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a ColorTrigger. */
                    interface IColorTrigger {

                        /** ColorTrigger time */
                        time?: (number|null);

                        /** ColorTrigger color */
                        color?: (rv.data.IColor|null);
                    }

                    /** Represents a ColorTrigger. */
                    class ColorTrigger implements IColorTrigger {

                        /**
                         * Constructs a new ColorTrigger.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IColorTrigger);

                        /** ColorTrigger time. */
                        public time: number;

                        /** ColorTrigger color. */
                        public color?: (rv.data.IColor|null);

                        /**
                         * Creates a new ColorTrigger instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns ColorTrigger instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IColorTrigger): rv.data.Slide.Element.DataLink.ColorTrigger;

                        /**
                         * Encodes the specified ColorTrigger message. Does not implicitly {@link rv.data.Slide.Element.DataLink.ColorTrigger.verify|verify} messages.
                         * @param message ColorTrigger message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IColorTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified ColorTrigger message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.ColorTrigger.verify|verify} messages.
                         * @param message ColorTrigger message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IColorTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a ColorTrigger message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns ColorTrigger
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.ColorTrigger;

                        /**
                         * Decodes a ColorTrigger message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns ColorTrigger
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.ColorTrigger;

                        /**
                         * Verifies a ColorTrigger message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ColorTrigger message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ColorTrigger
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.ColorTrigger;

                        /**
                         * Creates a plain object from a ColorTrigger message. Also converts values to other types if specified.
                         * @param message ColorTrigger
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.ColorTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ColorTrigger to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for ColorTrigger
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a TimerText. */
                    interface ITimerText {

                        /** TimerText timerUuid */
                        timerUuid?: (rv.data.IUUID|null);

                        /** TimerText timerName */
                        timerName?: (string|null);

                        /** TimerText timerFormat */
                        timerFormat?: (rv.data.Timer.IFormat|null);

                        /** TimerText timerFormatString */
                        timerFormatString?: (string|null);

                        /** TimerText colorTriggers */
                        colorTriggers?: (rv.data.Slide.Element.DataLink.IColorTrigger[]|null);
                    }

                    /** Represents a TimerText. */
                    class TimerText implements ITimerText {

                        /**
                         * Constructs a new TimerText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ITimerText);

                        /** TimerText timerUuid. */
                        public timerUuid?: (rv.data.IUUID|null);

                        /** TimerText timerName. */
                        public timerName: string;

                        /** TimerText timerFormat. */
                        public timerFormat?: (rv.data.Timer.IFormat|null);

                        /** TimerText timerFormatString. */
                        public timerFormatString: string;

                        /** TimerText colorTriggers. */
                        public colorTriggers: rv.data.Slide.Element.DataLink.IColorTrigger[];

                        /**
                         * Creates a new TimerText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TimerText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ITimerText): rv.data.Slide.Element.DataLink.TimerText;

                        /**
                         * Encodes the specified TimerText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimerText.verify|verify} messages.
                         * @param message TimerText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ITimerText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TimerText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimerText.verify|verify} messages.
                         * @param message TimerText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ITimerText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TimerText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TimerText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.TimerText;

                        /**
                         * Decodes a TimerText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TimerText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.TimerText;

                        /**
                         * Verifies a TimerText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TimerText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TimerText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.TimerText;

                        /**
                         * Creates a plain object from a TimerText message. Also converts values to other types if specified.
                         * @param message TimerText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.TimerText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TimerText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for TimerText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a ClockText. */
                    interface IClockText {

                        /** ClockText clockFormatString */
                        clockFormatString?: (string|null);

                        /** ClockText format */
                        format?: (rv.data.Clock.IFormat|null);
                    }

                    /** Represents a ClockText. */
                    class ClockText implements IClockText {

                        /**
                         * Constructs a new ClockText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IClockText);

                        /** ClockText clockFormatString. */
                        public clockFormatString: string;

                        /** ClockText format. */
                        public format?: (rv.data.Clock.IFormat|null);

                        /**
                         * Creates a new ClockText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns ClockText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IClockText): rv.data.Slide.Element.DataLink.ClockText;

                        /**
                         * Encodes the specified ClockText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.ClockText.verify|verify} messages.
                         * @param message ClockText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IClockText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified ClockText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.ClockText.verify|verify} messages.
                         * @param message ClockText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IClockText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a ClockText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns ClockText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.ClockText;

                        /**
                         * Decodes a ClockText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns ClockText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.ClockText;

                        /**
                         * Verifies a ClockText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ClockText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ClockText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.ClockText;

                        /**
                         * Creates a plain object from a ClockText message. Also converts values to other types if specified.
                         * @param message ClockText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.ClockText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ClockText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for ClockText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a ChordChart. */
                    interface IChordChart {
                    }

                    /** Represents a ChordChart. */
                    class ChordChart implements IChordChart {

                        /**
                         * Constructs a new ChordChart.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IChordChart);

                        /**
                         * Creates a new ChordChart instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns ChordChart instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IChordChart): rv.data.Slide.Element.DataLink.ChordChart;

                        /**
                         * Encodes the specified ChordChart message. Does not implicitly {@link rv.data.Slide.Element.DataLink.ChordChart.verify|verify} messages.
                         * @param message ChordChart message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IChordChart, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified ChordChart message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.ChordChart.verify|verify} messages.
                         * @param message ChordChart message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IChordChart, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a ChordChart message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns ChordChart
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.ChordChart;

                        /**
                         * Decodes a ChordChart message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns ChordChart
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.ChordChart;

                        /**
                         * Verifies a ChordChart message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ChordChart message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ChordChart
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.ChordChart;

                        /**
                         * Creates a plain object from a ChordChart message. Also converts values to other types if specified.
                         * @param message ChordChart
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.ChordChart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ChordChart to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for ChordChart
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of an OutputScreen. */
                    interface IOutputScreen {

                        /** OutputScreen screenId */
                        screenId?: (rv.data.IUUID|null);

                        /** OutputScreen screenName */
                        screenName?: (string|null);
                    }

                    /** Represents an OutputScreen. */
                    class OutputScreen implements IOutputScreen {

                        /**
                         * Constructs a new OutputScreen.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IOutputScreen);

                        /** OutputScreen screenId. */
                        public screenId?: (rv.data.IUUID|null);

                        /** OutputScreen screenName. */
                        public screenName: string;

                        /**
                         * Creates a new OutputScreen instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns OutputScreen instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IOutputScreen): rv.data.Slide.Element.DataLink.OutputScreen;

                        /**
                         * Encodes the specified OutputScreen message. Does not implicitly {@link rv.data.Slide.Element.DataLink.OutputScreen.verify|verify} messages.
                         * @param message OutputScreen message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IOutputScreen, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified OutputScreen message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.OutputScreen.verify|verify} messages.
                         * @param message OutputScreen message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IOutputScreen, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an OutputScreen message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns OutputScreen
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.OutputScreen;

                        /**
                         * Decodes an OutputScreen message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns OutputScreen
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.OutputScreen;

                        /**
                         * Verifies an OutputScreen message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an OutputScreen message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns OutputScreen
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.OutputScreen;

                        /**
                         * Creates a plain object from an OutputScreen message. Also converts values to other types if specified.
                         * @param message OutputScreen
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.OutputScreen, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this OutputScreen to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for OutputScreen
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a PCOLive. */
                    interface IPCOLive {

                        /** PCOLive theme */
                        theme?: (rv.data.Slide.Element.DataLink.PCOLive.Theme|null);

                        /** PCOLive countdownType */
                        countdownType?: (rv.data.Slide.Element.DataLink.PCOLive.CountdownType|null);
                    }

                    /** Represents a PCOLive. */
                    class PCOLive implements IPCOLive {

                        /**
                         * Constructs a new PCOLive.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPCOLive);

                        /** PCOLive theme. */
                        public theme: rv.data.Slide.Element.DataLink.PCOLive.Theme;

                        /** PCOLive countdownType. */
                        public countdownType: rv.data.Slide.Element.DataLink.PCOLive.CountdownType;

                        /**
                         * Creates a new PCOLive instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns PCOLive instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPCOLive): rv.data.Slide.Element.DataLink.PCOLive;

                        /**
                         * Encodes the specified PCOLive message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PCOLive.verify|verify} messages.
                         * @param message PCOLive message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPCOLive, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified PCOLive message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PCOLive.verify|verify} messages.
                         * @param message PCOLive message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPCOLive, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a PCOLive message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns PCOLive
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PCOLive;

                        /**
                         * Decodes a PCOLive message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns PCOLive
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PCOLive;

                        /**
                         * Verifies a PCOLive message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a PCOLive message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns PCOLive
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PCOLive;

                        /**
                         * Creates a plain object from a PCOLive message. Also converts values to other types if specified.
                         * @param message PCOLive
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.PCOLive, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this PCOLive to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for PCOLive
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace PCOLive {

                        /** Theme enum. */
                        enum Theme {
                            PCOLIVE_THEME_LIGHT = 0,
                            PCOLIVE_THEME_DARK = 1
                        }

                        /** CountdownType enum. */
                        enum CountdownType {
                            COUNTDOWN_TYPE_FULL_ITEM_LENGTH = 0,
                            COUNTDOWN_TYPE_END_ITEM_ON_TIME = 1,
                            COUNTDOWN_TYPE_END_SERVICE_ON_TIME = 2
                        }
                    }

                    /** Properties of an AlternateElementFill. */
                    interface IAlternateElementFill {

                        /** AlternateElementFill otherElementUuid */
                        otherElementUuid?: (rv.data.IUUID|null);

                        /** AlternateElementFill otherElementName */
                        otherElementName?: (string|null);
                    }

                    /** Represents an AlternateElementFill. */
                    class AlternateElementFill implements IAlternateElementFill {

                        /**
                         * Constructs a new AlternateElementFill.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IAlternateElementFill);

                        /** AlternateElementFill otherElementUuid. */
                        public otherElementUuid?: (rv.data.IUUID|null);

                        /** AlternateElementFill otherElementName. */
                        public otherElementName: string;

                        /**
                         * Creates a new AlternateElementFill instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns AlternateElementFill instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IAlternateElementFill): rv.data.Slide.Element.DataLink.AlternateElementFill;

                        /**
                         * Encodes the specified AlternateElementFill message. Does not implicitly {@link rv.data.Slide.Element.DataLink.AlternateElementFill.verify|verify} messages.
                         * @param message AlternateElementFill message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IAlternateElementFill, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified AlternateElementFill message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.AlternateElementFill.verify|verify} messages.
                         * @param message AlternateElementFill message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IAlternateElementFill, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an AlternateElementFill message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns AlternateElementFill
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.AlternateElementFill;

                        /**
                         * Decodes an AlternateElementFill message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns AlternateElementFill
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.AlternateElementFill;

                        /**
                         * Verifies an AlternateElementFill message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an AlternateElementFill message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns AlternateElementFill
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.AlternateElementFill;

                        /**
                         * Creates a plain object from an AlternateElementFill message. Also converts values to other types if specified.
                         * @param message AlternateElementFill
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.AlternateElementFill, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this AlternateElementFill to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for AlternateElementFill
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a VisibilityLink. */
                    interface IVisibilityLink {

                        /** VisibilityLink visibilityCriterion */
                        visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.VisibilityCriterion|null);

                        /** VisibilityLink conditions */
                        conditions?: (rv.data.Slide.Element.DataLink.VisibilityLink.ICondition[]|null);
                    }

                    /** Represents a VisibilityLink. */
                    class VisibilityLink implements IVisibilityLink {

                        /**
                         * Constructs a new VisibilityLink.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IVisibilityLink);

                        /** VisibilityLink visibilityCriterion. */
                        public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.VisibilityCriterion;

                        /** VisibilityLink conditions. */
                        public conditions: rv.data.Slide.Element.DataLink.VisibilityLink.ICondition[];

                        /**
                         * Creates a new VisibilityLink instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns VisibilityLink instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IVisibilityLink): rv.data.Slide.Element.DataLink.VisibilityLink;

                        /**
                         * Encodes the specified VisibilityLink message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.verify|verify} messages.
                         * @param message VisibilityLink message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IVisibilityLink, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified VisibilityLink message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.verify|verify} messages.
                         * @param message VisibilityLink message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IVisibilityLink, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a VisibilityLink message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns VisibilityLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink;

                        /**
                         * Decodes a VisibilityLink message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns VisibilityLink
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink;

                        /**
                         * Verifies a VisibilityLink message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a VisibilityLink message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns VisibilityLink
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink;

                        /**
                         * Creates a plain object from a VisibilityLink message. Also converts values to other types if specified.
                         * @param message VisibilityLink
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this VisibilityLink to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for VisibilityLink
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace VisibilityLink {

                        /** Properties of a Condition. */
                        interface ICondition {

                            /** Condition elementVisibility */
                            elementVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility|null);

                            /** Condition timerVisibility */
                            timerVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility|null);

                            /** Condition videoCountdownVisibility */
                            videoCountdownVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility|null);

                            /** Condition captureSessionVisibility */
                            captureSessionVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility|null);

                            /** Condition videoInputVisibility */
                            videoInputVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility|null);

                            /** Condition audioCountdownVisibility */
                            audioCountdownVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility|null);
                        }

                        /** Represents a Condition. */
                        class Condition implements ICondition {

                            /**
                             * Constructs a new Condition.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.ICondition);

                            /** Condition elementVisibility. */
                            public elementVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility|null);

                            /** Condition timerVisibility. */
                            public timerVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility|null);

                            /** Condition videoCountdownVisibility. */
                            public videoCountdownVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility|null);

                            /** Condition captureSessionVisibility. */
                            public captureSessionVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility|null);

                            /** Condition videoInputVisibility. */
                            public videoInputVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility|null);

                            /** Condition audioCountdownVisibility. */
                            public audioCountdownVisibility?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility|null);

                            /** Condition ConditionType. */
                            public ConditionType?: ("elementVisibility"|"timerVisibility"|"videoCountdownVisibility"|"captureSessionVisibility"|"videoInputVisibility"|"audioCountdownVisibility");

                            /**
                             * Creates a new Condition instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Condition instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.ICondition): rv.data.Slide.Element.DataLink.VisibilityLink.Condition;

                            /**
                             * Encodes the specified Condition message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.verify|verify} messages.
                             * @param message Condition message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.ICondition, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Condition message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.verify|verify} messages.
                             * @param message Condition message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.ICondition, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Condition message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Condition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition;

                            /**
                             * Decodes a Condition message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Condition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition;

                            /**
                             * Verifies a Condition message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Condition message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Condition
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition;

                            /**
                             * Creates a plain object from a Condition message. Also converts values to other types if specified.
                             * @param message Condition
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Condition to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for Condition
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        namespace Condition {

                            /** Properties of an ElementVisibility. */
                            interface IElementVisibility {

                                /** ElementVisibility otherElementUuid */
                                otherElementUuid?: (rv.data.IUUID|null);

                                /** ElementVisibility otherElementName */
                                otherElementName?: (string|null);

                                /** ElementVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.ElementVisibilityCriterion|null);
                            }

                            /** Represents an ElementVisibility. */
                            class ElementVisibility implements IElementVisibility {

                                /**
                                 * Constructs a new ElementVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility);

                                /** ElementVisibility otherElementUuid. */
                                public otherElementUuid?: (rv.data.IUUID|null);

                                /** ElementVisibility otherElementName. */
                                public otherElementName: string;

                                /** ElementVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.ElementVisibilityCriterion;

                                /**
                                 * Creates a new ElementVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns ElementVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility;

                                /**
                                 * Encodes the specified ElementVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.verify|verify} messages.
                                 * @param message ElementVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified ElementVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility.verify|verify} messages.
                                 * @param message ElementVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IElementVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an ElementVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns ElementVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility;

                                /**
                                 * Decodes an ElementVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns ElementVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility;

                                /**
                                 * Verifies an ElementVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an ElementVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns ElementVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility;

                                /**
                                 * Creates a plain object from an ElementVisibility message. Also converts values to other types if specified.
                                 * @param message ElementVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ElementVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this ElementVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for ElementVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace ElementVisibility {

                                /** ElementVisibilityCriterion enum. */
                                enum ElementVisibilityCriterion {
                                    ELEMENT_VISIBILITY_CRITERION_HAS_TEXT = 0,
                                    ELEMENT_VISIBILITY_CRITERION_HAS_NO_TEXT = 1
                                }
                            }

                            /** Properties of a TimerVisibility. */
                            interface ITimerVisibility {

                                /** TimerVisibility timerUuid */
                                timerUuid?: (rv.data.IUUID|null);

                                /** TimerVisibility timerName */
                                timerName?: (string|null);

                                /** TimerVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.TimerVisibilityCriterion|null);
                            }

                            /** Represents a TimerVisibility. */
                            class TimerVisibility implements ITimerVisibility {

                                /**
                                 * Constructs a new TimerVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility);

                                /** TimerVisibility timerUuid. */
                                public timerUuid?: (rv.data.IUUID|null);

                                /** TimerVisibility timerName. */
                                public timerName: string;

                                /** TimerVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.TimerVisibilityCriterion;

                                /**
                                 * Creates a new TimerVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns TimerVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility;

                                /**
                                 * Encodes the specified TimerVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.verify|verify} messages.
                                 * @param message TimerVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified TimerVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility.verify|verify} messages.
                                 * @param message TimerVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ITimerVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes a TimerVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns TimerVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility;

                                /**
                                 * Decodes a TimerVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns TimerVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility;

                                /**
                                 * Verifies a TimerVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates a TimerVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns TimerVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility;

                                /**
                                 * Creates a plain object from a TimerVisibility message. Also converts values to other types if specified.
                                 * @param message TimerVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.TimerVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this TimerVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for TimerVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace TimerVisibility {

                                /** TimerVisibilityCriterion enum. */
                                enum TimerVisibilityCriterion {
                                    TIMER_VISIBILITY_CRITERION_HAS_TIME_REMAINING = 0,
                                    TIMER_VISIBILITY_CRITERION_HAS_EXPIRED = 1,
                                    TIMER_VISIBILITY_CRITERION_IS_RUNNING = 2,
                                    TIMER_VISIBILITY_CRITERION_NOT_RUNNING = 3
                                }
                            }

                            /** Properties of a VideoCountdownVisibility. */
                            interface IVideoCountdownVisibility {

                                /** VideoCountdownVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.VideoCountdownVisibilityCriterion|null);
                            }

                            /** Represents a VideoCountdownVisibility. */
                            class VideoCountdownVisibility implements IVideoCountdownVisibility {

                                /**
                                 * Constructs a new VideoCountdownVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility);

                                /** VideoCountdownVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.VideoCountdownVisibilityCriterion;

                                /**
                                 * Creates a new VideoCountdownVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns VideoCountdownVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility;

                                /**
                                 * Encodes the specified VideoCountdownVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.verify|verify} messages.
                                 * @param message VideoCountdownVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified VideoCountdownVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility.verify|verify} messages.
                                 * @param message VideoCountdownVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoCountdownVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes a VideoCountdownVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns VideoCountdownVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility;

                                /**
                                 * Decodes a VideoCountdownVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns VideoCountdownVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility;

                                /**
                                 * Verifies a VideoCountdownVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates a VideoCountdownVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns VideoCountdownVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility;

                                /**
                                 * Creates a plain object from a VideoCountdownVisibility message. Also converts values to other types if specified.
                                 * @param message VideoCountdownVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoCountdownVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this VideoCountdownVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for VideoCountdownVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace VideoCountdownVisibility {

                                /** VideoCountdownVisibilityCriterion enum. */
                                enum VideoCountdownVisibilityCriterion {
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING = 0,
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED = 1,
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING = 2,
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING = 3,
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING = 4,
                                    VIDEO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING = 5
                                }
                            }

                            /** Properties of an AudioCountdownVisibility. */
                            interface IAudioCountdownVisibility {

                                /** AudioCountdownVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.AudioCountdownVisibilityCriterion|null);
                            }

                            /** Represents an AudioCountdownVisibility. */
                            class AudioCountdownVisibility implements IAudioCountdownVisibility {

                                /**
                                 * Constructs a new AudioCountdownVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility);

                                /** AudioCountdownVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.AudioCountdownVisibilityCriterion;

                                /**
                                 * Creates a new AudioCountdownVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns AudioCountdownVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility;

                                /**
                                 * Encodes the specified AudioCountdownVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.verify|verify} messages.
                                 * @param message AudioCountdownVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified AudioCountdownVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility.verify|verify} messages.
                                 * @param message AudioCountdownVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IAudioCountdownVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes an AudioCountdownVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns AudioCountdownVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility;

                                /**
                                 * Decodes an AudioCountdownVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns AudioCountdownVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility;

                                /**
                                 * Verifies an AudioCountdownVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates an AudioCountdownVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns AudioCountdownVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility;

                                /**
                                 * Creates a plain object from an AudioCountdownVisibility message. Also converts values to other types if specified.
                                 * @param message AudioCountdownVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.AudioCountdownVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this AudioCountdownVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for AudioCountdownVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace AudioCountdownVisibility {

                                /** AudioCountdownVisibilityCriterion enum. */
                                enum AudioCountdownVisibilityCriterion {
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_TIME_REMAINING = 0,
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_HAS_EXPIRED = 1,
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_IS_RUNNING = 2,
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_RUNNING = 3,
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_LOOPING = 4,
                                    AUDIO_COUNTDOWN_VISIBILITY_CRITERION_NOT_LOOPING = 5
                                }
                            }

                            /** Properties of a CaptureSessionVisibility. */
                            interface ICaptureSessionVisibility {

                                /** CaptureSessionVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.CaptureSessionVisibilityCriterion|null);
                            }

                            /** Represents a CaptureSessionVisibility. */
                            class CaptureSessionVisibility implements ICaptureSessionVisibility {

                                /**
                                 * Constructs a new CaptureSessionVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility);

                                /** CaptureSessionVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.CaptureSessionVisibilityCriterion;

                                /**
                                 * Creates a new CaptureSessionVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns CaptureSessionVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility;

                                /**
                                 * Encodes the specified CaptureSessionVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.verify|verify} messages.
                                 * @param message CaptureSessionVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified CaptureSessionVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility.verify|verify} messages.
                                 * @param message CaptureSessionVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.ICaptureSessionVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes a CaptureSessionVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns CaptureSessionVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility;

                                /**
                                 * Decodes a CaptureSessionVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns CaptureSessionVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility;

                                /**
                                 * Verifies a CaptureSessionVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates a CaptureSessionVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns CaptureSessionVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility;

                                /**
                                 * Creates a plain object from a CaptureSessionVisibility message. Also converts values to other types if specified.
                                 * @param message CaptureSessionVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.CaptureSessionVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this CaptureSessionVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for CaptureSessionVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace CaptureSessionVisibility {

                                /** CaptureSessionVisibilityCriterion enum. */
                                enum CaptureSessionVisibilityCriterion {
                                    CAPTURE_SESSION_VISIBILITY_CRITERION_ACTIVE = 0,
                                    CAPTURE_SESSION_VISIBILITY_CRITERION_INACTIVE = 1
                                }
                            }

                            /** Properties of a VideoInputVisibility. */
                            interface IVideoInputVisibility {

                                /** VideoInputVisibility videoInputIndex */
                                videoInputIndex?: (number|null);

                                /** VideoInputVisibility visibilityCriterion */
                                visibilityCriterion?: (rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.VideoInputVisibilityCriterion|null);
                            }

                            /** Represents a VideoInputVisibility. */
                            class VideoInputVisibility implements IVideoInputVisibility {

                                /**
                                 * Constructs a new VideoInputVisibility.
                                 * @param [properties] Properties to set
                                 */
                                constructor(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility);

                                /** VideoInputVisibility videoInputIndex. */
                                public videoInputIndex: number;

                                /** VideoInputVisibility visibilityCriterion. */
                                public visibilityCriterion: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.VideoInputVisibilityCriterion;

                                /**
                                 * Creates a new VideoInputVisibility instance using the specified properties.
                                 * @param [properties] Properties to set
                                 * @returns VideoInputVisibility instance
                                 */
                                public static create(properties?: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility;

                                /**
                                 * Encodes the specified VideoInputVisibility message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.verify|verify} messages.
                                 * @param message VideoInputVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encode(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Encodes the specified VideoInputVisibility message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility.verify|verify} messages.
                                 * @param message VideoInputVisibility message or plain object to encode
                                 * @param [writer] Writer to encode to
                                 * @returns Writer
                                 */
                                public static encodeDelimited(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.IVideoInputVisibility, writer?: $protobuf.Writer): $protobuf.Writer;

                                /**
                                 * Decodes a VideoInputVisibility message from the specified reader or buffer.
                                 * @param reader Reader or buffer to decode from
                                 * @param [length] Message length if known beforehand
                                 * @returns VideoInputVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility;

                                /**
                                 * Decodes a VideoInputVisibility message from the specified reader or buffer, length delimited.
                                 * @param reader Reader or buffer to decode from
                                 * @returns VideoInputVisibility
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility;

                                /**
                                 * Verifies a VideoInputVisibility message.
                                 * @param message Plain object to verify
                                 * @returns `null` if valid, otherwise the reason why it is not
                                 */
                                public static verify(message: { [k: string]: any }): (string|null);

                                /**
                                 * Creates a VideoInputVisibility message from a plain object. Also converts values to their respective internal types.
                                 * @param object Plain object
                                 * @returns VideoInputVisibility
                                 */
                                public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility;

                                /**
                                 * Creates a plain object from a VideoInputVisibility message. Also converts values to other types if specified.
                                 * @param message VideoInputVisibility
                                 * @param [options] Conversion options
                                 * @returns Plain object
                                 */
                                public static toObject(message: rv.data.Slide.Element.DataLink.VisibilityLink.Condition.VideoInputVisibility, options?: $protobuf.IConversionOptions): { [k: string]: any };

                                /**
                                 * Converts this VideoInputVisibility to JSON.
                                 * @returns JSON object
                                 */
                                public toJSON(): { [k: string]: any };

                                /**
                                 * Gets the default type url for VideoInputVisibility
                                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                                 * @returns The default type url
                                 */
                                public static getTypeUrl(typeUrlPrefix?: string): string;
                            }

                            namespace VideoInputVisibility {

                                /** VideoInputVisibilityCriterion enum. */
                                enum VideoInputVisibilityCriterion {
                                    VIDEO_INPUT_VISIBILITY_CRITERION_ACTIVE = 0,
                                    VIDEO_INPUT_VISIBILITY_CRITERION_INACTIVE = 1
                                }
                            }
                        }

                        /** VisibilityCriterion enum. */
                        enum VisibilityCriterion {
                            VISIBILITY_CRITERION_ALL = 0,
                            VISIBILITY_CRITERION_ANY = 1,
                            VISIBILITY_CRITERION_NONE = 2
                        }
                    }

                    /** Properties of a SlideText. */
                    interface ISlideText {

                        /** SlideText sourceSlide */
                        sourceSlide?: (rv.data.Slide.Element.DataLink.SlideSourceType|null);

                        /** SlideText sourceOption */
                        sourceOption?: (rv.data.Slide.Element.DataLink.SlideText.TextSourceOption|null);

                        /** SlideText preserveNotesFormat */
                        preserveNotesFormat?: (boolean|null);

                        /** SlideText nameToMatch */
                        nameToMatch?: (string|null);

                        /** SlideText elementTextTransform */
                        elementTextTransform?: (rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption|null);
                    }

                    /** Represents a SlideText. */
                    class SlideText implements ISlideText {

                        /**
                         * Constructs a new SlideText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ISlideText);

                        /** SlideText sourceSlide. */
                        public sourceSlide: rv.data.Slide.Element.DataLink.SlideSourceType;

                        /** SlideText sourceOption. */
                        public sourceOption: rv.data.Slide.Element.DataLink.SlideText.TextSourceOption;

                        /** SlideText preserveNotesFormat. */
                        public preserveNotesFormat: boolean;

                        /** SlideText nameToMatch. */
                        public nameToMatch: string;

                        /** SlideText elementTextTransform. */
                        public elementTextTransform: rv.data.Slide.Element.DataLink.AlternateElementText.TextTransformOption;

                        /**
                         * Creates a new SlideText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SlideText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ISlideText): rv.data.Slide.Element.DataLink.SlideText;

                        /**
                         * Encodes the specified SlideText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideText.verify|verify} messages.
                         * @param message SlideText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ISlideText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SlideText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideText.verify|verify} messages.
                         * @param message SlideText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ISlideText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SlideText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SlideText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.SlideText;

                        /**
                         * Decodes a SlideText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SlideText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.SlideText;

                        /**
                         * Verifies a SlideText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SlideText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SlideText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.SlideText;

                        /**
                         * Creates a plain object from a SlideText message. Also converts values to other types if specified.
                         * @param message SlideText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.SlideText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SlideText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for SlideText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace SlideText {

                        /** TextSourceOption enum. */
                        enum TextSourceOption {
                            TEXT_SOURCE_OPTION_TEXT = 0,
                            TEXT_SOURCE_OPTION_NOTES = 1,
                            TEXT_SOURCE_OPTION_ELEMENT_MATCHING_NAME = 2
                        }
                    }

                    /** Properties of a SlideImage. */
                    interface ISlideImage {

                        /** SlideImage sourceSlide */
                        sourceSlide?: (rv.data.Slide.Element.DataLink.SlideSourceType|null);
                    }

                    /** Represents a SlideImage. */
                    class SlideImage implements ISlideImage {

                        /**
                         * Constructs a new SlideImage.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ISlideImage);

                        /** SlideImage sourceSlide. */
                        public sourceSlide: rv.data.Slide.Element.DataLink.SlideSourceType;

                        /**
                         * Creates a new SlideImage instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SlideImage instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ISlideImage): rv.data.Slide.Element.DataLink.SlideImage;

                        /**
                         * Encodes the specified SlideImage message. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideImage.verify|verify} messages.
                         * @param message SlideImage message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ISlideImage, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SlideImage message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideImage.verify|verify} messages.
                         * @param message SlideImage message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ISlideImage, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SlideImage message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SlideImage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.SlideImage;

                        /**
                         * Decodes a SlideImage message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SlideImage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.SlideImage;

                        /**
                         * Verifies a SlideImage message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SlideImage message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SlideImage
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.SlideImage;

                        /**
                         * Creates a plain object from a SlideImage message. Also converts values to other types if specified.
                         * @param message SlideImage
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.SlideImage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SlideImage to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for SlideImage
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a StageMessage. */
                    interface IStageMessage {

                        /** StageMessage shouldFlash */
                        shouldFlash?: (boolean|null);

                        /** StageMessage flashColor */
                        flashColor?: (rv.data.IColor|null);
                    }

                    /** Represents a StageMessage. */
                    class StageMessage implements IStageMessage {

                        /**
                         * Constructs a new StageMessage.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IStageMessage);

                        /** StageMessage shouldFlash. */
                        public shouldFlash: boolean;

                        /** StageMessage flashColor. */
                        public flashColor?: (rv.data.IColor|null);

                        /**
                         * Creates a new StageMessage instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns StageMessage instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IStageMessage): rv.data.Slide.Element.DataLink.StageMessage;

                        /**
                         * Encodes the specified StageMessage message. Does not implicitly {@link rv.data.Slide.Element.DataLink.StageMessage.verify|verify} messages.
                         * @param message StageMessage message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IStageMessage, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified StageMessage message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.StageMessage.verify|verify} messages.
                         * @param message StageMessage message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IStageMessage, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a StageMessage message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns StageMessage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.StageMessage;

                        /**
                         * Decodes a StageMessage message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns StageMessage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.StageMessage;

                        /**
                         * Verifies a StageMessage message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a StageMessage message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns StageMessage
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.StageMessage;

                        /**
                         * Creates a plain object from a StageMessage message. Also converts values to other types if specified.
                         * @param message StageMessage
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.StageMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this StageMessage to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for StageMessage
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a VideoCountdown. */
                    interface IVideoCountdown {

                        /** VideoCountdown timerFormat */
                        timerFormat?: (rv.data.Timer.IFormat|null);

                        /** VideoCountdown timerFormatString */
                        timerFormatString?: (string|null);

                        /** VideoCountdown colorTriggers */
                        colorTriggers?: (rv.data.Slide.Element.DataLink.IColorTrigger[]|null);

                        /** VideoCountdown ignoreLoopingVideos */
                        ignoreLoopingVideos?: (boolean|null);

                        /** VideoCountdown videoCountdownSource */
                        videoCountdownSource?: (rv.data.Slide.Element.DataLink.VideoCountdown.VideoCountdownSource|null);
                    }

                    /** Represents a VideoCountdown. */
                    class VideoCountdown implements IVideoCountdown {

                        /**
                         * Constructs a new VideoCountdown.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IVideoCountdown);

                        /** VideoCountdown timerFormat. */
                        public timerFormat?: (rv.data.Timer.IFormat|null);

                        /** VideoCountdown timerFormatString. */
                        public timerFormatString: string;

                        /** VideoCountdown colorTriggers. */
                        public colorTriggers: rv.data.Slide.Element.DataLink.IColorTrigger[];

                        /** VideoCountdown ignoreLoopingVideos. */
                        public ignoreLoopingVideos: boolean;

                        /** VideoCountdown videoCountdownSource. */
                        public videoCountdownSource: rv.data.Slide.Element.DataLink.VideoCountdown.VideoCountdownSource;

                        /**
                         * Creates a new VideoCountdown instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns VideoCountdown instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IVideoCountdown): rv.data.Slide.Element.DataLink.VideoCountdown;

                        /**
                         * Encodes the specified VideoCountdown message. Does not implicitly {@link rv.data.Slide.Element.DataLink.VideoCountdown.verify|verify} messages.
                         * @param message VideoCountdown message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IVideoCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified VideoCountdown message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.VideoCountdown.verify|verify} messages.
                         * @param message VideoCountdown message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IVideoCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a VideoCountdown message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns VideoCountdown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.VideoCountdown;

                        /**
                         * Decodes a VideoCountdown message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns VideoCountdown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.VideoCountdown;

                        /**
                         * Verifies a VideoCountdown message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a VideoCountdown message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns VideoCountdown
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.VideoCountdown;

                        /**
                         * Creates a plain object from a VideoCountdown message. Also converts values to other types if specified.
                         * @param message VideoCountdown
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.VideoCountdown, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this VideoCountdown to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for VideoCountdown
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace VideoCountdown {

                        /** VideoCountdownSource enum. */
                        enum VideoCountdownSource {
                            VIDEO_COUNTDOWN_SOURCE_PRESENTATION = 0,
                            VIDEO_COUNTDOWN_SOURCE_ANNOUNCEMENT = 1
                        }
                    }

                    /** Properties of an AudioCountdown. */
                    interface IAudioCountdown {

                        /** AudioCountdown timerFormat */
                        timerFormat?: (rv.data.Timer.IFormat|null);

                        /** AudioCountdown timerFormatString */
                        timerFormatString?: (string|null);

                        /** AudioCountdown colorTriggers */
                        colorTriggers?: (rv.data.Slide.Element.DataLink.IColorTrigger[]|null);

                        /** AudioCountdown ignoreLoopingAudio */
                        ignoreLoopingAudio?: (boolean|null);
                    }

                    /** Represents an AudioCountdown. */
                    class AudioCountdown implements IAudioCountdown {

                        /**
                         * Constructs a new AudioCountdown.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IAudioCountdown);

                        /** AudioCountdown timerFormat. */
                        public timerFormat?: (rv.data.Timer.IFormat|null);

                        /** AudioCountdown timerFormatString. */
                        public timerFormatString: string;

                        /** AudioCountdown colorTriggers. */
                        public colorTriggers: rv.data.Slide.Element.DataLink.IColorTrigger[];

                        /** AudioCountdown ignoreLoopingAudio. */
                        public ignoreLoopingAudio: boolean;

                        /**
                         * Creates a new AudioCountdown instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns AudioCountdown instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IAudioCountdown): rv.data.Slide.Element.DataLink.AudioCountdown;

                        /**
                         * Encodes the specified AudioCountdown message. Does not implicitly {@link rv.data.Slide.Element.DataLink.AudioCountdown.verify|verify} messages.
                         * @param message AudioCountdown message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IAudioCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified AudioCountdown message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.AudioCountdown.verify|verify} messages.
                         * @param message AudioCountdown message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IAudioCountdown, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an AudioCountdown message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns AudioCountdown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.AudioCountdown;

                        /**
                         * Decodes an AudioCountdown message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns AudioCountdown
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.AudioCountdown;

                        /**
                         * Verifies an AudioCountdown message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an AudioCountdown message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns AudioCountdown
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.AudioCountdown;

                        /**
                         * Creates a plain object from an AudioCountdown message. Also converts values to other types if specified.
                         * @param message AudioCountdown
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.AudioCountdown, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this AudioCountdown to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for AudioCountdown
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a GroupName. */
                    interface IGroupName {

                        /** GroupName groupSource */
                        groupSource?: (rv.data.Slide.Element.DataLink.GroupSourceType|null);
                    }

                    /** Represents a GroupName. */
                    class GroupName implements IGroupName {

                        /**
                         * Constructs a new GroupName.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IGroupName);

                        /** GroupName groupSource. */
                        public groupSource: rv.data.Slide.Element.DataLink.GroupSourceType;

                        /**
                         * Creates a new GroupName instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns GroupName instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IGroupName): rv.data.Slide.Element.DataLink.GroupName;

                        /**
                         * Encodes the specified GroupName message. Does not implicitly {@link rv.data.Slide.Element.DataLink.GroupName.verify|verify} messages.
                         * @param message GroupName message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IGroupName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified GroupName message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.GroupName.verify|verify} messages.
                         * @param message GroupName message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IGroupName, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a GroupName message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns GroupName
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.GroupName;

                        /**
                         * Decodes a GroupName message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns GroupName
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.GroupName;

                        /**
                         * Verifies a GroupName message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a GroupName message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns GroupName
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.GroupName;

                        /**
                         * Creates a plain object from a GroupName message. Also converts values to other types if specified.
                         * @param message GroupName
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.GroupName, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this GroupName to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for GroupName
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a GroupColor. */
                    interface IGroupColor {

                        /** GroupColor groupSource */
                        groupSource?: (rv.data.Slide.Element.DataLink.GroupSourceType|null);
                    }

                    /** Represents a GroupColor. */
                    class GroupColor implements IGroupColor {

                        /**
                         * Constructs a new GroupColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IGroupColor);

                        /** GroupColor groupSource. */
                        public groupSource: rv.data.Slide.Element.DataLink.GroupSourceType;

                        /**
                         * Creates a new GroupColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns GroupColor instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IGroupColor): rv.data.Slide.Element.DataLink.GroupColor;

                        /**
                         * Encodes the specified GroupColor message. Does not implicitly {@link rv.data.Slide.Element.DataLink.GroupColor.verify|verify} messages.
                         * @param message GroupColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IGroupColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified GroupColor message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.GroupColor.verify|verify} messages.
                         * @param message GroupColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IGroupColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a GroupColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns GroupColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.GroupColor;

                        /**
                         * Decodes a GroupColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns GroupColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.GroupColor;

                        /**
                         * Verifies a GroupColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a GroupColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns GroupColor
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.GroupColor;

                        /**
                         * Creates a plain object from a GroupColor message. Also converts values to other types if specified.
                         * @param message GroupColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.GroupColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this GroupColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for GroupColor
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a SlideLabelText. */
                    interface ISlideLabelText {

                        /** SlideLabelText slideLabelSource */
                        slideLabelSource?: (rv.data.Slide.Element.DataLink.SlideLabelSource|null);
                    }

                    /** Represents a SlideLabelText. */
                    class SlideLabelText implements ISlideLabelText {

                        /**
                         * Constructs a new SlideLabelText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ISlideLabelText);

                        /** SlideLabelText slideLabelSource. */
                        public slideLabelSource: rv.data.Slide.Element.DataLink.SlideLabelSource;

                        /**
                         * Creates a new SlideLabelText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SlideLabelText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ISlideLabelText): rv.data.Slide.Element.DataLink.SlideLabelText;

                        /**
                         * Encodes the specified SlideLabelText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideLabelText.verify|verify} messages.
                         * @param message SlideLabelText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ISlideLabelText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SlideLabelText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideLabelText.verify|verify} messages.
                         * @param message SlideLabelText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ISlideLabelText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SlideLabelText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SlideLabelText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.SlideLabelText;

                        /**
                         * Decodes a SlideLabelText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SlideLabelText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.SlideLabelText;

                        /**
                         * Verifies a SlideLabelText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SlideLabelText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SlideLabelText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.SlideLabelText;

                        /**
                         * Creates a plain object from a SlideLabelText message. Also converts values to other types if specified.
                         * @param message SlideLabelText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.SlideLabelText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SlideLabelText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for SlideLabelText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a SlideLabelColor. */
                    interface ISlideLabelColor {

                        /** SlideLabelColor slideLabelSource */
                        slideLabelSource?: (rv.data.Slide.Element.DataLink.SlideLabelSource|null);
                    }

                    /** Represents a SlideLabelColor. */
                    class SlideLabelColor implements ISlideLabelColor {

                        /**
                         * Constructs a new SlideLabelColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ISlideLabelColor);

                        /** SlideLabelColor slideLabelSource. */
                        public slideLabelSource: rv.data.Slide.Element.DataLink.SlideLabelSource;

                        /**
                         * Creates a new SlideLabelColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SlideLabelColor instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ISlideLabelColor): rv.data.Slide.Element.DataLink.SlideLabelColor;

                        /**
                         * Encodes the specified SlideLabelColor message. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideLabelColor.verify|verify} messages.
                         * @param message SlideLabelColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ISlideLabelColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SlideLabelColor message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideLabelColor.verify|verify} messages.
                         * @param message SlideLabelColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ISlideLabelColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SlideLabelColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SlideLabelColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.SlideLabelColor;

                        /**
                         * Decodes a SlideLabelColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SlideLabelColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.SlideLabelColor;

                        /**
                         * Verifies a SlideLabelColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SlideLabelColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SlideLabelColor
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.SlideLabelColor;

                        /**
                         * Creates a plain object from a SlideLabelColor message. Also converts values to other types if specified.
                         * @param message SlideLabelColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.SlideLabelColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SlideLabelColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for SlideLabelColor
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a PresentationNotes. */
                    interface IPresentationNotes {
                    }

                    /** Represents a PresentationNotes. */
                    class PresentationNotes implements IPresentationNotes {

                        /**
                         * Constructs a new PresentationNotes.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPresentationNotes);

                        /**
                         * Creates a new PresentationNotes instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns PresentationNotes instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPresentationNotes): rv.data.Slide.Element.DataLink.PresentationNotes;

                        /**
                         * Encodes the specified PresentationNotes message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PresentationNotes.verify|verify} messages.
                         * @param message PresentationNotes message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPresentationNotes, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified PresentationNotes message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PresentationNotes.verify|verify} messages.
                         * @param message PresentationNotes message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPresentationNotes, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a PresentationNotes message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns PresentationNotes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PresentationNotes;

                        /**
                         * Decodes a PresentationNotes message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns PresentationNotes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PresentationNotes;

                        /**
                         * Verifies a PresentationNotes message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a PresentationNotes message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns PresentationNotes
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PresentationNotes;

                        /**
                         * Creates a plain object from a PresentationNotes message. Also converts values to other types if specified.
                         * @param message PresentationNotes
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.PresentationNotes, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this PresentationNotes to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for PresentationNotes
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a Presentation. */
                    interface IPresentation {

                        /** Presentation presentationSource */
                        presentationSource?: (rv.data.Slide.Element.DataLink.Presentation.PresentationSource|null);
                    }

                    /** Represents a Presentation. */
                    class Presentation implements IPresentation {

                        /**
                         * Constructs a new Presentation.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPresentation);

                        /** Presentation presentationSource. */
                        public presentationSource: rv.data.Slide.Element.DataLink.Presentation.PresentationSource;

                        /**
                         * Creates a new Presentation instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Presentation instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPresentation): rv.data.Slide.Element.DataLink.Presentation;

                        /**
                         * Encodes the specified Presentation message. Does not implicitly {@link rv.data.Slide.Element.DataLink.Presentation.verify|verify} messages.
                         * @param message Presentation message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPresentation, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Presentation message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.Presentation.verify|verify} messages.
                         * @param message Presentation message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPresentation, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Presentation message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Presentation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.Presentation;

                        /**
                         * Decodes a Presentation message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Presentation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.Presentation;

                        /**
                         * Verifies a Presentation message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Presentation message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Presentation
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.Presentation;

                        /**
                         * Creates a plain object from a Presentation message. Also converts values to other types if specified.
                         * @param message Presentation
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.Presentation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Presentation to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for Presentation
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace Presentation {

                        /** PresentationSource enum. */
                        enum PresentationSource {
                            PRESENTATION_SOURCE_PRESENTATION = 0,
                            PRESENTATION_SOURCE_ANNOUNCEMENT = 1
                        }
                    }

                    /** Properties of a PlaylistItem. */
                    interface IPlaylistItem {

                        /** PlaylistItem playlistItemSource */
                        playlistItemSource?: (rv.data.Slide.Element.DataLink.PlaylistItem.PlaylistItemSourceType|null);

                        /** PlaylistItem showArrangement */
                        showArrangement?: (boolean|null);
                    }

                    /** Represents a PlaylistItem. */
                    class PlaylistItem implements IPlaylistItem {

                        /**
                         * Constructs a new PlaylistItem.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPlaylistItem);

                        /** PlaylistItem playlistItemSource. */
                        public playlistItemSource: rv.data.Slide.Element.DataLink.PlaylistItem.PlaylistItemSourceType;

                        /** PlaylistItem showArrangement. */
                        public showArrangement: boolean;

                        /**
                         * Creates a new PlaylistItem instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns PlaylistItem instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPlaylistItem): rv.data.Slide.Element.DataLink.PlaylistItem;

                        /**
                         * Encodes the specified PlaylistItem message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaylistItem.verify|verify} messages.
                         * @param message PlaylistItem message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPlaylistItem, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified PlaylistItem message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaylistItem.verify|verify} messages.
                         * @param message PlaylistItem message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPlaylistItem, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a PlaylistItem message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns PlaylistItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PlaylistItem;

                        /**
                         * Decodes a PlaylistItem message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns PlaylistItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PlaylistItem;

                        /**
                         * Verifies a PlaylistItem message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a PlaylistItem message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns PlaylistItem
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PlaylistItem;

                        /**
                         * Creates a plain object from a PlaylistItem message. Also converts values to other types if specified.
                         * @param message PlaylistItem
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.PlaylistItem, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this PlaylistItem to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for PlaylistItem
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace PlaylistItem {

                        /** PlaylistItemSourceType enum. */
                        enum PlaylistItemSourceType {
                            PLAYLIST_ITEM_SOURCE_TYPE_CURRENT = 0,
                            PLAYLIST_ITEM_SOURCE_TYPE_NEXT = 1,
                            PLAYLIST_ITEM_SOURCE_TYPE_CURRENT_HEADER = 2,
                            PLAYLIST_ITEM_SOURCE_TYPE_NEXT_HEADER = 3,
                            PLAYLIST_ITEM_SOURCE_TYPE_PARENT_PLAYLIST = 4
                        }
                    }

                    /** Properties of an AutoAdvanceTimeRemaining. */
                    interface IAutoAdvanceTimeRemaining {

                        /** AutoAdvanceTimeRemaining autoAdvanceSource */
                        autoAdvanceSource?: (rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.AutoAdvanceSource|null);

                        /** AutoAdvanceTimeRemaining timerFormat */
                        timerFormat?: (rv.data.Timer.IFormat|null);
                    }

                    /** Represents an AutoAdvanceTimeRemaining. */
                    class AutoAdvanceTimeRemaining implements IAutoAdvanceTimeRemaining {

                        /**
                         * Constructs a new AutoAdvanceTimeRemaining.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining);

                        /** AutoAdvanceTimeRemaining autoAdvanceSource. */
                        public autoAdvanceSource: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.AutoAdvanceSource;

                        /** AutoAdvanceTimeRemaining timerFormat. */
                        public timerFormat?: (rv.data.Timer.IFormat|null);

                        /**
                         * Creates a new AutoAdvanceTimeRemaining instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns AutoAdvanceTimeRemaining instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining): rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining;

                        /**
                         * Encodes the specified AutoAdvanceTimeRemaining message. Does not implicitly {@link rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.verify|verify} messages.
                         * @param message AutoAdvanceTimeRemaining message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified AutoAdvanceTimeRemaining message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining.verify|verify} messages.
                         * @param message AutoAdvanceTimeRemaining message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IAutoAdvanceTimeRemaining, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes an AutoAdvanceTimeRemaining message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns AutoAdvanceTimeRemaining
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining;

                        /**
                         * Decodes an AutoAdvanceTimeRemaining message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns AutoAdvanceTimeRemaining
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining;

                        /**
                         * Verifies an AutoAdvanceTimeRemaining message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates an AutoAdvanceTimeRemaining message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns AutoAdvanceTimeRemaining
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining;

                        /**
                         * Creates a plain object from an AutoAdvanceTimeRemaining message. Also converts values to other types if specified.
                         * @param message AutoAdvanceTimeRemaining
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.AutoAdvanceTimeRemaining, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this AutoAdvanceTimeRemaining to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for AutoAdvanceTimeRemaining
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace AutoAdvanceTimeRemaining {

                        /** AutoAdvanceSource enum. */
                        enum AutoAdvanceSource {
                            AUTO_ADVANCE_SOURCE_PRESENTATION = 0,
                            AUTO_ADVANCE_SOURCE_ANNOUNCEMENT = 1
                        }
                    }

                    /** Properties of a CaptureStatusText. */
                    interface ICaptureStatusText {

                        /** CaptureStatusText statusText */
                        statusText?: (rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText|null);

                        /** CaptureStatusText elapsedTime */
                        elapsedTime?: (rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime|null);
                    }

                    /** Represents a CaptureStatusText. */
                    class CaptureStatusText implements ICaptureStatusText {

                        /**
                         * Constructs a new CaptureStatusText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ICaptureStatusText);

                        /** CaptureStatusText statusText. */
                        public statusText?: (rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText|null);

                        /** CaptureStatusText elapsedTime. */
                        public elapsedTime?: (rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime|null);

                        /** CaptureStatusText TextType. */
                        public TextType?: ("statusText"|"elapsedTime");

                        /**
                         * Creates a new CaptureStatusText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns CaptureStatusText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ICaptureStatusText): rv.data.Slide.Element.DataLink.CaptureStatusText;

                        /**
                         * Encodes the specified CaptureStatusText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.verify|verify} messages.
                         * @param message CaptureStatusText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ICaptureStatusText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified CaptureStatusText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.verify|verify} messages.
                         * @param message CaptureStatusText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ICaptureStatusText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a CaptureStatusText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns CaptureStatusText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.CaptureStatusText;

                        /**
                         * Decodes a CaptureStatusText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns CaptureStatusText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.CaptureStatusText;

                        /**
                         * Verifies a CaptureStatusText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a CaptureStatusText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns CaptureStatusText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.CaptureStatusText;

                        /**
                         * Creates a plain object from a CaptureStatusText message. Also converts values to other types if specified.
                         * @param message CaptureStatusText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.CaptureStatusText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this CaptureStatusText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for CaptureStatusText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace CaptureStatusText {

                        /** Properties of a StatusText. */
                        interface IStatusText {
                        }

                        /** Represents a StatusText. */
                        class StatusText implements IStatusText {

                            /**
                             * Constructs a new StatusText.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText);

                            /**
                             * Creates a new StatusText instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns StatusText instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText): rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText;

                            /**
                             * Encodes the specified StatusText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText.verify|verify} messages.
                             * @param message StatusText message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified StatusText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText.verify|verify} messages.
                             * @param message StatusText message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.CaptureStatusText.IStatusText, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a StatusText message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns StatusText
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText;

                            /**
                             * Decodes a StatusText message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns StatusText
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText;

                            /**
                             * Verifies a StatusText message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a StatusText message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns StatusText
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText;

                            /**
                             * Creates a plain object from a StatusText message. Also converts values to other types if specified.
                             * @param message StatusText
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.CaptureStatusText.StatusText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this StatusText to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for StatusText
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        /** Properties of an ElapsedTime. */
                        interface IElapsedTime {

                            /** ElapsedTime timerFormat */
                            timerFormat?: (rv.data.Timer.IFormat|null);
                        }

                        /** Represents an ElapsedTime. */
                        class ElapsedTime implements IElapsedTime {

                            /**
                             * Constructs a new ElapsedTime.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime);

                            /** ElapsedTime timerFormat. */
                            public timerFormat?: (rv.data.Timer.IFormat|null);

                            /**
                             * Creates a new ElapsedTime instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns ElapsedTime instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime): rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime;

                            /**
                             * Encodes the specified ElapsedTime message. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime.verify|verify} messages.
                             * @param message ElapsedTime message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified ElapsedTime message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime.verify|verify} messages.
                             * @param message ElapsedTime message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.CaptureStatusText.IElapsedTime, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes an ElapsedTime message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns ElapsedTime
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime;

                            /**
                             * Decodes an ElapsedTime message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns ElapsedTime
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime;

                            /**
                             * Verifies an ElapsedTime message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates an ElapsedTime message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns ElapsedTime
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime;

                            /**
                             * Creates a plain object from an ElapsedTime message. Also converts values to other types if specified.
                             * @param message ElapsedTime
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.CaptureStatusText.ElapsedTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this ElapsedTime to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for ElapsedTime
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }
                    }

                    /** Properties of a CaptureStatusColor. */
                    interface ICaptureStatusColor {
                    }

                    /** Represents a CaptureStatusColor. */
                    class CaptureStatusColor implements ICaptureStatusColor {

                        /**
                         * Constructs a new CaptureStatusColor.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ICaptureStatusColor);

                        /**
                         * Creates a new CaptureStatusColor instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns CaptureStatusColor instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ICaptureStatusColor): rv.data.Slide.Element.DataLink.CaptureStatusColor;

                        /**
                         * Encodes the specified CaptureStatusColor message. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusColor.verify|verify} messages.
                         * @param message CaptureStatusColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ICaptureStatusColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified CaptureStatusColor message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.CaptureStatusColor.verify|verify} messages.
                         * @param message CaptureStatusColor message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ICaptureStatusColor, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a CaptureStatusColor message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns CaptureStatusColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.CaptureStatusColor;

                        /**
                         * Decodes a CaptureStatusColor message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns CaptureStatusColor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.CaptureStatusColor;

                        /**
                         * Verifies a CaptureStatusColor message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a CaptureStatusColor message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns CaptureStatusColor
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.CaptureStatusColor;

                        /**
                         * Creates a plain object from a CaptureStatusColor message. Also converts values to other types if specified.
                         * @param message CaptureStatusColor
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.CaptureStatusColor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this CaptureStatusColor to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for CaptureStatusColor
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a SlideCount. */
                    interface ISlideCount {

                        /** SlideCount slideCountSourceType */
                        slideCountSourceType?: (rv.data.Slide.Element.DataLink.SlideCount.SlideCountSourceType|null);
                    }

                    /** Represents a SlideCount. */
                    class SlideCount implements ISlideCount {

                        /**
                         * Constructs a new SlideCount.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ISlideCount);

                        /** SlideCount slideCountSourceType. */
                        public slideCountSourceType: rv.data.Slide.Element.DataLink.SlideCount.SlideCountSourceType;

                        /**
                         * Creates a new SlideCount instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SlideCount instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ISlideCount): rv.data.Slide.Element.DataLink.SlideCount;

                        /**
                         * Encodes the specified SlideCount message. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideCount.verify|verify} messages.
                         * @param message SlideCount message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ISlideCount, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SlideCount message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.SlideCount.verify|verify} messages.
                         * @param message SlideCount message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ISlideCount, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SlideCount message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SlideCount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.SlideCount;

                        /**
                         * Decodes a SlideCount message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SlideCount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.SlideCount;

                        /**
                         * Verifies a SlideCount message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SlideCount message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SlideCount
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.SlideCount;

                        /**
                         * Creates a plain object from a SlideCount message. Also converts values to other types if specified.
                         * @param message SlideCount
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.SlideCount, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SlideCount to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for SlideCount
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace SlideCount {

                        /** SlideCountSourceType enum. */
                        enum SlideCountSourceType {
                            SLIDE_COUNT_SOURCE_TYPE_CURRENT = 0,
                            SLIDE_COUNT_SOURCE_TYPE_REMAINING = 1,
                            SLIDE_COUNT_SOURCE_TYPE_TOTAL = 2
                        }
                    }

                    /** Properties of a PlaybackMarkerIdentifier. */
                    interface IPlaybackMarkerIdentifier {

                        /** PlaybackMarkerIdentifier destination */
                        destination?: (rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.Destination|null);

                        /** PlaybackMarkerIdentifier type */
                        type?: (rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.Type|null);

                        /** PlaybackMarkerIdentifier name */
                        name?: (string|null);
                    }

                    /** Represents a PlaybackMarkerIdentifier. */
                    class PlaybackMarkerIdentifier implements IPlaybackMarkerIdentifier {

                        /**
                         * Constructs a new PlaybackMarkerIdentifier.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier);

                        /** PlaybackMarkerIdentifier destination. */
                        public destination: rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.Destination;

                        /** PlaybackMarkerIdentifier type. */
                        public type: rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.Type;

                        /** PlaybackMarkerIdentifier name. */
                        public name: string;

                        /**
                         * Creates a new PlaybackMarkerIdentifier instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns PlaybackMarkerIdentifier instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier): rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier;

                        /**
                         * Encodes the specified PlaybackMarkerIdentifier message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.verify|verify} messages.
                         * @param message PlaybackMarkerIdentifier message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified PlaybackMarkerIdentifier message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier.verify|verify} messages.
                         * @param message PlaybackMarkerIdentifier message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a PlaybackMarkerIdentifier message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns PlaybackMarkerIdentifier
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier;

                        /**
                         * Decodes a PlaybackMarkerIdentifier message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns PlaybackMarkerIdentifier
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier;

                        /**
                         * Verifies a PlaybackMarkerIdentifier message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a PlaybackMarkerIdentifier message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns PlaybackMarkerIdentifier
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier;

                        /**
                         * Creates a plain object from a PlaybackMarkerIdentifier message. Also converts values to other types if specified.
                         * @param message PlaybackMarkerIdentifier
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.PlaybackMarkerIdentifier, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this PlaybackMarkerIdentifier to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for PlaybackMarkerIdentifier
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace PlaybackMarkerIdentifier {

                        /** Type enum. */
                        enum Type {
                            PLAYBACK_MARKER_IDENTIFIER_FIRST = 0,
                            PLAYBACK_MARKER_IDENTIFIER_PREVIOUS = 1,
                            PLAYBACK_MARKER_IDENTIFIER_NEXT = 2,
                            PLAYBACK_MARKER_IDENTIFIER_LAST = 3,
                            PLAYBACK_MARKER_IDENTIFIER_NAME = 4
                        }

                        /** Destination enum. */
                        enum Destination {
                            PLAYBACK_MARKER_DESTINATION_PRESENTATION = 0,
                            PLAYBACK_MARKER_DESTINATION_ANNOUNCEMENT = 1,
                            PLAYBACK_MARKER_DESTINATION_AUDIO = 2
                        }
                    }

                    /** Properties of a PlaybackMarkerText. */
                    interface IPlaybackMarkerText {

                        /** PlaybackMarkerText identifier */
                        identifier?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier|null);

                        /** PlaybackMarkerText shouldUseMarkerColor */
                        shouldUseMarkerColor?: (boolean|null);

                        /** PlaybackMarkerText name */
                        name?: (rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName|null);

                        /** PlaybackMarkerText time */
                        time?: (rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime|null);
                    }

                    /** Represents a PlaybackMarkerText. */
                    class PlaybackMarkerText implements IPlaybackMarkerText {

                        /**
                         * Constructs a new PlaybackMarkerText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IPlaybackMarkerText);

                        /** PlaybackMarkerText identifier. */
                        public identifier?: (rv.data.Slide.Element.DataLink.IPlaybackMarkerIdentifier|null);

                        /** PlaybackMarkerText shouldUseMarkerColor. */
                        public shouldUseMarkerColor: boolean;

                        /** PlaybackMarkerText name. */
                        public name?: (rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName|null);

                        /** PlaybackMarkerText time. */
                        public time?: (rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime|null);

                        /** PlaybackMarkerText TextType. */
                        public TextType?: ("name"|"time");

                        /**
                         * Creates a new PlaybackMarkerText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns PlaybackMarkerText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IPlaybackMarkerText): rv.data.Slide.Element.DataLink.PlaybackMarkerText;

                        /**
                         * Encodes the specified PlaybackMarkerText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.verify|verify} messages.
                         * @param message PlaybackMarkerText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IPlaybackMarkerText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified PlaybackMarkerText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.verify|verify} messages.
                         * @param message PlaybackMarkerText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IPlaybackMarkerText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a PlaybackMarkerText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns PlaybackMarkerText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PlaybackMarkerText;

                        /**
                         * Decodes a PlaybackMarkerText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns PlaybackMarkerText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PlaybackMarkerText;

                        /**
                         * Verifies a PlaybackMarkerText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a PlaybackMarkerText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns PlaybackMarkerText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PlaybackMarkerText;

                        /**
                         * Creates a plain object from a PlaybackMarkerText message. Also converts values to other types if specified.
                         * @param message PlaybackMarkerText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this PlaybackMarkerText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for PlaybackMarkerText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    namespace PlaybackMarkerText {

                        /** Properties of a Name. */
                        interface IName {
                        }

                        /** Represents a Name. */
                        class Name implements IName {

                            /**
                             * Constructs a new Name.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName);

                            /**
                             * Creates a new Name instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Name instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name;

                            /**
                             * Encodes the specified Name message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name.verify|verify} messages.
                             * @param message Name message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Name message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name.verify|verify} messages.
                             * @param message Name message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.IName, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Name message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Name
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name;

                            /**
                             * Decodes a Name message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Name
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name;

                            /**
                             * Verifies a Name message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Name message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Name
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name;

                            /**
                             * Creates a plain object from a Name message. Also converts values to other types if specified.
                             * @param message Name
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.Name, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Name to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for Name
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }

                        /** Properties of a Time. */
                        interface ITime {

                            /** Time format */
                            format?: (rv.data.Timer.IFormat|null);
                        }

                        /** Represents a Time. */
                        class Time implements ITime {

                            /**
                             * Constructs a new Time.
                             * @param [properties] Properties to set
                             */
                            constructor(properties?: rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime);

                            /** Time format. */
                            public format?: (rv.data.Timer.IFormat|null);

                            /**
                             * Creates a new Time instance using the specified properties.
                             * @param [properties] Properties to set
                             * @returns Time instance
                             */
                            public static create(properties?: rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time;

                            /**
                             * Encodes the specified Time message. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time.verify|verify} messages.
                             * @param message Time message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encode(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Encodes the specified Time message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time.verify|verify} messages.
                             * @param message Time message or plain object to encode
                             * @param [writer] Writer to encode to
                             * @returns Writer
                             */
                            public static encodeDelimited(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.ITime, writer?: $protobuf.Writer): $protobuf.Writer;

                            /**
                             * Decodes a Time message from the specified reader or buffer.
                             * @param reader Reader or buffer to decode from
                             * @param [length] Message length if known beforehand
                             * @returns Time
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time;

                            /**
                             * Decodes a Time message from the specified reader or buffer, length delimited.
                             * @param reader Reader or buffer to decode from
                             * @returns Time
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time;

                            /**
                             * Verifies a Time message.
                             * @param message Plain object to verify
                             * @returns `null` if valid, otherwise the reason why it is not
                             */
                            public static verify(message: { [k: string]: any }): (string|null);

                            /**
                             * Creates a Time message from a plain object. Also converts values to their respective internal types.
                             * @param object Plain object
                             * @returns Time
                             */
                            public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time;

                            /**
                             * Creates a plain object from a Time message. Also converts values to other types if specified.
                             * @param message Time
                             * @param [options] Conversion options
                             * @returns Plain object
                             */
                            public static toObject(message: rv.data.Slide.Element.DataLink.PlaybackMarkerText.Time, options?: $protobuf.IConversionOptions): { [k: string]: any };

                            /**
                             * Converts this Time to JSON.
                             * @returns JSON object
                             */
                            public toJSON(): { [k: string]: any };

                            /**
                             * Gets the default type url for Time
                             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns The default type url
                             */
                            public static getTypeUrl(typeUrlPrefix?: string): string;
                        }
                    }

                    /** Properties of a ChordProChart. */
                    interface IChordProChart {
                    }

                    /** Represents a ChordProChart. */
                    class ChordProChart implements IChordProChart {

                        /**
                         * Constructs a new ChordProChart.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.IChordProChart);

                        /**
                         * Creates a new ChordProChart instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns ChordProChart instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.IChordProChart): rv.data.Slide.Element.DataLink.ChordProChart;

                        /**
                         * Encodes the specified ChordProChart message. Does not implicitly {@link rv.data.Slide.Element.DataLink.ChordProChart.verify|verify} messages.
                         * @param message ChordProChart message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.IChordProChart, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified ChordProChart message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.ChordProChart.verify|verify} messages.
                         * @param message ChordProChart message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.IChordProChart, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a ChordProChart message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns ChordProChart
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.ChordProChart;

                        /**
                         * Decodes a ChordProChart message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns ChordProChart
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.ChordProChart;

                        /**
                         * Verifies a ChordProChart message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ChordProChart message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ChordProChart
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.ChordProChart;

                        /**
                         * Creates a plain object from a ChordProChart message. Also converts values to other types if specified.
                         * @param message ChordProChart
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.ChordProChart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ChordProChart to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for ChordProChart
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a TimecodeText. */
                    interface ITimecodeText {
                    }

                    /** Represents a TimecodeText. */
                    class TimecodeText implements ITimecodeText {

                        /**
                         * Constructs a new TimecodeText.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ITimecodeText);

                        /**
                         * Creates a new TimecodeText instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TimecodeText instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ITimecodeText): rv.data.Slide.Element.DataLink.TimecodeText;

                        /**
                         * Encodes the specified TimecodeText message. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimecodeText.verify|verify} messages.
                         * @param message TimecodeText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ITimecodeText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TimecodeText message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimecodeText.verify|verify} messages.
                         * @param message TimecodeText message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ITimecodeText, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TimecodeText message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TimecodeText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.TimecodeText;

                        /**
                         * Decodes a TimecodeText message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TimecodeText
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.TimecodeText;

                        /**
                         * Verifies a TimecodeText message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TimecodeText message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TimecodeText
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.TimecodeText;

                        /**
                         * Creates a plain object from a TimecodeText message. Also converts values to other types if specified.
                         * @param message TimecodeText
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.TimecodeText, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TimecodeText to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for TimecodeText
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** Properties of a TimecodeStatus. */
                    interface ITimecodeStatus {
                    }

                    /** Represents a TimecodeStatus. */
                    class TimecodeStatus implements ITimecodeStatus {

                        /**
                         * Constructs a new TimecodeStatus.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: rv.data.Slide.Element.DataLink.ITimecodeStatus);

                        /**
                         * Creates a new TimecodeStatus instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TimecodeStatus instance
                         */
                        public static create(properties?: rv.data.Slide.Element.DataLink.ITimecodeStatus): rv.data.Slide.Element.DataLink.TimecodeStatus;

                        /**
                         * Encodes the specified TimecodeStatus message. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimecodeStatus.verify|verify} messages.
                         * @param message TimecodeStatus message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: rv.data.Slide.Element.DataLink.ITimecodeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TimecodeStatus message, length delimited. Does not implicitly {@link rv.data.Slide.Element.DataLink.TimecodeStatus.verify|verify} messages.
                         * @param message TimecodeStatus message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: rv.data.Slide.Element.DataLink.ITimecodeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TimecodeStatus message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TimecodeStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.DataLink.TimecodeStatus;

                        /**
                         * Decodes a TimecodeStatus message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TimecodeStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.DataLink.TimecodeStatus;

                        /**
                         * Verifies a TimecodeStatus message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TimecodeStatus message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TimecodeStatus
                         */
                        public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.DataLink.TimecodeStatus;

                        /**
                         * Creates a plain object from a TimecodeStatus message. Also converts values to other types if specified.
                         * @param message TimecodeStatus
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: rv.data.Slide.Element.DataLink.TimecodeStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TimecodeStatus to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };

                        /**
                         * Gets the default type url for TimecodeStatus
                         * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns The default type url
                         */
                        public static getTypeUrl(typeUrlPrefix?: string): string;
                    }

                    /** SlideSourceType enum. */
                    enum SlideSourceType {
                        SLIDE_SOURCE_TYPE_CURRENT_SLIDE = 0,
                        SLIDE_SOURCE_TYPE_NEXT_SLIDE = 1
                    }

                    /** GroupSourceType enum. */
                    enum GroupSourceType {
                        GROUP_SOURCE_TYPE_CURRENT_SLIDE = 0,
                        GROUP_SOURCE_TYPE_NEXT_SLIDE = 1,
                        GROUP_SOURCE_TYPE_NEXT_GROUP = 2
                    }

                    /** SlideLabelSource enum. */
                    enum SlideLabelSource {
                        SLIDE_LABEL_SOURCE_CURRENT_SLIDE = 0,
                        SLIDE_LABEL_SOURCE_NEXT_SLIDE = 1
                    }
                }

                /** Properties of a TextScroller. */
                interface ITextScroller {

                    /** TextScroller shouldScroll */
                    shouldScroll?: (boolean|null);

                    /** TextScroller scrollRate */
                    scrollRate?: (number|null);

                    /** TextScroller shouldRepeat */
                    shouldRepeat?: (boolean|null);

                    /** TextScroller repeatDistance */
                    repeatDistance?: (number|null);

                    /** TextScroller scrollingDirection */
                    scrollingDirection?: (rv.data.Slide.Element.TextScroller.Direction|null);

                    /** TextScroller startsOffScreen */
                    startsOffScreen?: (boolean|null);

                    /** TextScroller fadeLeft */
                    fadeLeft?: (number|null);

                    /** TextScroller fadeRight */
                    fadeRight?: (number|null);
                }

                /** Represents a TextScroller. */
                class TextScroller implements ITextScroller {

                    /**
                     * Constructs a new TextScroller.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: rv.data.Slide.Element.ITextScroller);

                    /** TextScroller shouldScroll. */
                    public shouldScroll: boolean;

                    /** TextScroller scrollRate. */
                    public scrollRate: number;

                    /** TextScroller shouldRepeat. */
                    public shouldRepeat: boolean;

                    /** TextScroller repeatDistance. */
                    public repeatDistance: number;

                    /** TextScroller scrollingDirection. */
                    public scrollingDirection: rv.data.Slide.Element.TextScroller.Direction;

                    /** TextScroller startsOffScreen. */
                    public startsOffScreen: boolean;

                    /** TextScroller fadeLeft. */
                    public fadeLeft: number;

                    /** TextScroller fadeRight. */
                    public fadeRight: number;

                    /**
                     * Creates a new TextScroller instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TextScroller instance
                     */
                    public static create(properties?: rv.data.Slide.Element.ITextScroller): rv.data.Slide.Element.TextScroller;

                    /**
                     * Encodes the specified TextScroller message. Does not implicitly {@link rv.data.Slide.Element.TextScroller.verify|verify} messages.
                     * @param message TextScroller message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: rv.data.Slide.Element.ITextScroller, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TextScroller message, length delimited. Does not implicitly {@link rv.data.Slide.Element.TextScroller.verify|verify} messages.
                     * @param message TextScroller message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: rv.data.Slide.Element.ITextScroller, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TextScroller message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TextScroller
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Slide.Element.TextScroller;

                    /**
                     * Decodes a TextScroller message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TextScroller
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Slide.Element.TextScroller;

                    /**
                     * Verifies a TextScroller message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TextScroller message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TextScroller
                     */
                    public static fromObject(object: { [k: string]: any }): rv.data.Slide.Element.TextScroller;

                    /**
                     * Creates a plain object from a TextScroller message. Also converts values to other types if specified.
                     * @param message TextScroller
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: rv.data.Slide.Element.TextScroller, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TextScroller to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };

                    /**
                     * Gets the default type url for TextScroller
                     * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns The default type url
                     */
                    public static getTypeUrl(typeUrlPrefix?: string): string;
                }

                namespace TextScroller {

                    /** Direction enum. */
                    enum Direction {
                        DIRECTION_LEFT = 0,
                        DIRECTION_RIGHT = 1,
                        DIRECTION_UP = 2,
                        DIRECTION_DOWN = 3
                    }
                }

                /** TextRevealType enum. */
                enum TextRevealType {
                    TEXT_REVEAL_TYPE_NONE = 0,
                    TEXT_REVEAL_TYPE_BULLET = 1,
                    TEXT_REVEAL_TYPE_UNDERLINE = 2
                }

                /** Info enum. */
                enum Info {
                    INFO_NONE = 0,
                    INFO_IS_TEMPLATE_ELEMENT = 1,
                    INFO_IS_TEXT_ELEMENT = 2,
                    INFO_IS_TEXT_TICKER = 4
                }
            }
        }

        /** Properties of an AlignmentGuide. */
        interface IAlignmentGuide {

            /** AlignmentGuide uuid */
            uuid?: (rv.data.IUUID|null);

            /** AlignmentGuide orientation */
            orientation?: (rv.data.AlignmentGuide.GuidelineOrientation|null);

            /** AlignmentGuide location */
            location?: (number|null);
        }

        /** Represents an AlignmentGuide. */
        class AlignmentGuide implements IAlignmentGuide {

            /**
             * Constructs a new AlignmentGuide.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IAlignmentGuide);

            /** AlignmentGuide uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** AlignmentGuide orientation. */
            public orientation: rv.data.AlignmentGuide.GuidelineOrientation;

            /** AlignmentGuide location. */
            public location: number;

            /**
             * Creates a new AlignmentGuide instance using the specified properties.
             * @param [properties] Properties to set
             * @returns AlignmentGuide instance
             */
            public static create(properties?: rv.data.IAlignmentGuide): rv.data.AlignmentGuide;

            /**
             * Encodes the specified AlignmentGuide message. Does not implicitly {@link rv.data.AlignmentGuide.verify|verify} messages.
             * @param message AlignmentGuide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IAlignmentGuide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AlignmentGuide message, length delimited. Does not implicitly {@link rv.data.AlignmentGuide.verify|verify} messages.
             * @param message AlignmentGuide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IAlignmentGuide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AlignmentGuide message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns AlignmentGuide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.AlignmentGuide;

            /**
             * Decodes an AlignmentGuide message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns AlignmentGuide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.AlignmentGuide;

            /**
             * Verifies an AlignmentGuide message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an AlignmentGuide message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns AlignmentGuide
             */
            public static fromObject(object: { [k: string]: any }): rv.data.AlignmentGuide;

            /**
             * Creates a plain object from an AlignmentGuide message. Also converts values to other types if specified.
             * @param message AlignmentGuide
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.AlignmentGuide, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this AlignmentGuide to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for AlignmentGuide
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace AlignmentGuide {

            /** GuidelineOrientation enum. */
            enum GuidelineOrientation {
                GUIDELINE_ORIENTATION_HORIZONTAL = 0,
                GUIDELINE_ORIENTATION_VERTICAL = 1
            }
        }

        /** Properties of a PresentationSlide. */
        interface IPresentationSlide {

            /** PresentationSlide baseSlide */
            baseSlide?: (rv.data.ISlide|null);

            /** PresentationSlide notes */
            notes?: (rv.data.PresentationSlide.INotes|null);

            /** PresentationSlide templateGuidelines */
            templateGuidelines?: (rv.data.IAlignmentGuide[]|null);

            /** PresentationSlide chordChart */
            chordChart?: (rv.data.IURL|null);

            /** PresentationSlide transition */
            transition?: (rv.data.ITransition|null);
        }

        /** Represents a PresentationSlide. */
        class PresentationSlide implements IPresentationSlide {

            /**
             * Constructs a new PresentationSlide.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IPresentationSlide);

            /** PresentationSlide baseSlide. */
            public baseSlide?: (rv.data.ISlide|null);

            /** PresentationSlide notes. */
            public notes?: (rv.data.PresentationSlide.INotes|null);

            /** PresentationSlide templateGuidelines. */
            public templateGuidelines: rv.data.IAlignmentGuide[];

            /** PresentationSlide chordChart. */
            public chordChart?: (rv.data.IURL|null);

            /** PresentationSlide transition. */
            public transition?: (rv.data.ITransition|null);

            /**
             * Creates a new PresentationSlide instance using the specified properties.
             * @param [properties] Properties to set
             * @returns PresentationSlide instance
             */
            public static create(properties?: rv.data.IPresentationSlide): rv.data.PresentationSlide;

            /**
             * Encodes the specified PresentationSlide message. Does not implicitly {@link rv.data.PresentationSlide.verify|verify} messages.
             * @param message PresentationSlide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IPresentationSlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified PresentationSlide message, length delimited. Does not implicitly {@link rv.data.PresentationSlide.verify|verify} messages.
             * @param message PresentationSlide message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IPresentationSlide, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a PresentationSlide message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns PresentationSlide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.PresentationSlide;

            /**
             * Decodes a PresentationSlide message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns PresentationSlide
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.PresentationSlide;

            /**
             * Verifies a PresentationSlide message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a PresentationSlide message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns PresentationSlide
             */
            public static fromObject(object: { [k: string]: any }): rv.data.PresentationSlide;

            /**
             * Creates a plain object from a PresentationSlide message. Also converts values to other types if specified.
             * @param message PresentationSlide
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.PresentationSlide, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this PresentationSlide to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for PresentationSlide
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace PresentationSlide {

            /** Properties of a Notes. */
            interface INotes {

                /** Notes rtfData */
                rtfData?: (Uint8Array|null);

                /** Notes attributes */
                attributes?: (rv.data.Graphics.Text.IAttributes|null);
            }

            /** Represents a Notes. */
            class Notes implements INotes {

                /**
                 * Constructs a new Notes.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.PresentationSlide.INotes);

                /** Notes rtfData. */
                public rtfData: Uint8Array;

                /** Notes attributes. */
                public attributes?: (rv.data.Graphics.Text.IAttributes|null);

                /**
                 * Creates a new Notes instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Notes instance
                 */
                public static create(properties?: rv.data.PresentationSlide.INotes): rv.data.PresentationSlide.Notes;

                /**
                 * Encodes the specified Notes message. Does not implicitly {@link rv.data.PresentationSlide.Notes.verify|verify} messages.
                 * @param message Notes message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.PresentationSlide.INotes, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Notes message, length delimited. Does not implicitly {@link rv.data.PresentationSlide.Notes.verify|verify} messages.
                 * @param message Notes message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.PresentationSlide.INotes, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Notes message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Notes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.PresentationSlide.Notes;

                /**
                 * Decodes a Notes message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Notes
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.PresentationSlide.Notes;

                /**
                 * Verifies a Notes message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Notes message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Notes
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.PresentationSlide.Notes;

                /**
                 * Creates a plain object from a Notes message. Also converts values to other types if specified.
                 * @param message Notes
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.PresentationSlide.Notes, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Notes to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Notes
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }
        }

        /** Properties of a Stage. */
        interface IStage {
        }

        /** Represents a Stage. */
        class Stage implements IStage {

            /**
             * Constructs a new Stage.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IStage);

            /**
             * Creates a new Stage instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Stage instance
             */
            public static create(properties?: rv.data.IStage): rv.data.Stage;

            /**
             * Encodes the specified Stage message. Does not implicitly {@link rv.data.Stage.verify|verify} messages.
             * @param message Stage message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IStage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Stage message, length delimited. Does not implicitly {@link rv.data.Stage.verify|verify} messages.
             * @param message Stage message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IStage, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Stage message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Stage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Stage;

            /**
             * Decodes a Stage message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Stage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Stage;

            /**
             * Verifies a Stage message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Stage message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Stage
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Stage;

            /**
             * Creates a plain object from a Stage message. Also converts values to other types if specified.
             * @param message Stage
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Stage, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Stage to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Stage
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Stage {

            /** Properties of a Layout. */
            interface ILayout {

                /** Layout uuid */
                uuid?: (rv.data.IUUID|null);

                /** Layout name */
                name?: (string|null);

                /** Layout slide */
                slide?: (rv.data.ISlide|null);
            }

            /** Represents a Layout. */
            class Layout implements ILayout {

                /**
                 * Constructs a new Layout.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Stage.ILayout);

                /** Layout uuid. */
                public uuid?: (rv.data.IUUID|null);

                /** Layout name. */
                public name: string;

                /** Layout slide. */
                public slide?: (rv.data.ISlide|null);

                /**
                 * Creates a new Layout instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Layout instance
                 */
                public static create(properties?: rv.data.Stage.ILayout): rv.data.Stage.Layout;

                /**
                 * Encodes the specified Layout message. Does not implicitly {@link rv.data.Stage.Layout.verify|verify} messages.
                 * @param message Layout message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Stage.ILayout, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Layout message, length delimited. Does not implicitly {@link rv.data.Stage.Layout.verify|verify} messages.
                 * @param message Layout message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Stage.ILayout, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Layout message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Layout
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Stage.Layout;

                /**
                 * Decodes a Layout message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Layout
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Stage.Layout;

                /**
                 * Verifies a Layout message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Layout message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Layout
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Stage.Layout;

                /**
                 * Creates a plain object from a Layout message. Also converts values to other types if specified.
                 * @param message Layout
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Stage.Layout, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Layout to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Layout
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a Document. */
            interface IDocument {

                /** Document applicationInfo */
                applicationInfo?: (rv.data.IApplicationInfo|null);

                /** Document layouts */
                layouts?: (rv.data.Stage.ILayout[]|null);
            }

            /** Represents a Document. */
            class Document implements IDocument {

                /**
                 * Constructs a new Document.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Stage.IDocument);

                /** Document applicationInfo. */
                public applicationInfo?: (rv.data.IApplicationInfo|null);

                /** Document layouts. */
                public layouts: rv.data.Stage.ILayout[];

                /**
                 * Creates a new Document instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Document instance
                 */
                public static create(properties?: rv.data.Stage.IDocument): rv.data.Stage.Document;

                /**
                 * Encodes the specified Document message. Does not implicitly {@link rv.data.Stage.Document.verify|verify} messages.
                 * @param message Document message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Stage.IDocument, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Document message, length delimited. Does not implicitly {@link rv.data.Stage.Document.verify|verify} messages.
                 * @param message Document message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Stage.IDocument, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Document message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Document
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Stage.Document;

                /**
                 * Decodes a Document message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Document
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Stage.Document;

                /**
                 * Verifies a Document message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Document message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Document
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Stage.Document;

                /**
                 * Creates a plain object from a Document message. Also converts values to other types if specified.
                 * @param message Document
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Stage.Document, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Document to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for Document
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a ScreenAssignment. */
            interface IScreenAssignment {

                /** ScreenAssignment screen */
                screen?: (rv.data.ICollectionElementType|null);

                /** ScreenAssignment layout */
                layout?: (rv.data.ICollectionElementType|null);
            }

            /** Represents a ScreenAssignment. */
            class ScreenAssignment implements IScreenAssignment {

                /**
                 * Constructs a new ScreenAssignment.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Stage.IScreenAssignment);

                /** ScreenAssignment screen. */
                public screen?: (rv.data.ICollectionElementType|null);

                /** ScreenAssignment layout. */
                public layout?: (rv.data.ICollectionElementType|null);

                /**
                 * Creates a new ScreenAssignment instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ScreenAssignment instance
                 */
                public static create(properties?: rv.data.Stage.IScreenAssignment): rv.data.Stage.ScreenAssignment;

                /**
                 * Encodes the specified ScreenAssignment message. Does not implicitly {@link rv.data.Stage.ScreenAssignment.verify|verify} messages.
                 * @param message ScreenAssignment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Stage.IScreenAssignment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ScreenAssignment message, length delimited. Does not implicitly {@link rv.data.Stage.ScreenAssignment.verify|verify} messages.
                 * @param message ScreenAssignment message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Stage.IScreenAssignment, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ScreenAssignment message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ScreenAssignment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Stage.ScreenAssignment;

                /**
                 * Decodes a ScreenAssignment message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ScreenAssignment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Stage.ScreenAssignment;

                /**
                 * Verifies a ScreenAssignment message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ScreenAssignment message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ScreenAssignment
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Stage.ScreenAssignment;

                /**
                 * Creates a plain object from a ScreenAssignment message. Also converts values to other types if specified.
                 * @param message ScreenAssignment
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Stage.ScreenAssignment, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ScreenAssignment to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for ScreenAssignment
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }
        }

        /** Properties of a Cue. */
        interface ICue {

            /** Cue uuid */
            uuid?: (rv.data.IUUID|null);

            /** Cue name */
            name?: (string|null);

            /** Cue completionTargetType */
            completionTargetType?: (rv.data.Cue.CompletionTargetType|null);

            /** Cue completionTargetUuid */
            completionTargetUuid?: (rv.data.IUUID|null);

            /** Cue completionActionType */
            completionActionType?: (rv.data.Cue.CompletionActionType|null);

            /** Cue completionActionUuid */
            completionActionUuid?: (rv.data.IUUID|null);

            /** Cue triggerTime */
            triggerTime?: (rv.data.Cue.ITimecodeTime|null);

            /** Cue hotKey */
            hotKey?: (rv.data.IHotKey|null);

            /** Cue actions */
            actions?: (rv.data.IAction[]|null);

            /** Cue pendingImports */
            pendingImports?: (rv.data.Cue.IPendingImportsEntry[]|null);

            /** Cue isEnabled */
            isEnabled?: (boolean|null);

            /** Cue completionTime */
            completionTime?: (number|null);
        }

        /** Represents a Cue. */
        class Cue implements ICue {

            /**
             * Constructs a new Cue.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ICue);

            /** Cue uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Cue name. */
            public name: string;

            /** Cue completionTargetType. */
            public completionTargetType: rv.data.Cue.CompletionTargetType;

            /** Cue completionTargetUuid. */
            public completionTargetUuid?: (rv.data.IUUID|null);

            /** Cue completionActionType. */
            public completionActionType: rv.data.Cue.CompletionActionType;

            /** Cue completionActionUuid. */
            public completionActionUuid?: (rv.data.IUUID|null);

            /** Cue triggerTime. */
            public triggerTime?: (rv.data.Cue.ITimecodeTime|null);

            /** Cue hotKey. */
            public hotKey?: (rv.data.IHotKey|null);

            /** Cue actions. */
            public actions: rv.data.IAction[];

            /** Cue pendingImports. */
            public pendingImports: rv.data.Cue.IPendingImportsEntry[];

            /** Cue isEnabled. */
            public isEnabled: boolean;

            /** Cue completionTime. */
            public completionTime: number;

            /**
             * Creates a new Cue instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Cue instance
             */
            public static create(properties?: rv.data.ICue): rv.data.Cue;

            /**
             * Encodes the specified Cue message. Does not implicitly {@link rv.data.Cue.verify|verify} messages.
             * @param message Cue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ICue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Cue message, length delimited. Does not implicitly {@link rv.data.Cue.verify|verify} messages.
             * @param message Cue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ICue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Cue message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Cue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Cue;

            /**
             * Decodes a Cue message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Cue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Cue;

            /**
             * Verifies a Cue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Cue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Cue
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Cue;

            /**
             * Creates a plain object from a Cue message. Also converts values to other types if specified.
             * @param message Cue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Cue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Cue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Cue
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace Cue {

            /** Properties of a TimecodeTime. */
            interface ITimecodeTime {

                /** TimecodeTime time */
                time?: (number|null);
            }

            /** Represents a TimecodeTime. */
            class TimecodeTime implements ITimecodeTime {

                /**
                 * Constructs a new TimecodeTime.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Cue.ITimecodeTime);

                /** TimecodeTime time. */
                public time: number;

                /**
                 * Creates a new TimecodeTime instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimecodeTime instance
                 */
                public static create(properties?: rv.data.Cue.ITimecodeTime): rv.data.Cue.TimecodeTime;

                /**
                 * Encodes the specified TimecodeTime message. Does not implicitly {@link rv.data.Cue.TimecodeTime.verify|verify} messages.
                 * @param message TimecodeTime message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Cue.ITimecodeTime, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimecodeTime message, length delimited. Does not implicitly {@link rv.data.Cue.TimecodeTime.verify|verify} messages.
                 * @param message TimecodeTime message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Cue.ITimecodeTime, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimecodeTime message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimecodeTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Cue.TimecodeTime;

                /**
                 * Decodes a TimecodeTime message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimecodeTime
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Cue.TimecodeTime;

                /**
                 * Verifies a TimecodeTime message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimecodeTime message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimecodeTime
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Cue.TimecodeTime;

                /**
                 * Creates a plain object from a TimecodeTime message. Also converts values to other types if specified.
                 * @param message TimecodeTime
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Cue.TimecodeTime, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimecodeTime to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for TimecodeTime
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** Properties of a PendingImportsEntry. */
            interface IPendingImportsEntry {

                /** PendingImportsEntry key */
                key?: (string|null);

                /** PendingImportsEntry value */
                value?: (rv.data.IURLs|null);
            }

            /** Represents a PendingImportsEntry. */
            class PendingImportsEntry implements IPendingImportsEntry {

                /**
                 * Constructs a new PendingImportsEntry.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: rv.data.Cue.IPendingImportsEntry);

                /** PendingImportsEntry key. */
                public key: string;

                /** PendingImportsEntry value. */
                public value?: (rv.data.IURLs|null);

                /**
                 * Creates a new PendingImportsEntry instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PendingImportsEntry instance
                 */
                public static create(properties?: rv.data.Cue.IPendingImportsEntry): rv.data.Cue.PendingImportsEntry;

                /**
                 * Encodes the specified PendingImportsEntry message. Does not implicitly {@link rv.data.Cue.PendingImportsEntry.verify|verify} messages.
                 * @param message PendingImportsEntry message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: rv.data.Cue.IPendingImportsEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PendingImportsEntry message, length delimited. Does not implicitly {@link rv.data.Cue.PendingImportsEntry.verify|verify} messages.
                 * @param message PendingImportsEntry message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: rv.data.Cue.IPendingImportsEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PendingImportsEntry message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PendingImportsEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Cue.PendingImportsEntry;

                /**
                 * Decodes a PendingImportsEntry message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PendingImportsEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Cue.PendingImportsEntry;

                /**
                 * Verifies a PendingImportsEntry message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PendingImportsEntry message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PendingImportsEntry
                 */
                public static fromObject(object: { [k: string]: any }): rv.data.Cue.PendingImportsEntry;

                /**
                 * Creates a plain object from a PendingImportsEntry message. Also converts values to other types if specified.
                 * @param message PendingImportsEntry
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: rv.data.Cue.PendingImportsEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PendingImportsEntry to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };

                /**
                 * Gets the default type url for PendingImportsEntry
                 * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns The default type url
                 */
                public static getTypeUrl(typeUrlPrefix?: string): string;
            }

            /** CompletionTargetType enum. */
            enum CompletionTargetType {
                COMPLETION_TARGET_TYPE_NONE = 0,
                COMPLETION_TARGET_TYPE_NEXT = 1,
                COMPLETION_TARGET_TYPE_RANDOM = 2,
                COMPLETION_TARGET_TYPE_CUE = 3,
                COMPLETION_TARGET_TYPE_FIRST = 4
            }

            /** CompletionActionType enum. */
            enum CompletionActionType {
                COMPLETION_ACTION_TYPE_FIRST = 0,
                COMPLETION_ACTION_TYPE_LAST = 1,
                COMPLETION_ACTION_TYPE_AFTER_ACTION = 2,
                COMPLETION_ACTION_TYPE_AFTER_TIME = 3
            }
        }

        /** Properties of a Group. */
        interface IGroup {

            /** Group uuid */
            uuid?: (rv.data.IUUID|null);

            /** Group name */
            name?: (string|null);

            /** Group color */
            color?: (rv.data.IColor|null);

            /** Group hotKey */
            hotKey?: (rv.data.IHotKey|null);

            /** Group applicationGroupIdentifier */
            applicationGroupIdentifier?: (rv.data.IUUID|null);

            /** Group applicationGroupName */
            applicationGroupName?: (string|null);
        }

        /** Represents a Group. */
        class Group implements IGroup {

            /**
             * Constructs a new Group.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IGroup);

            /** Group uuid. */
            public uuid?: (rv.data.IUUID|null);

            /** Group name. */
            public name: string;

            /** Group color. */
            public color?: (rv.data.IColor|null);

            /** Group hotKey. */
            public hotKey?: (rv.data.IHotKey|null);

            /** Group applicationGroupIdentifier. */
            public applicationGroupIdentifier?: (rv.data.IUUID|null);

            /** Group applicationGroupName. */
            public applicationGroupName: string;

            /**
             * Creates a new Group instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Group instance
             */
            public static create(properties?: rv.data.IGroup): rv.data.Group;

            /**
             * Encodes the specified Group message. Does not implicitly {@link rv.data.Group.verify|verify} messages.
             * @param message Group message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IGroup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Group message, length delimited. Does not implicitly {@link rv.data.Group.verify|verify} messages.
             * @param message Group message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IGroup, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Group message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Group
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Group;

            /**
             * Decodes a Group message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Group
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Group;

            /**
             * Verifies a Group message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Group message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Group
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Group;

            /**
             * Creates a plain object from a Group message. Also converts values to other types if specified.
             * @param message Group
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Group, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Group to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Group
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a ProGroupsDocument. */
        interface IProGroupsDocument {

            /** ProGroupsDocument groups */
            groups?: (rv.data.IGroup[]|null);
        }

        /** Represents a ProGroupsDocument. */
        class ProGroupsDocument implements IProGroupsDocument {

            /**
             * Constructs a new ProGroupsDocument.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IProGroupsDocument);

            /** ProGroupsDocument groups. */
            public groups: rv.data.IGroup[];

            /**
             * Creates a new ProGroupsDocument instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ProGroupsDocument instance
             */
            public static create(properties?: rv.data.IProGroupsDocument): rv.data.ProGroupsDocument;

            /**
             * Encodes the specified ProGroupsDocument message. Does not implicitly {@link rv.data.ProGroupsDocument.verify|verify} messages.
             * @param message ProGroupsDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IProGroupsDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ProGroupsDocument message, length delimited. Does not implicitly {@link rv.data.ProGroupsDocument.verify|verify} messages.
             * @param message ProGroupsDocument message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IProGroupsDocument, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ProGroupsDocument message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ProGroupsDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.ProGroupsDocument;

            /**
             * Decodes a ProGroupsDocument message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ProGroupsDocument
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.ProGroupsDocument;

            /**
             * Verifies a ProGroupsDocument message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ProGroupsDocument message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ProGroupsDocument
             */
            public static fromObject(object: { [k: string]: any }): rv.data.ProGroupsDocument;

            /**
             * Creates a plain object from a ProGroupsDocument message. Also converts values to other types if specified.
             * @param message ProGroupsDocument
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.ProGroupsDocument, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ProGroupsDocument to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for ProGroupsDocument
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        /** Properties of a MusicKeyScale. */
        interface IMusicKeyScale {

            /** MusicKeyScale musicKey */
            musicKey?: (rv.data.MusicKeyScale.MusicKey|null);

            /** MusicKeyScale musicScale */
            musicScale?: (rv.data.MusicKeyScale.MusicScale|null);
        }

        /** Represents a MusicKeyScale. */
        class MusicKeyScale implements IMusicKeyScale {

            /**
             * Constructs a new MusicKeyScale.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.IMusicKeyScale);

            /** MusicKeyScale musicKey. */
            public musicKey: rv.data.MusicKeyScale.MusicKey;

            /** MusicKeyScale musicScale. */
            public musicScale: rv.data.MusicKeyScale.MusicScale;

            /**
             * Creates a new MusicKeyScale instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MusicKeyScale instance
             */
            public static create(properties?: rv.data.IMusicKeyScale): rv.data.MusicKeyScale;

            /**
             * Encodes the specified MusicKeyScale message. Does not implicitly {@link rv.data.MusicKeyScale.verify|verify} messages.
             * @param message MusicKeyScale message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.IMusicKeyScale, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MusicKeyScale message, length delimited. Does not implicitly {@link rv.data.MusicKeyScale.verify|verify} messages.
             * @param message MusicKeyScale message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.IMusicKeyScale, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MusicKeyScale message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MusicKeyScale
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.MusicKeyScale;

            /**
             * Decodes a MusicKeyScale message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MusicKeyScale
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.MusicKeyScale;

            /**
             * Verifies a MusicKeyScale message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MusicKeyScale message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MusicKeyScale
             */
            public static fromObject(object: { [k: string]: any }): rv.data.MusicKeyScale;

            /**
             * Creates a plain object from a MusicKeyScale message. Also converts values to other types if specified.
             * @param message MusicKeyScale
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.MusicKeyScale, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MusicKeyScale to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for MusicKeyScale
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }

        namespace MusicKeyScale {

            /** MusicKey enum. */
            enum MusicKey {
                MUSIC_KEY_A_FLAT = 0,
                MUSIC_KEY_A = 1,
                MUSIC_KEY_A_SHARP = 2,
                MUSIC_KEY_B_FLAT = 3,
                MUSIC_KEY_B = 4,
                MUSIC_KEY_B_SHARP = 5,
                MUSIC_KEY_C_FLAT = 6,
                MUSIC_KEY_C = 7,
                MUSIC_KEY_C_SHARP = 8,
                MUSIC_KEY_D_FLAT = 9,
                MUSIC_KEY_D = 10,
                MUSIC_KEY_D_SHARP = 11,
                MUSIC_KEY_E_FLAT = 12,
                MUSIC_KEY_E = 13,
                MUSIC_KEY_E_SHARP = 14,
                MUSIC_KEY_F_FLAT = 15,
                MUSIC_KEY_F = 16,
                MUSIC_KEY_F_SHARP = 17,
                MUSIC_KEY_G_FLAT = 18,
                MUSIC_KEY_G = 19,
                MUSIC_KEY_G_SHARP = 20
            }

            /** MusicScale enum. */
            enum MusicScale {
                MUSIC_SCALE_MAJOR = 0,
                MUSIC_SCALE_MINOR = 1
            }
        }

        /** Properties of a Timestamp. */
        interface ITimestamp {

            /** Timestamp seconds */
            seconds?: (number|Long|null);

            /** Timestamp nanos */
            nanos?: (number|null);
        }

        /** Represents a Timestamp. */
        class Timestamp implements ITimestamp {

            /**
             * Constructs a new Timestamp.
             * @param [properties] Properties to set
             */
            constructor(properties?: rv.data.ITimestamp);

            /** Timestamp seconds. */
            public seconds: (number|Long);

            /** Timestamp nanos. */
            public nanos: number;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Timestamp instance
             */
            public static create(properties?: rv.data.ITimestamp): rv.data.Timestamp;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link rv.data.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: rv.data.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link rv.data.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: rv.data.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): rv.data.Timestamp;

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): rv.data.Timestamp;

            /**
             * Verifies a Timestamp message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Timestamp
             */
            public static fromObject(object: { [k: string]: any }): rv.data.Timestamp;

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @param message Timestamp
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: rv.data.Timestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Timestamp to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };

            /**
             * Gets the default type url for Timestamp
             * @param [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns The default type url
             */
            public static getTypeUrl(typeUrlPrefix?: string): string;
        }
    }
}
